
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//Получение параметров
	// Рощектаев Д.Е., ЭП-0024441, 23.01.2025 {
	
	Если Параметры.Свойство("ЗадачаПроцесса") Тогда
		
		Если Параметры.ЗадачаПроцесса.Пустая() Тогда 
			
			Элементы.ЗадачаПроцесса.Видимость = Ложь;
			Элементы.ТегиЗадачиПроцессаПолеHTML.Видимость = Ложь;
			
		Иначе     
			
			ЗадачаПроцесса = Параметры.ЗадачаПроцесса;
			
		КонецЕсли;
		
	Иначе
		
		Элементы.ЗадачаПроцесса.Видимость = Ложь;
		Элементы.ТегиЗадачиПроцессаПолеHTML.Видимость = Ложь;
		
	КонецЕсли;

		
	// Рощектаев Д.Е., ЭП-0024441, 23.01.2025 }
	//Если Параметры.ЗадачаПроцесса.Пустая() Тогда
	//	Элементы.Задача.Видимость = Ложь;
	//	Элементы.ТегиЗадачиПроцессаПолеHTML.Видимость = Ложь;
	//Иначе
	//	ЗадачаПроцесса = Параметры.ЗадачаПроцесса;
	//КонецЕсли;
	
	Если Параметры.Проект.Пустая() Тогда
		Элементы.Проект.Видимость = Ложь;
		Элементы.ТегиПроектаПолеHTML.Видимость = Ложь;
	Иначе
		Проект = Параметры.Проект;
	КонецЕсли;
	
	Если Параметры.ТехническийПроект.Пустая() Тогда
		Элементы.ТехническийПроект.Видимость = Ложь; 
		Элементы.ТегиТехПроектаПолеHTML.Видимость = Ложь;
	Иначе
		ТехническийПроект = Параметры.ТехническийПроект;
	КонецЕсли;
	
	НомерТега = 0;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//Перезаполнить поля HTML  
	Если ЗадачаПроцесса = ПредопределенноеЗначение("Справочник.ЗадачиПроцесса.ПустаяСсылка") Тогда
		
		//ПрочитатьТегиПроектаПолеHTML();
		//ПрочитатьТегиТехПроектаПолеHTML();
		
		// Рощектаев Д.Е., ЭП-0024441, 23.01.2025 {
		ПрочитатьТегиТехПроектаПолеHTML();
		ПрочитатьТегиПроектаПолеHTML();
        // Рощектаев Д.Е., ЭП-0024441, 23.01.2025 }

		
	Иначе  
		
		ПрочитатьТегиЗадачиПроцессаПолеHTML();
		ПрочитатьТегиПроектаПолеHTML(); 
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник) 
	
		Если ИмяСобытия = "Справочник.ЭП_Теги.Изменение" Тогда
		
		//Перезаполнить поля HTML
		Если ЗадачаПроцесса = ПредопределенноеЗначение("Справочник.ЗадачиПроцесса.ПустаяСсылка") Тогда
			
				//Удаление строки в таблице по Ссылке
			Для Каждого Строка Из ТаблицаТегиТехПроекта Цикл
				
				Если Строка.Тег = Параметр.Тег Тогда
					Строка.Представление = Параметр.Представление;
					Строка.Цвет = Параметр.Цвет;
					Продолжить;
				КонецЕсли;
				
			КонецЦикла;
			
			ПрочитатьТегиТехПроектаПолеHTML();
			ПрочитатьТегиПроектаПолеHTML();    
			
		Иначе   
			
			//Удаление строки в таблице по Ссылке
			Для Каждого Строка Из ТаблицаТегиЗадачиПроцесса Цикл
				
				Если Строка.Тег = Параметр.Тег Тогда
					Строка.Представление = Параметр.Представление;
					Строка.Цвет = Параметр.Цвет;
					Продолжить;
				КонецЕсли;
				
			КонецЦикла;
			
			ПрочитатьТегиЗадачиПроцессаПолеHTML();
			ПрочитатьТегиПроектаПолеHTML();   
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтрокаПоискаТегиОчистка(Элемент, СтандартнаяОбработка) 
	
	СтандартнаяОбработка = Ложь;
	СтрокаПоискаТеги = ""; 
	
	//Перезаполнить поля HTML
	ПрочитатьТегиПроектаПолеHTML();
	
КонецПроцедуры


&НаКлиенте
Процедура СтрокаПоискаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	СтрокаПоискаТеги = Текст;
	
	СтандартнаяОбработка = Ложь;
	Список = Новый СписокЗначений;
	Список.Вставить(0, Текст, """"+Текст+"""");
	ДанныеВыбора = Список;  
	
	ПрочитатьТегиПроектаПолеHTML();  
	
КонецПроцедуры   

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Поиск(Команда)
	ТекущееСообщениеПользователю = "";
КонецПроцедуры

&НаКлиенте
Процедура СоздатьТег(Команда)   

	ПараметрыФормы = Новый Структура("Проект, ТекстЗаполнения, ИзменениеЦветНазвание", Проект, СтрокаПоискаТеги, Истина);
	ОткрытьФорму("Справочник.ЭП_Теги.Форма.ФормаЭлемента", ПараметрыФормы, Элементы.СтрокаПоискаТеги); 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьТеги(Команда) 
	
	МассивТеги = ПолучениеДобавленныхТегов();
	ОповеститьОВыборе(МассивТеги); 

	//Очистить таблицу
	Если ЗадачаПроцесса = ПредопределенноеЗначение("Справочник.ЗадачиПроцесса.ПустаяСсылка") Тогда
		ТаблицаТегиТехПроекта.Очистить(); 
	Иначе  
		ТаблицаТегиЗадачиПроцесса.Очистить();   
	КонецЕсли; 
	
КонецПроцедуры 

&НаСервере
Функция ПолучениеДобавленныхТегов()
	
	МассивТеги = Новый Массив;   
	
	Если ЗадачаПроцесса = ПредопределенноеЗначение("Справочник.ЗадачиПроцесса.ПустаяСсылка") Тогда
		Теги = ТаблицаТегиТехПроекта.Выгрузить(,"Тег"); 
	Иначе  
		Теги = ТаблицаТегиЗадачиПроцесса.Выгрузить(,"Тег");   
	КонецЕсли; 
		
	Для Каждого Строка Из Теги Цикл
		МассивТеги.Добавить(Строка.Тег);
	КонецЦикла; 
	
	Возврат МассивТеги;
	
КонецФункции


#КонецОбласти

#Область ОбработчикиСобытийЭлементовГруппыВыборТегов

&НаКлиенте
Процедура ТегиПроектаПолеHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	ЭтаФорма.Модифицированность = Истина;
	
	htmlElement = НайтиСсылку(ДанныеСобытия.Element.tagName);
	// Анализируем если произошло нажание не на ссылку или кнопку
	Если htmlElement <> Неопределено Тогда 
		
		// Если у ссылки есть идентификатор
		Если СокрЛП(ДанныеСобытия.Element.id) <> "" ИЛИ СокрЛП(ДанныеСобытия.Button.id) <> "" Тогда
			// Получаем ссылку из атрибута id 
			Если ДанныеСобытия.Button = Неопределено Тогда
				//СсылкаНаЭлемент = htmlElement.id;
				ГУИД = ДанныеСобытия.Element.id;
			Иначе 
				//СсылкаНаЭлемент = htmlButton.id;
				ГУИД = ДанныеСобытия.Button.id;
			КонецЕсли;    
			//GUID = Новый УникальныйИдентификатор(ГУИД);
			Ссылка = ПолеHTMLПриНажатииНаСервере(ГУИД);
			
			// Анализируем если произошло нажатие на ссылку
			Если htmlElement = "a" Тогда
				
				Если ЗадачаПроцесса = ПредопределенноеЗначение("Справочник.ЗадачиПроцесса.ПустаяСсылка") Тогда 
					
					//Добавляем строку в ТЗ ТегиТехПроекта
					НоваяСтрока = ТаблицаТегиТехПроекта.Добавить();
					Новаястрока.Тег = Ссылка;
					НоваяСтрока.Представление = ДанныеСобытия.Element.text;
					//НоваяСтрока.Цвет = ПолучениеЦвета(Проект, Ссылка);
					Цвет = ДанныеСобытия.Element.style.borderColor; 
					НоваяСтрока.Цвет = СтрЗаменить(Сред(Цвет, 5), ")", "");  
					//ДанныеСобытия.Element.style.borderColor
					
					//Перезаполняем HTML поля 
					ПрочитатьТегиТехПроектаПолеHTML();
					ПрочитатьТегиПроектаПолеHTML(); 
 
				Иначе  
					
					//Добавляем строку в ТЗ ТегиЗадачиПроцесса
					НоваяСтрока = ТаблицаТегиЗадачиПроцесса.Добавить();
					Новаястрока.Тег = Ссылка;
					НоваяСтрока.Представление = ДанныеСобытия.Element.text;
					//НоваяСтрока.Цвет = ПолучениеЦвета(Проект, Ссылка);
					Цвет = ДанныеСобытия.Element.style.borderColor;
					НоваяСтрока.Цвет = СтрЗаменить(Сред(Цвет, 5), ")", "");  
					//ДанныеСобытия.Element.style.borderColor
					
					//Перезаполняем HTML поля
					ПрочитатьТегиЗадачиПроцессаПолеHTML();
					ПрочитатьТегиПроектаПолеHTML(); 
   
				КонецЕсли; 

			// Анализируем если произошло нажатие на кнопку
			ИначеЕсли htmlElement = "svg" ИЛИ htmlElement = "path" Тогда
				// Открытие формы элемента для редактирования данных
				ПараметрыФормы = Новый Структура("Ключ, ИзменениеЦветНазвание", Ссылка, Истина);
				ОткрытьФорму("Справочник.ЭП_Теги.Форма.ФормаЭлемента", ПараметрыФормы, ЭтаФорма);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;    
	
КонецПроцедуры 


&НаКлиенте
Процедура ТегиТехПроектаПолеHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)

	ЭтаФорма.Модифицированность = Истина;
	
	htmlElement = НайтиСсылку(ДанныеСобытия.Element.tagName);
	// Анализируем если произошло нажание не на ссылку
	Если htmlElement <> Неопределено Тогда
		// Если у ссылки есть идентификатор
		Если СокрЛП(ДанныеСобытия.Element.id) <> "" ИЛИ СокрЛП(ДанныеСобытия.Button.id) <> "" Тогда
			// Получаем ссылку из атрибута id 
			Если ДанныеСобытия.Button = Неопределено Тогда
				//СсылкаНаЭлемент = htmlElement.id;
				ГУИД = ДанныеСобытия.Element.id;
			Иначе 
				//СсылкаНаЭлемент = htmlButton.id;
				ГУИД = ДанныеСобытия.Button.id;
			КонецЕсли;    
			//GUID = Новый УникальныйИдентификатор(ГУИД);
			Ссылка = ПолеHTMLПриНажатииНаСервере(ГУИД);
			
			// Анализируем если произошло нажатие на ссылку
			Если htmlElement = "a" Тогда
				
				ПараметрыОтбора = Новый Структура("Тег", Ссылка);
				//ПараметрыОтбора = Новый Структура("Представление", ДанныеСобытия.Element.text);
				СтрокаИзменения = ТаблицаТегиТехПроекта.НайтиСтроки(ПараметрыОтбора);
				Для Каждого Строка Из СтрокаИзменения Цикл
					//Удаляем строку из ТЗ ТегиТехПроекта
					Индекс = ТаблицаТегиТехПроекта.Индекс(Строка);
					ТаблицаТегиТехПроекта.Удалить(Индекс);
				КонецЦикла; 
				
				Если ТаблицаТегиТехПроекта.Количество() = 0 Тогда
					ТаблицаТегиТехПроекта.Добавить();
				КонецЕсли;
				
				//Перезаполняем HTML поля 
				ПрочитатьТегиТехПроектаПолеHTML();
				ПрочитатьТегиПроектаПолеHTML();
				
				// Анализируем если произошло нажатие на кнопку
			ИначеЕсли htmlElement = "svg" ИЛИ htmlElement = "path" Тогда
				// Открытие формы элемента для редактирования данных
				ПараметрыФормы = Новый Структура("Ключ, ИзменениеЦветНазвание", Ссылка, Истина);
				ОткрытьФорму("Справочник.ЭП_Теги.Форма.ФормаЭлемента", ПараметрыФормы, ЭтаФорма);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;    
	
КонецПроцедуры 

&НаКлиенте
Процедура ТегиЗадачиПроцессаПолеHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	ЭтаФорма.Модифицированность = Истина;
	
	htmlElement = НайтиСсылку(ДанныеСобытия.Element.tagName);
	// Анализируем если произошло нажание не на ссылку
	Если htmlElement <> Неопределено Тогда
		// Если у ссылки есть идентификатор
		Если СокрЛП(ДанныеСобытия.Element.id) <> "" ИЛИ СокрЛП(ДанныеСобытия.Button.id) <> "" Тогда
			// Получаем ссылку из атрибута id 
			Если ДанныеСобытия.Button = Неопределено Тогда
				//СсылкаНаЭлемент = htmlElement.id;
				ГУИД = ДанныеСобытия.Element.id;
			Иначе 
				//СсылкаНаЭлемент = htmlButton.id;
				ГУИД = ДанныеСобытия.Button.id;
			КонецЕсли;    
			//GUID = Новый УникальныйИдентификатор(ГУИД);
			Ссылка = ПолеHTMLПриНажатииНаСервере(ГУИД);
			
			// Анализируем если произошло нажатие на ссылку
			Если htmlElement = "a" Тогда
				
				ПараметрыОтбора = Новый Структура("Тег", Ссылка);
				//ПараметрыОтбора = Новый Структура("Представление", ДанныеСобытия.Element.text);
				СтрокаИзменения = ТаблицаТегиЗадачиПроцесса.НайтиСтроки(ПараметрыОтбора);
				Для Каждого Строка Из СтрокаИзменения Цикл
					//Удаляем строку из ТЗ ТегиТехПроекта
					Индекс = ТаблицаТегиЗадачиПроцесса.Индекс(Строка);
					ТаблицаТегиЗадачиПроцесса.Удалить(Индекс);
				КонецЦикла; 
				
				Если ТаблицаТегиЗадачиПроцесса.Количество() = 0 Тогда
					ТаблицаТегиЗадачиПроцесса.Добавить();
				КонецЕсли;
				
				//Перезаполняем HTML поля 
				ПрочитатьТегиПроектаПолеHTML(); 
				ПрочитатьТегиЗадачиПроцессаПолеHTML();
				
				// Анализируем если произошло нажатие на кнопку
			ИначеЕсли htmlElement = "svg" ИЛИ htmlElement = "path" Тогда
				// Открытие формы элемента для редактирования данных
				ПараметрыФормы = Новый Структура("Ключ, ИзменениеЦветНазвание", Ссылка, Истина);
				ОткрытьФорму("Справочник.ЭП_Теги.Форма.ФормаЭлемента", ПараметрыФормы, ЭтаФорма);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;     
	
КонецПроцедуры 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции


//ЗАПОЛНЕНИЕ HTML ПОЛЯ ТЕГАМИ ПРОЕКТА//

&НаСервереБезКонтекста
Функция ПолучениеСтиляИСсылок(Проект = "", СписокТеги = "", ТекстПоискаТега) 
	
	ТекстСтиль = "";
	ТекстСсылки = "";  
	
	Запрос = Новый Запрос; 
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭП_Теги.Ссылка КАК Тег,
	|	ЭП_Теги.Наименование КАК Представление,
	|	ЭП_Теги.НазваниеЦвета КАК НазваниеЦвета,
	|	ЭП_Теги.Владелец КАК Владелец
	|ПОМЕСТИТЬ ВТ_Теги
	|ИЗ
	|	Справочник.ЭП_Теги КАК ЭП_Теги
	|ГДЕ
	|	ЭП_Теги.Владелец = &Основание
	|	И НЕ ЭП_Теги.Ссылка В (&СписокТеги)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Владелец,
	|	Тег
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_Теги.Тег КАК Тег,
	|	ВТ_Теги.Представление КАК Представление,
	|	СТРОКА(ЕСТЬNULL(ВТ_Теги.НазваниеЦвета.Красный, 0)) + "", "" + СТРОКА(ЕСТЬNULL(ВТ_Теги.НазваниеЦвета.Зеленый, 0)) + "", "" + СТРОКА(ЕСТЬNULL(ВТ_Теги.НазваниеЦвета.Синий, 0)) КАК Цвет
	|ИЗ
	|	ВТ_Теги КАК ВТ_Теги
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭП_ИзмененияТеговВПроектах КАК ЭП_ИзмененияТеговВПроектах
	|		ПО ВТ_Теги.Владелец = ЭП_ИзмененияТеговВПроектах.Проект
	|			И ВТ_Теги.Тег = ЭП_ИзмененияТеговВПроектах.Тег
	|ГДЕ
	|	ВТ_Теги.Представление ПОДОБНО ""%"" + &ТекстПоискаТега + ""%""
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭП_ИзмененияТеговВПроектах.ДатаИзменения УБЫВ";  
	
	Запрос.УстановитьПараметр("Основание", Проект);

	Запрос.УстановитьПараметр("СписокТеги", СписокТеги); 
		
	Если ТекстПоискаТега = "" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, """%"" + &ТекстПоискаТега + ""%""", """%""");   
	Иначе
		Запрос.УстановитьПараметр("ТекстПоискаТега", ТекстПоискаТега);	
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить(); 
	УстановитьПривилегированныйРежим(Ложь);
	
	Выборка = РезультатЗапроса.Выбрать();
	
	НомерТега = 0;
	
	Пока Выборка.Следующий() Цикл 		// wanna cry bout it( 	
		
		НомерТега = НомерТега + 1;            
		//Цвет = Строка(Выборка.Красный) + ", " + Выборка.Зеленый + "," + Выборка.Синий;
		НазваниеКласса = "item-" + НомерТега;  
		Представение = Выборка.Представление;
		СтильСсылка = ФормированияСтиляСсылки(Выборка, НазваниеКласса);
		ТекстСтиль = ТекстСтиль + СтильСсылка.Стиль;
		ТекстСсылки = ТекстСсылки + СтильСсылка.Ссылка;
		
	КонецЦикла; 
	
	ТекстСтильСсылки = Новый Структура("Стиль, Ссылки", ТекстСтиль, ТекстСсылки);
	
	Возврат ТекстСтильСсылки;				
	
КонецФункции

&НаКлиенте
Процедура ПрочитатьТегиПроектаПолеHTML()  
	
	Если ЗадачаПроцесса = ПредопределенноеЗначение("Справочник.ЗадачиПроцесса.ПустаяСсылка") Тогда
		ТегиПроектаПолеHTML = ПолучениеСтрокиHTML("Проект");       
	Иначе   
	    ТегиПроектаПолеHTML = ПолучениеСтрокиHTML("Задача");        
	КонецЕсли;  
	
КонецПроцедуры  



//ЗАПОЛНЕНИЕ HTML ПОЛЯ ТЕГАМИ ТЕХНИЧЕСКОГО ПРОЕКТА//  

&НаСервере
Процедура ЗаполнениеТаблицыТегиТехПроекта()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Проект", Проект);
	Запрос.УстановитьПараметр("ТехническийПроект", ТехническийПроект);
	Запрос.УстановитьПараметр("СписокТегов", ТаблицаТегиТехПроекта.Выгрузить(, "Тег"));
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭП_ТегиПоТехническимПроектам.Тег КАК Тег,
	|	ПРЕДСТАВЛЕНИЕ(ЭП_ТегиПоТехническимПроектам.Тег) КАК Представление,
	|	СТРОКА(ЕСТЬNULL(ЭП_ТегиПоТехническимПроектам.Тег.НазваниеЦвета.Красный, 0)) + "", "" + СТРОКА(ЕСТЬNULL(ЭП_ТегиПоТехническимПроектам.Тег.НазваниеЦвета.Зеленый, 0)) + "", "" + СТРОКА(ЕСТЬNULL(ЭП_ТегиПоТехническимПроектам.Тег.НазваниеЦвета.Синий, 0)) КАК Цвет
	|ИЗ
	|	РегистрСведений.ЭП_ТегиПоТехническимПроектам КАК ЭП_ТегиПоТехническимПроектам
	|ГДЕ
	|	ЭП_ТегиПоТехническимПроектам.Проект = &Проект
	|	И ЭП_ТегиПоТехническимПроектам.ТехническийПроект = &ТехническийПроект";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ТаблицаТегиТехПроекта.Очистить();
	
	Выборка = РезультатЗапроса.Выбрать();
		
	Пока Выборка.Следующий() Цикл 
		НоваяСтрока = ТаблицаТегиТехПроекта.Добавить();
		НоваяСтрока.Тег = Выборка.Тег; 
		НоваяСтрока.Цвет = Выборка.Цвет;
		НоваяСтрока.Представление = Выборка.Представление;
	КонецЦикла; 
	
КонецПроцедуры  

&НаСервере
Процедура ЗаполнениеТаблицыТегиЗадачиПроцесса()
	
	Запрос = Новый Запрос; 
	Запрос.УстановитьПараметр("Проект", Проект);
	Запрос.УстановитьПараметр("ЗадачаПроцесса", ЗадачаПроцесса);
	Запрос.УстановитьПараметр("СписокТегов", ТаблицаТегиЗадачиПроцесса.Выгрузить(, "Тег"));
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭП_ТегиПоЗадачамПроцесса.Тег КАК Тег,
	|	ПРЕДСТАВЛЕНИЕ(ЭП_ТегиПоЗадачамПроцесса.Тег) КАК Представление,
	|	СТРОКА(ЕСТЬNULL(ЭП_ТегиПоЗадачамПроцесса.Тег.НазваниеЦвета.Красный, 0)) + "", "" + СТРОКА(ЕСТЬNULL(ЭП_ТегиПоЗадачамПроцесса.Тег.НазваниеЦвета.Зеленый, 0)) + "", "" + СТРОКА(ЕСТЬNULL(ЭП_ТегиПоЗадачамПроцесса.Тег.НазваниеЦвета.Синий, 0)) КАК Цвет
	|ИЗ
	|	РегистрСведений.ЭП_ТегиПоЗадачамПроцесса КАК ЭП_ТегиПоЗадачамПроцесса
	|ГДЕ 
	|	ЭП_ТегиПоЗадачамПроцесса.Проект = &Проект
	|	И ЭП_ТегиПоЗадачамПроцесса.ЗадачаПроцесса = &ЗадачаПроцесса";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ТаблицаТегиЗадачиПроцесса.Очистить();
	
	Выборка = РезультатЗапроса.Выбрать();
		
	Пока Выборка.Следующий() Цикл                               
		НоваяСтрока = ТаблицаТегиЗадачиПроцесса.Добавить();
		НоваяСтрока.Тег = Выборка.Тег; 
		НоваяСтрока.Цвет = Выборка.Цвет;
		НоваяСтрока.Представление = Выборка.Представление;
	КонецЦикла; 
	
КонецПроцедуры

//&НаСервере
&НаКлиенте  
Функция ПолучениеСтиляИСсылокТехПроекта() 
	
	ТекстСтиль = "";
	ТекстСсылки = ""; 
		
	Если ТаблицаТегиТехПроекта.Количество() = 0 Тогда 
		ЗаполнениеТаблицыТегиТехПроекта(); 
	КонецЕсли;
	
	НомерТега = 0;
	
	Для Каждого Строка Из ТаблицаТегиТехПроекта Цикл
		
		НомерТега = НомерТега + 1;
		Цвет = Строка.Цвет;
		НазваниеКласса = "item-" + НомерТега;
		Представение = Строка.Представление;
		СтильСсылка = ФормированияСтиляСсылки(Строка, НазваниеКласса);
		ТекстСтиль = ТекстСтиль + СтильСсылка.Стиль;
		ТекстСсылки = ТекстСсылки + СтильСсылка.Ссылка;
				
	КонецЦикла; 
	
	ТекстСтильСсылки = Новый Структура("Стиль, Ссылки", ТекстСтиль, ТекстСсылки);
	
	Возврат ТекстСтильСсылки;				
	
КонецФункции 

&НаКлиенте  
Функция ПолучениеСтиляИСсылокЗадачиПроцесса() 
	
	ТекстСтиль = "";
	ТекстСсылки = ""; 
		
	Если ТаблицаТегиЗадачиПроцесса.Количество() = 0 Тогда  
		ЗаполнениеТаблицыТегиЗадачиПроцесса(); 
	КонецЕсли;
	
	НомерТега = 0;
	
	Для Каждого Строка Из ТаблицаТегиЗадачиПроцесса Цикл     
		
		НомерТега = НомерТега + 1;
		Цвет = Строка.Цвет;
		НазваниеКласса = "item-" + НомерТега;
		Представение = Строка.Представление;
		СтильСсылка = ФормированияСтиляСсылки(Строка, НазваниеКласса);
		ТекстСтиль = ТекстСтиль + СтильСсылка.Стиль;
		ТекстСсылки = ТекстСсылки + СтильСсылка.Ссылка;
				
	КонецЦикла; 
	
	ТекстСтильСсылки = Новый Структура("Стиль, Ссылки", ТекстСтиль, ТекстСсылки);
	
	Возврат ТекстСтильСсылки;				
	
КонецФункции

&НаКлиенте
Процедура ПрочитатьТегиТехПроектаПолеHTML() 

	Если ТаблицаТегиТехПроекта.Количество() = 1 Тогда
		Строка = ТаблицаТегиТехПроекта.Получить(0);
		Если Строка.Представление = "" Тогда
			ТегиТехПроектаПолеHTML = "";
			ТаблицаТегиТехПроекта.Удалить(0);
			Возврат;
		КонецЕсли;
	КонецЕсли;  
		
	ТегиТехПроектаПолеHTML = ПолучениеСтрокиHTML();  
		
КонецПроцедуры  

&НаКлиенте
Процедура ПрочитатьТегиЗадачиПроцессаПолеHTML()       

	Если ТаблицаТегиЗадачиПроцесса.Количество() = 1 Тогда
		Строка = ТаблицаТегиЗадачиПроцесса.Получить(0);
		Если Строка.Представление = "" Тогда
			ТегиЗадачиПроцессаПолеHTML = "";
			ТаблицаТегиЗадачиПроцесса.Удалить(0);
			Возврат;
		КонецЕсли;
	КонецЕсли;  
		
	ТегиЗадачиПроцессаПолеHTML = ПолучениеСтрокиHTML();  
		
КонецПроцедуры 

&НаКлиенте
Функция ПолучениеСтрокиHTML(ТипТега = "")
		
	СтрокаНачало = "<html><head><meta content='text/html; charset=windows-1251'>
	| <title>Теги</title><style> body {box-sizing: border-box; overflow: auto;} a {display: inline-block; padding: 3px 5px; padding-right: 10px; border: 2px solid;
	| border-radius: 5px; font-family: Arial, Helvetica, sans-serif; font-size: 12px; line-height: 14px; 
	| text-decoration: none;  text-align: center; transition: all 0.3s ease-out;} a:hover {color: #fff;}
	| a:hover + .btn {opacity: 1;} .btn:hover {opacity: 1;}
	| .list {display: flex; align-content: start; justify-content: start; flex-wrap: wrap;
	| width:100%; height: 100%;} .btn {bottom: 0px; right: 20px; width: 24px; height: 24px; border: none;
	| position: relative; margin: 0 auto; cursor: pointer; transition: all 0.3s ease-out; opacity: 0;} 
	| .item {position:relative; margin-bottom: 3px;}"; 
	
	СтрокаПослеСтиля = "</style></head><body><div class=""list"">";
	СтрокаКонец = "</div></body></html>"; 
	
	Если ТипТега = "Задача" Тогда          
		
		ТекСписокТегиЗадачи = Новый Массив;
		Для Каждого Строка Из ТаблицаТегиЗадачиПроцесса Цикл
			ТекСписокТегиЗадачи.Добавить(Строка.Тег);
		КонецЦикла;
		
		ТекстСтильСсылки = ПолучениеСтиляИСсылок(Проект, ТекСписокТегиЗадачи, СтрокаПоискаТеги);
		СтрокаСтиль = ТекстСтильСсылки.Стиль;
		СтрокаСсылки = ТекстСтильСсылки.Ссылки;
		
	ИначеЕсли ТипТега = "Проект" Тогда   
		
		ТекСписокТегиТехПроекта = Новый Массив;
		Для Каждого Строка Из ТаблицаТегиТехПроекта Цикл
			ТекСписокТегиТехПроекта.Добавить(Строка.Тег);
		КонецЦикла;
		
		ТекстСтильСсылки = ПолучениеСтиляИСсылок(Проект, ТекСписокТегиТехПроекта, СтрокаПоискаТеги);
		СтрокаСтиль = ТекстСтильСсылки.Стиль;
		СтрокаСсылки = ТекстСтильСсылки.Ссылки;	
		
	Иначе
		
		Если ЗадачаПроцесса = ПредопределенноеЗначение("Справочник.ЗадачиПроцесса.ПустаяСсылка") Тогда
			ТекстСтильСсылки = ПолучениеСтиляИСсылокТехПроекта();       
		Иначе   
	    	ТекстСтильСсылки = ПолучениеСтиляИСсылокЗадачиПроцесса();        
		КонецЕсли;

		СтрокаСтиль = ТекстСтильСсылки.Стиль;
		СтрокаСсылки = ТекстСтильСсылки.Ссылки; 
		
	КонецЕсли;
	
	СтрокаHTML = СтрокаНачало + СтрокаСтиль + СтрокаПослеСтиля + СтрокаСсылки + СтрокаКонец;
	
	Возврат СтрокаHTML;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ФормированияСтиляСсылки(Параметр, НазваниеКласса)
	
	Тег = Параметр.Тег;
	Цвет = Параметр.Цвет;
	
	Стиль = "." + НазваниеКласса + " {color: rgb(" + Цвет + ");} ." + НазваниеКласса + ":hover {background-color: rgb(" +
			Цвет + ");}" + " .btn svg {position: absolute;}";

	
	СсылкаНаЭлемент = Тег.УникальныйИдентификатор();
		
	Ссылка = "<div class=""item""><a id=""" + СсылкаНаЭлемент + """ class = " + НазваниеКласса + 
			" href=""" + Тег + """ style = ""border-color: rgb(" + Цвет + ")"">" + 
			Параметр.Представление + "</a> <button id=""" + СсылкаНаЭлемент + """ class=""btn"">
			|<svg xmlns=""http://www.w3.org/2000/svg"" xmlns:xlink=""http://www.w3.org/1999/xlink"" version=""1.1"" id=""Capa_1"" 
			|x=""0px"" y=""0px"" width=""12px"" height=""12px"" viewBox=""0 0 612.032 612.032"" style=""enable-background:new 0 0 612.032 612.032;"" xml:space=""preserve"">
			|<path d=""M602.905,152.23l-60.41,60.411L399.378,69.523L459.76,9.112c20.503-20.503,41.006,0,41.006,0l102.14,102.111   
			|C602.905,111.225,623.408,131.728,602.905,152.23z M0.015,612.032l173.51-30.451L30.09,438.146L0.015,612.032z M50.211,418.679   l143.137,143.137L520.52,234.645L377.383,91.508L50.211,418.679z""/>
			|</svg></button></div> "; 
		
			
	СтильСсылка = Новый Структура("Стиль, Ссылка", Стиль, Ссылка);
	Возврат СтильСсылка;
	
КонецФункции

&НаКлиенте
Процедура Заполнить(Команда) 
	
	СтрокаПоискаТеги = "";
	
	Если ЗадачаПроцесса = ПредопределенноеЗначение("Справочник.ЗадачиПроцесса.ПустаяСсылка") Тогда 
		
		ТаблицаТегиТехПроекта.Очистить();
	
		//Перезаполнить поля HTML 
		ПрочитатьТегиТехПроектаПолеHTML();
		ПрочитатьТегиПроектаПолеHTML();
       
	Иначе
		
	    ТаблицаТегиЗадачиПроцесса.Очистить();
		
		//ПрочитатьТегиПроектаПолеHTML();
		//ПрочитатьТегиЗадачиПроцессаПолеHTML();
		//Перезаполнить поля HTML  
		
		// Рощектаев Д.Е., ЭП-0024441, 23.01.2025 {
		ПрочитатьТегиЗадачиПроцессаПолеHTML();
		ПрочитатьТегиПроектаПолеHTML();
		// Рощектаев Д.Е., ЭП-0024441, 23.01.2025 {
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолеHTMLПриНажатииНаСервере(ГУИД)
	Ссылка = Справочники.ЭП_Теги.ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД)); 
	Возврат Ссылка;
КонецФункции   

&НаКлиенте
Функция НайтиСсылку(Элемент)
	Врем = Элемент;
	Если НРег(Врем) = "a" ИЛИ НРег(Врем) = "svg" ИЛИ НРег(Врем) = "path" Тогда
		Возврат НРег(Врем);
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

#КонецОбласти 
