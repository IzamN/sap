&НаСервере
Перем ИзмененияПрименимости;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Заголовок = НСтр("ru = 'Применимость патча к конфигурациям'");
	
	Патч = Параметры.Патч;
	Версия = Параметры.Версия;
	ИдентификаторПатча = Параметры.УникальныйИдентификатор;
	
	Свойства = ПатчиСлужебный.ЗначенияСвойствВерсииПатча(ИдентификаторПатча, "Параметры");
	АдресХранилища = ПоместитьВоВременноеХранилище(Свойства.Параметры, УникальныйИдентификатор);
	
	ДополнительныеПараметры = Свойства.Параметры.Получить();
	ИзмененияПрименимости = Новый Структура;
	ИзмененияПрименимости.Вставить("Включена", Новый Соответствие);
	ИзмененияПрименимости.Вставить("Отключена", Новый Соответствие);
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ИзмененияПрименимости") Тогда
		ИзмененияПрименимости = ДополнительныеПараметры.ИзмененияПрименимости;
	КонецЕсли;
	
	КэшИзмененийПрименимости = ПоместитьВоВременноеХранилище(ИзмененияПрименимости, УникальныйИдентификатор);
	ЗаполнитьТаблицуПрименимости(ИзмененияПрименимости);
	
	Элементы.ФормаЗаписатьИЗакрыть.Видимость = УправлениеДоступом.ИзменениеРазрешено(Патч);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиЭлементовШапкиФормы

&НаКлиенте
Процедура ПрименимостьПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ИдентификаторПроблемыПрименимости = "РежимСовместимости" Тогда
		Отказ = Истина;
		ТекстПредупреждения = НСтр("ru = 'Режим совместимости конфигурации ниже режима совместимости патча.
			|Патч не сможет быть установлен в данную конфигурацию.
			|
			|Для включения применимости к данной конфигурации необходимо отредактировать патч,
			|понизив ему режим совместимости.
			|
			|Текущий режим совместимости конфигурации и патча см. в поле ""Информация о применимости"".'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	ОчиститьСообщения();
	Если Не ЗаписатьИЗакрытьНаСервере() Тогда
		Возврат;
	КонецЕсли;
	
	Закрыть(АдресХранилища);
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму(Команда)
	Закрыть();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ЗаписатьИЗакрытьНаСервере()
	ТаблицаПрименимости = РеквизитФормыВЗначение("Применимость");
	Если ТаблицаПрименимости.Найти(Истина, "Включена") = Неопределено Тогда
		Сообщить(НСтр("ru = 'Должна остаться хотя бы одна конфигурация, к которой применим патч'"));
		Возврат Ложь;
	КонецЕсли;
	
	ИзмененияПрименимости = Новый Структура;
	ИзмененияПрименимости.Вставить("Включена", Новый Соответствие);
	ИзмененияПрименимости.Вставить("Отключена", Новый Соответствие);
	БазовыеВерсии = Новый Соответствие;
	Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Патч, "Владелец");
	ЭтоКонфигурацияБазовая = ПатчиСлужебный.ЭтоКонфигурацияБазовая(Проект);
	Для Каждого Строка Из Применимость Цикл
		Если Не ЭтоКонфигурацияБазовая И СтрНайти(Строка.Конфигурация, "Базовая") > 0 Тогда
			Если Строка.ВерсииСсылками.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ИсходноеИмяПрограммы = ПатчиСлужебный.ИсходноеИмяПрограммы(Строка.ВерсииСсылками[0].Значение);
			ИсходноеИмяПрограммы = ПатчиСлужебный.ИмяКонфигурации(ИсходноеИмяПрограммы);
			КлючПоиска = ИсходноеИмяПрограммы + "," + Строка.ИдентификаторКонфигурации;
			Если БазовыеВерсии[КлючПоиска] = Неопределено Тогда
				БазовыеВерсии.Вставить(КлючПоиска, Строка.Включена);
			КонецЕсли;
			
			Если Строка.Включена
				И Не БазовыеВерсии[КлючПоиска] Тогда
				БазовыеВерсии.Вставить(КлючПоиска, Строка.Включена);
			КонецЕсли;
		КонецЕсли;
		
		Если Строка.Включена = Строка.ПоУмолчанию Тогда
			Продолжить; // Применимость не изменена.
		КонецЕсли;
		
		Идентификатор = Строка.ИдентификаторКонфигурации;
		Версии = Строка.ВерсииСсылками.ВыгрузитьЗначения();
		Если Строка.ПоУмолчанию Тогда
			ИзмененияПрименимости.Отключена.Вставить(Идентификатор, Версии);
		Иначе
			ИзмененияПрименимости.Включена.Вставить(Идентификатор, Версии);
		КонецЕсли;
	КонецЦикла;
	
	ДополнительныеПараметры = ПолучитьИзВременногоХранилища(АдресХранилища).Получить();
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	ДополнительныеПараметры.Вставить("ИзмененияПрименимости", ИзмененияПрименимости);
	Шаблон = НСтр("ru = '%1 - Применимость изменена пользователем %2'");
	ЗаписьЛога = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон,
		ТекущаяДатаСеанса(), Пользователи.ТекущийПользователь());
	ДополнительныеПараметры.Лог.Добавить(ЗаписьЛога);
	
	Если ЭтоКонфигурацияБазовая Тогда
		Возврат Истина;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		ПроверитьПатчиБазовыхВерсий(БазовыеВерсии, ДополнительныеПараметры);
		
		НаборЗаписей = РегистрыСведений.ВерсииПатчей.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Патч.Установить(Патч);
		НаборЗаписей.Отбор.Версия.Установить(Версия);
		НаборЗаписей.Отбор.УникальныйИдентификатор.Установить(ИдентификаторПатча);
		НаборЗаписей.Прочитать();
		
		Запись = НаборЗаписей[0];
		Запись.Параметры = Новый ХранилищеЗначения(ДополнительныеПараметры, Новый СжатиеДанных(9));
		НаборЗаписей.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

&НаСервере
Процедура ПроверитьПатчиБазовыхВерсий(БазовыеВерсии, ДополнительныеПараметры)
	ДобавленныеПатчиБазовых = Неопределено;
	Если Не ДополнительныеПараметры.Свойство("ПатчиБазовыхВерсий", ДобавленныеПатчиБазовых) Тогда
		ДобавленныеПатчиБазовых = Новый Массив;
	КонецЕсли;
	
	ИдентификаторыБазовых = Новый Массив;
	Для Каждого БазоваяВерсия Из БазовыеВерсии Цикл
		БазоваяВерсияЧастями = СтрРазделить(БазоваяВерсия.Ключ, ",");
		ИдентификаторыБазовых.Добавить(БазоваяВерсияЧастями[1]);
	КонецЦикла;
	
	НачатьТранзакцию();
	Попытка
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ИдентификаторПрограммы", ИдентификаторыБазовых);
		Запрос.УстановитьПараметр("Патч", Патч);
		Запрос.УстановитьПараметр("Версия", Версия);
		Запрос.УстановитьПараметр("Отозван", Перечисления.СтатусыПатчей.Отозван);
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ВерсииПатчей.Версия КАК Версия,
			|	ВерсииПатчей.Патч КАК Патч,
			|	ВерсииПатчей.УникальныйИдентификатор КАК УникальныйИдентификатор,
			|	Проекты.ИдентификаторПрограммы КАК ИдентификаторПрограммы,
			|	Проекты.ИмяКонфигурации КАК ИмяКонфигурации
			|ИЗ
			|	РегистрСведений.ВерсииПатчей КАК ВерсииПатчей
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Проекты КАК Проекты
			|		ПО ВерсииПатчей.ПодписанДляКонфигурации = Проекты.Ссылка
			|ГДЕ
			|	Проекты.ИдентификаторПрограммы В(&ИдентификаторПрограммы)
			|	И ВерсииПатчей.Патч = &Патч
			|	И ВерсииПатчей.Состояние <> &Отозван
			|	И ВерсииПатчей.Версия = &Версия";
		УстановитьПривилегированныйРежим(Истина);
		Результат = Запрос.Выполнить().Выгрузить();
		УстановитьПривилегированныйРежим(Ложь);
		Для Каждого ПатчБазовой Из Результат Цикл
			КлючПоиска = ПатчиСлужебный.ИмяКонфигурации(ПатчБазовой.ИмяКонфигурации) + "," + ПатчБазовой.ИдентификаторПрограммы;
			Если Не БазовыеВерсии[КлючПоиска] Тогда
				СвойстваПатча = ПатчиСлужебный.ЗначенияСвойствВерсииПатча(ПатчБазовой.УникальныйИдентификатор, "Состояние");
				Если СвойстваПатча.Состояние = Перечисления.СтатусыПатчей.Опубликован
					Или СвойстваПатча.Состояние = Перечисления.СтатусыПатчей.Отозван Тогда
					ВызватьИсключение НСтр("ru = 'Нельзя снять применимость патча с базовой версии конфигурации, т.к. он уже опубликован'");
				КонецЕсли;
				
				// Удалить патч.
				НаборЗаписей = РегистрыСведений.ВерсииПатчей.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Патч.Установить(Патч);
				НаборЗаписей.Отбор.Версия.Установить(Версия);
				НаборЗаписей.Отбор.УникальныйИдентификатор.Установить(ПатчБазовой.УникальныйИдентификатор);
				УстановитьПривилегированныйРежим(Истина);
				НаборЗаписей.Записать();
				УстановитьПривилегированныйРежим(Ложь);
				
				ИндексПатча = ДобавленныеПатчиБазовых.Найти(ПатчБазовой.УникальныйИдентификатор);
				Если ИндексПатча <> Неопределено Тогда
					ДобавленныеПатчиБазовых.Удалить(ИндексПатча);
				КонецЕсли;
			КонецЕсли;
			БазовыеВерсии.Удалить(КлючПоиска);
		КонецЦикла;
		
		Для Каждого БазоваяВерсия Из БазовыеВерсии Цикл
			Если Не БазоваяВерсия.Значение Тогда
				Продолжить;
			КонецЕсли;
			
			УстановитьПривилегированныйРежим(Истина);
			Идентификатор = ДобавленныйПатчБазовойВерсии(БазоваяВерсия.Ключ, ДополнительныеПараметры);
			УстановитьПривилегированныйРежим(Ложь);
			Если Идентификатор <> Неопределено Тогда
				ДобавленныеПатчиБазовых.Добавить(Идентификатор);
			КонецЕсли;
		КонецЦикла;
		
		ДополнительныеПараметры.Вставить("ПатчиБазовыхВерсий", ДобавленныеПатчиБазовых);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция ДобавленныйПатчБазовойВерсии(ИдентификаторБазовой, ДополнительныеПараметры)
	
	ИдентификаторБазовойЧастями = СтрРазделить(ИдентификаторБазовой, ",");
	Строка = ПатчиСлужебный.ЗакрытыйКлючПрограммы(ИдентификаторБазовойЧастями[1], ИдентификаторБазовойЧастями[0]);
	Если Строка = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ВерсииПатчей.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Патч.Установить(Патч);
	НаборЗаписей.Отбор.Версия.Установить(Версия);
	НаборЗаписей.Отбор.УникальныйИдентификатор.Установить(ИдентификаторПатча);
	НаборЗаписей.Прочитать();
	ОсновнойПатч = НаборЗаписей[0];
	
	ПутьКПатчу = ПолучитьИмяВременногоФайла("cfe");
	ДанныеПатча = ОсновнойПатч.ДанныеПатча.Получить();
	ДанныеПатча.Записать(ПутьКПатчу);
	
	Проект       = Строка.Ссылка;
	ЗакрытыйКлюч = Строка.КлючЭлектроннойПодписи;
	
	ИдентификаторНовогоПатча = Новый УникальныйИдентификатор;
	ПараметрыПодписи = Новый Структура;
	ПараметрыПодписи.Вставить("ПутьКПатчу", ПутьКПатчу);
	ПараметрыПодписи.Вставить("ИмяПатча", ПатчиСлужебный.ИмяПатча(Патч, ПатчиСлужебный.НомерПатча(ИдентификаторПатча), Ложь));
	ПараметрыПодписи.Вставить("Версия", Версия);
	ПараметрыПодписи.Вставить("КаталогВременнойБазы", ПолучитьИмяВременногоФайла());
	ПараметрыПодписи.Вставить("УникальныйИдентификатор", ИдентификаторНовогоПатча);
	СоздатьКаталог(ПараметрыПодписи.КаталогВременнойБазы);
	ПодписанныйПатч = ПатчиСлужебный.ПодписанныйПатч(ПараметрыПодписи, Ложь, ЗакрытыйКлюч);
	ДанныеПодписанногоПатча = Новый ДвоичныеДанные(ПодписанныйПатч);
	
	НаборЗаписей = РегистрыСведений.ВерсииПатчей.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Патч.Установить(Патч);
	НаборЗаписей.Отбор.Версия.Установить(Версия);
	НаборЗаписей.Отбор.УникальныйИдентификатор.Установить(ИдентификаторНовогоПатча);
	ВерсияПатча = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(ВерсияПатча, ОсновнойПатч);
	Если ВерсияПатча.Состояние = Перечисления.СтатусыПатчей.Опубликован Тогда
		ВерсияПатча.Состояние = Перечисления.СтатусыПатчей.ОжидаетПубликации;
	КонецЕсли;
	СтарыеПараметры = ВерсияПатча.Параметры.Получить();
	СтарыеПараметры.Вставить("ИзмененияПрименимости");
	Если СтарыеПараметры.Свойство("ПатчиБазовыхВерсий") Тогда
		СтарыеПараметры.Удалить("ПатчиБазовыхВерсий");
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(СтарыеПараметры, ДополнительныеПараметры);
	
	ВерсияПатча.Параметры = Новый ХранилищеЗначения(СтарыеПараметры, Новый СжатиеДанных(9));
	ВерсияПатча.ДанныеПатча = Новый ХранилищеЗначения(ДанныеПодписанногоПатча, Новый СжатиеДанных(9));
	ВерсияПатча.УникальныйИдентификатор = ИдентификаторНовогоПатча;
	ВерсияПатча.ПодписанДляКонфигурации = Проект;
	НаборЗаписей.Записать();
	
	Попытка
		УдалитьФайлы(ПодписанныйПатч);
		УдалитьФайлы(ПутьКПатчу);
		УдалитьФайлы(ПараметрыПодписи.КаталогВременнойБазы);
	Исключение
		// Удаление будет выполнено средствами платформы.
	КонецПопытки;
	
	Возврат ИдентификаторНовогоПатча;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуПрименимости(ИзмененияПрименимостиСохраненные)
	
	СвойстваВерсииПатча = ПатчиСлужебный.ЗначенияСвойствВерсииПатча(ИдентификаторПатча, 
		"ИзменяемыеМетаданные,НачальнаяСборка,КонечнаяСборка,РазделПроекта,
		|РежимСовместимости,КонечнаяСборкаПоХранилищу,ДатаИсправления,УникальныйИдентификатор");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Версия);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Проекты.Библиотека КАК ЭтоБиблиотека,
		|	Проекты.ИмяКонфигурации КАК ИмяКонфигурации
		|ИЗ
		|	Справочник.ВерсииПроекта КАК ВерсииПроекта
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Проекты КАК Проекты
		|		ПО ВерсииПроекта.Владелец = Проекты.Ссылка
		|ГДЕ
		|	ВерсииПроекта.Ссылка = &Ссылка";
	Результат = Запрос.Выполнить().Выгрузить();
	ЭтоБиблиотека = Результат[0].ЭтоБиблиотека;
	ИмяКонфигурации = Результат[0].ИмяКонфигурации;
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("Патч", Патч);
	ПараметрыРасчета.Вставить("Версия", Версия);
	ПараметрыРасчета.Вставить("УникальныйИдентификатор", ИдентификаторПатча);
	ПараметрыРасчета.Вставить("ЭтоБиблиотека", ЭтоБиблиотека);
	ПараметрыРасчета.Вставить("ИзменяемыеМетаданные", СвойстваВерсииПатча.ИзменяемыеМетаданные);
	ПараметрыРасчета.Вставить("НачальнаяСборка", СвойстваВерсииПатча.НачальнаяСборка);
	ПараметрыРасчета.Вставить("КонечнаяСборка", СвойстваВерсииПатча.КонечнаяСборка);
	ПараметрыРасчета.Вставить("РазделПроекта", СвойстваВерсииПатча.РазделПроекта);
	ПараметрыРасчета.Вставить("РежимСовместимости", СвойстваВерсииПатча.РежимСовместимости);
	ПараметрыРасчета.Вставить("КонечнаяСборкаПоХранилищу", СвойстваВерсииПатча.КонечнаяСборкаПоХранилищу);
	ПараметрыРасчета.Вставить("ДатаИсправления", СвойстваВерсииПатча.ДатаИсправления);
	ПараметрыРасчета.Вставить("УникальныйИдентификатор", СвойстваВерсииПатча.УникальныйИдентификатор);
	
	УстановитьПривилегированныйРежим(Истина);
	ИнформацияОПрименимости = ПатчиСлужебный.ПрименимостьПатча(ПараметрыРасчета, Ложь);
	УстановитьПривилегированныйРежим(Ложь);
	ПрименимостьПатча = ИнформацияОПрименимости.ПрименимостьПатча;
	СвязанныеКонфигурации = ИнформацияОПрименимости.СвязанныеКонфигурации;
	
	НеПрименим = ИнформацияОПрименимости.НеПрименим;
	
	ТаблицаПрименимости = РеквизитФормыВЗначение("Применимость");
	Для Каждого Элемент Из ПрименимостьПатча Цикл
		ИмяИдентификаторКонфигурации = СтрРазделить(Элемент.Ключ, ",");
		Включена = ИзмененияПрименимостиСохраненные.Отключена[ИмяИдентификаторКонфигурации[1]] = Неопределено;
		Строка = ТаблицаПрименимости.Добавить();
		Строка.Включена = Включена;
		Строка.Конфигурация = ИмяИдентификаторКонфигурации[0];
		Строка.ИдентификаторКонфигурации = ИмяИдентификаторКонфигурации[1];
		Строка.Версии = СтрСоединить(Элемент.Значение, ",");
		Строка.ПоУмолчанию = Истина;
		Строка.ВерсииСсылками.ЗагрузитьЗначения(Элемент.Значение);
		Если Не Строка.Включена Тогда
			Строка.ИнформацияОПрименимости = НСтр("ru = 'Отключена вручную.'");
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Элемент Из СвязанныеКонфигурации Цикл
		ИмяИдентификаторКонфигурации = СтрРазделить(Элемент.Ключ, ",");
		Включена = ИзмененияПрименимостиСохраненные.Отключена[ИмяИдентификаторКонфигурации[1]] = Неопределено;
		Строка = ТаблицаПрименимости.Добавить();
		Строка.Включена = Включена;
		Строка.Конфигурация = ИмяИдентификаторКонфигурации[0];
		Строка.ИдентификаторКонфигурации = ИмяИдентификаторКонфигурации[1];
		Строка.Версии = СтрСоединить(Элемент.Значение, ",");
		Строка.ПоУмолчанию = Истина;
		Строка.ВерсииСсылками.ЗагрузитьЗначения(Элемент.Значение);
		Если Не Строка.Включена Тогда
			Строка.ИнформацияОПрименимости = НСтр("ru = 'Отключена вручную.'");
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Элемент Из НеПрименим Цикл
		ИмяИдентификаторКонфигурации = СтрРазделить(Элемент.Ключ, ",");
		Включена = ИзмененияПрименимостиСохраненные.Включена[ИмяИдентификаторКонфигурации[1]] <> Неопределено;
		Строка = ТаблицаПрименимости.Добавить();
		Строка.Включена = Включена;
		Строка.Конфигурация = ИмяИдентификаторКонфигурации[0];
		Строка.ИдентификаторКонфигурации = ИмяИдентификаторКонфигурации[1];
		Строка.Версии = СтрСоединить(Элемент.Значение, ",");
		Строка.ПоУмолчанию = Ложь;
		Строка.ВерсииСсылками.ЗагрузитьЗначения(Элемент.Значение);
		Если Не Строка.Включена Тогда
			Расшифровка = ИнформацияОПрименимости.ПричиныНеприменимости[Строка.Конфигурация];
			Строка.ИнформацияОПрименимости = Расшифровка.Описание;
			Строка.ИдентификаторПроблемыПрименимости = Расшифровка.ИдентификаторПричины;
		Иначе
			Расшифровка = ИнформацияОПрименимости.ПричиныНеприменимости[Строка.Конфигурация];
			Текст = НСтр("ru = 'Применимость установлена вручную.
				|Исходная информация:
				|%1'");
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, Расшифровка.Описание);
			
			Строка.ИнформацияОПрименимости = Текст;
			Строка.ИдентификаторПроблемыПрименимости = Расшифровка.ИдентификаторПричины;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаПрименимости.Сортировать("Включена Убыв, Конфигурация");
	ЗначениеВРеквизитФормы(ТаблицаПрименимости, "Применимость");
	
КонецПроцедуры

#КонецОбласти