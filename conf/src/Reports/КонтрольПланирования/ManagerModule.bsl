
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Формирует отчет контроль планирования
//
// Параметры:
//  ПараметрыФормирования  - Структура - см. ПланированиеКлиентСервер.НовыйПараметрыФормированияОтчетаКонтрольПланирования
//
// Возвращаемое значение:
//   Структура  - содержит:
//     * Успешно            - Булево - признак того, что отчет сформирован успешно.
//     * СообщенияОбОшибках - Массив - сообщения об ошибках, формирование отчета завершилось неудачей.
//     * ТабличныйДокумент  - ТабличныйДокумент - сформированный отчет.
//
Функция РезультатФормированияОтчета(ПараметрыФормирования) Экспорт
	
	РезультатФормированияОтчета = Новый Структура;
	РезультатФормированияОтчета.Вставить("Успешно",            Истина);
	РезультатФормированияОтчета.Вставить("СообщенияОбОшибках", Новый Массив);
	РезультатФормированияОтчета.Вставить("ТабличныйДокумент",  Неопределено);
	
	ПроверитьЗаполнениеПараметровФормирования(ПараметрыФормирования, РезультатФормированияОтчета); 
	
	Если Не РезультатФормированияОтчета.Успешно Тогда
		Возврат РезультатФормированияОтчета;
	КонецЕсли;
	
	ДанныеВидаПлана = Справочники.ВидыПланов.ДанныеВидаПлана(ПараметрыФормирования.ПланЗанятости);
	ДанныеПланов    = ТаблицаПланов(ПараметрыФормирования, ДанныеВидаПлана);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаОтчета(ПараметрыФормирования.ВариантГруппировки); 
	УстановитьПараметрыЗапроса(Запрос, ПараметрыФормирования, ДанныеПланов, ДанныеВидаПлана); 
	РезультатЗапроса = Запрос.Выполнить();

	ПодготовленныеДанные  = ПодготовленныеДанныеДляВыводаВОтчет(РезультатЗапроса, ПараметрыФормирования, ДанныеПланов.ТаблицаПланов);
	
	ВывестиДанныеВТабличныйДокумент(РезультатФормированияОтчета, ПодготовленныеДанные, ПараметрыФормирования, ДанныеПланов.ТаблицаПланов);
	
	Возврат РезультатФормированияОтчета;
	
КонецФункции 

// Используется фоновым заданим по формированию отчета.
// Параметры:
//  ПараметрыФормирования  - Структура - см. ПланированиеКлиентСервер.НовыйПараметрыФормированияОтчетаКонтрольПланирования
//  АдресХранилища       - Строка - адрес временного хранилища, в которое будут помещены данный фактически выполненных работ
//
Процедура СформироватьОтчет(ПараметрыФормирования, АдресХранилища) Экспорт
	
	РезультатФормированияОтчета = РезультатФормированияОтчета(ПараметрыФормирования.ПараметрыФормирования);
	
	ПоместитьВоВременноеХранилище(РезультатФормированияОтчета, АдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Маршрутизаторы

Функция ТекстЗапросаОтчета(ВариантГруппировки)
	
	Если ВариантГруппировки = "ОтСотрудников" Тогда
		Возврат ТекстЗапросаГруппировкаОтСотрудников();
	ИначеЕсли ВариантГруппировки = "ОтТехПроектов" Тогда
		Возврат ТекстЗапросаГруппировкаОтТехПроектов();
	КонецЕсли;
	
КонецФункции 

Функция ПодготовленныеДанныеДляВыводаВОтчет(РезультатЗапроса, ПараметрыФормирования, ТаблицаПланов)
	
	Если ПараметрыФормирования.ВариантГруппировки = "ОтСотрудников" Тогда
		Возврат ПодготовленныеДанныеГруппировкаОтСотрудников(РезультатЗапроса, ПараметрыФормирования, ТаблицаПланов);
	ИначеЕсли ПараметрыФормирования.ВариантГруппировки = "ОтТехПроектов" Тогда
		Возврат ПодготовленныеДанныеГруппировкаОтТехПроектов(РезультатЗапроса, ПараметрыФормирования, ТаблицаПланов);
	КонецЕсли;
	
КонецФункции 

Процедура УстановитьПараметрыЗапроса(Запрос, ПараметрыФормирования, ДанныеПланов, ДанныеВидаПлана)
	
	Запрос.УстановитьПараметр("ИдентификаторыОтоображаемыхПланов",        ИдентификаторыОтображаемыхПланов(ДанныеПланов.ТаблицаПланов));
	Запрос.УстановитьПараметр("ПустаяДата",                               Дата(1, 1, 1));
	Запрос.УстановитьПараметр("ТаблицаПланов",                            ДанныеПланов.ТаблицаПланов);
	Запрос.УстановитьПараметр("НачалоПериода",                            ПараметрыФормирования.ПериодОтчета.ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода",                             ПараметрыФормирования.ПериодОтчета.ДатаОкончания);
	Запрос.УстановитьПараметр("ПланЗанятости",                            ПараметрыФормирования.ПланЗанятости);
	Запрос.УстановитьПараметр("ВидРесурса",                               ДанныеПланов.ВидСогласуемогоРесурсаПлановыхРабот);
	
	СтрокаТаблицыПланов = СтрокаТаблицыПлановПоЗначениюКолонки(ДанныеПланов.ТаблицаПланов, "ТипПериода", СловарьТекущийПериодПлана());
	Если СтрокаТаблицыПланов <> Неопределено Тогда
		 Запрос.УстановитьПараметр("НачалоТекущегоПериода", СтрокаТаблицыПланов.НачалоПериода);
	Иначе
		Запрос.УстановитьПараметр("НачалоТекущегоПериода",  Дата(1, 1, 1));
	КонецЕсли;
	
	Если ПараметрыФормирования.ВариантГруппировки = "ОтСотрудников" Тогда
		Запрос.УстановитьПараметр("ВыбранныеСотрудники", ПараметрыФормирования.ОтборПоУчастникам);
	ИначеЕсли ПараметрыФормирования.ВариантГруппировки = "ОтТехПроектов" Тогда
		Запрос.УстановитьПараметр("ВыводимыеТехническиеПроекты", ПараметрыФормирования.ОтборПоТехническимПроектам);
	КонецЕсли;
	
	ПараметрыОтображенияЭтапа  = ПланированиеКлиентСервер.ПараметрыОтображенияЭтапаПланаЗанятости(ДанныеВидаПлана.ПороговоеЗначениеЭтапаПопаданиеВПланЗанятости);
	Запрос.УстановитьПараметр("ПороговоеЗначениеДляЭтапаПоЗапланировано", ПараметрыОтображенияЭтапа.ПороговоеЗначениеДляЭтапаПоЗапланировано);
	Запрос.УстановитьПараметр("ПороговоеЗначениеДляЭтапаПоФакт",          ПараметрыОтображенияЭтапа.ПороговоеЗначениеДляЭтапаПоФакт);
	
КонецПроцедуры
 
Процедура ВывестиДанныеВТабличныйДокумент(РезультатФормированияОтчета, ПодготовленныеДанные, ПараметрыФормирования, ТаблицаПланов)
	
	РезультатФормированияОтчета.ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Если ПараметрыФормирования.ВариантГруппировки = "ОтСотрудников" Тогда
		ВывестиДанныеВТабличныйДокументОтСотрудников(РезультатФормированияОтчета, ПодготовленныеДанные, ПараметрыФормирования, ТаблицаПланов);
	ИначеЕсли ПараметрыФормирования.ВариантГруппировки = "ОтТехПроектов" Тогда
		ВывестиДанныеВТабличныйДокументОтТехПроектов(РезультатФормированияОтчета, ПодготовленныеДанные, ПараметрыФормирования, ТаблицаПланов);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеПараметровФормирования(ПараметрыФормирования, РезультатФормированияОтчета)

	Если ПараметрыФормирования.ВариантГруппировки <> "ОтСотрудников" 
		И ПараметрыФормирования.ВариантГруппировки <> "ОтТехПроектов" Тогда
		
		СообщениеОбОшибке = НовыйСообщениеОбОшибке();
		
		Если Не ПустаяСтрока(ПараметрыФормирования.ВариантГруппировки) Тогда
			СообщениеОбОшибке.ТекстОшибки = СтрШаблон(НСтр("ru = 'В параметры формирования отчета передан некорректный вариант группировки - %1. Допустимый варианты - ""ОтСотрудников"", ""ОтТехПроектов"".'"), 
			                                          ПараметрыФормирования.ВариантГруппировки);
		Иначе
			СообщениеОбОшибке.ТекстОшибки = НСтр("ru = 'В параметры формирования отчета не передан вариант группировки.'")
		КонецЕсли;
		
		РезультатФормированияОтчета.СообщенияОбОшибках.Добавить(СообщениеОбОшибке);
		РезультатФормированияОтчета.Успешно = Ложь;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыФормирования.ПланЗанятости) Тогда
		
		СообщениеОбОшибке = НовыйСообщениеОбОшибке();
		
		СообщениеОбОшибке.ИмяРеквизита = "ПланЗанятости";
		СообщениеОбОшибке.ТекстОшибки = НСтр("ru = 'Не указан план занятости.'");
		РезультатФормированияОтчета.СообщенияОбОшибках.Добавить(СообщениеОбОшибке);
		РезультатФормированияОтчета.Успешно = Ложь;
		
	КонецЕсли;
	
	Если ПараметрыФормирования.ВариантГруппировки = "ОтСотрудников" 
		И (ПараметрыФормирования.ОтборПоУчастникам = Неопределено
		Или ПараметрыФормирования.ОтборПоУчастникам.Количество() = 0) Тогда
		
		СообщениеОбОшибке = НовыйСообщениеОбОшибке();
		
		СообщениеОбОшибке.ТекстОшибки = НСтр("ru = 'Не выбран ни один участник плана для отображения.'");
		РезультатФормированияОтчета.СообщенияОбОшибках.Добавить(СообщениеОбОшибке);
		РезультатФормированияОтчета.Успешно = Ложь;
		
	КонецЕсли;
	
	Если ПараметрыФормирования.ВариантГруппировки = "ОтТехПроектов" 
		И (ПараметрыФормирования.ОтборПоТехническимПроектам = Неопределено
		Или ПараметрыФормирования.ОтборПоТехническимПроектам.Количество() = 0) Тогда
		
		СообщениеОбОшибке = НовыйСообщениеОбОшибке();
		
		СообщениеОбОшибке.ТекстОшибки = НСтр("ru = 'Не выбран ни один технический проект для отображения.'");
		РезультатФормированияОтчета.СообщенияОбОшибках.Добавить(СообщениеОбОшибке);
		РезультатФормированияОтчета.Успешно = Ложь;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыФормирования.ПериодОтчета.ДатаНачала)
		Или Не ЗначениеЗаполнено(ПараметрыФормирования.ПериодОтчета.ДатаОкончания) Тогда
		
		СообщениеОбОшибке = НовыйСообщениеОбОшибке();
		
		СообщениеОбОшибке.ИмяРеквизита = "ПериодОтчета.ДатаНачала";
		СообщениеОбОшибке.ТекстОшибки = НСтр("ru = 'Не задан период формирования отчета.'");
		РезультатФормированияОтчета.СообщенияОбОшибках.Добавить(СообщениеОбОшибке);
		РезультатФормированияОтчета.Успешно = Ложь;
		
	Иначе
		
		Если ПараметрыФормирования.ПериодОтчета.ДатаНачала > ПараметрыФормирования.ПериодОтчета.ДатаОкончания Тогда
			
			СообщениеОбОшибке = НовыйСообщениеОбОшибке();
			
			СообщениеОбОшибке.ИмяРеквизита = "ПериодОтчета.ДатаНачала";
			СообщениеОбОшибке.ТекстОшибки = НСтр("ru = 'Дата начала отчета должна быть меньше даты окончания.'");
			РезультатФормированияОтчета.СообщенияОбОшибках.Добавить(СообщениеОбОшибке);
			РезультатФормированияОтчета.Успешно = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры 

Функция НовыйПодготовленныеДанныеОтчета(ТаблицаПланов)

	ИдентификаторыИменаКолонок     = Новый Соответствие; 
	ИменаКолонокПерерасчетРодители = Новый Массив;
	
	ОписаниеТипаЧисло152 = Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2,ДопустимыйЗнак.Любой));
	ОписаниеТипаЧисло5   = Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(5,0,ДопустимыйЗнак.Неотрицательный));
	
	ДеревоДанных = Новый ДеревоЗначений;
	ДеревоДанных.Колонки.Добавить("СотрудникРабота",               ОписаниеТиповСотрудникРабота());
	ДеревоДанных.Колонки.Добавить("ТехническийПроект",             Новый ОписаниеТипов("СправочникСсылка.ТехническиеПроекты"));
	ДеревоДанных.Колонки.Добавить("Проект",                        Новый ОписаниеТипов("СправочникСсылка.Проекты"));
	ДеревоДанных.Колонки.Добавить("Версия",                        Новый ОписаниеТипов("СправочникСсылка.ВерсииПроекта"));
	ДеревоДанных.Колонки.Добавить("ДатаНачала",                    Новый ОписаниеТипов("Дата"));
	ДеревоДанных.Колонки.Добавить("ДатаОкончания",                 Новый ОписаниеТипов("Дата"));
	ДеревоДанных.Колонки.Добавить("Статус",                        ОписаниеТиповСтатус());
	ДеревоДанных.Колонки.Добавить("Факт",                          ОписаниеТипаЧисло152);
	ДеревоДанных.Колонки.Добавить("ПланЗанятостиМинусФакт",        ОписаниеТипаЧисло152);
	ДеревоДанных.Колонки.Добавить("ОстатокНаТекущийПериод",        ОписаниеТипаЧисло152);
	ДеревоДанных.Колонки.Добавить("Нераспределено",                ОписаниеТипаЧисло152);
	ДеревоДанных.Колонки.Добавить("Резерв",                        ОписаниеТипаЧисло152);
	ДеревоДанных.Колонки.Добавить("ЗапланированоНаНачалоТекущего", ОписаниеТипаЧисло152); 
	
	ИменаКолонокПерерасчетРодители.Добавить("ПланЗанятостиМинусФакт");
	ИменаКолонокПерерасчетРодители.Добавить("ОстатокНаТекущийПериод");
	ИменаКолонокПерерасчетРодители.Добавить("ЗапланированоНаНачалоТекущего");
	ИменаКолонокПерерасчетРодители.Добавить("Нераспределено");
	ИменаКолонокПерерасчетРодители.Добавить("Резерв");
	
	Для Каждого СтрокаТаблицы Из ТаблицаПланов Цикл
		
		ИменаКолонок = НовыйИменаКолонокПериода();
		
		ИменаКолонокПерерасчетРодители.Добавить(ИмяДобавленнойКолонкиПериода(ДеревоДанных, СтрокаТаблицы.ИдентификаторПлана, "ПланЗанятости", ИменаКолонок, ОписаниеТипаЧисло152));
		ИмяДобавленнойКолонкиПериода(ДеревоДанных, СтрокаТаблицы.ИдентификаторПлана, "ПериодКорректен", ИменаКолонок, Новый ОписаниеТипов("Булево")); 
		
		Если СтрокаТаблицы.ТипПериода = СловарьПрошлыйПериодПлана()
			Или СтрокаТаблицы.ТипПериода = СловарьТекущийПериодПлана() Тогда
			
			ИменаКолонокПерерасчетРодители.Добавить(ИмяДобавленнойКолонкиПериода(ДеревоДанных, СтрокаТаблицы.ИдентификаторПлана, "РабочиеПланы", ИменаКолонок, ОписаниеТипаЧисло152));
			ИменаКолонокПерерасчетРодители.Добавить(ИмяДобавленнойКолонкиПериода(ДеревоДанных, СтрокаТаблицы.ИдентификаторПлана, "Факт", ИменаКолонок, ОписаниеТипаЧисло152));
			
		КонецЕсли;
		
		ИменаКолонок.ТипПериода = СтрокаТаблицы.ТипПериода;
		
		ИдентификаторыИменаКолонок.Вставить(СтрокаТаблицы.ИдентификаторПлана, ИменаКолонок);
		
	КонецЦикла;
	
	ДеревоДанных.Колонки.Добавить("ПланЗанятостиНеотображаемыйПериод", ОписаниеТипаЧисло152);
	
	ДанныеОтчета = Новый Структура;
	ДанныеОтчета.Вставить("ДеревоДанных",                   ДеревоДанных);
	ДанныеОтчета.Вставить("ПредставлениеОтбора",            "");
	ДанныеОтчета.Вставить("ИдентификаторыИменаКолонок",     ИдентификаторыИменаКолонок);
	ДанныеОтчета.Вставить("ИменаКолонокПерерасчетРодители", ИменаКолонокПерерасчетРодители);
	
	
	Возврат ДанныеОтчета;
	
КонецФункции

Процедура УстановитьШапкуТаблицыОтчета(Макет, ТаблицаОтчета, ПодготовленныеДанные, ПараметрыФормирования, ТаблицаПланов)

	Область = Макет.ПолучитьОбласть("ШапкаТаблицыПостоянныеКолонки");
	Область.Параметры.ОстатокНаДату = ИмяКолонкиОстатокТекущийПериод(ПодготовленныеДанные, ТаблицаПланов);
	ТаблицаОтчета.Вывести(Область); 
	
	Для Каждого СтрокаТаблицыПланов Из ТаблицаПланов Цикл
		
		ДанныеКолонок =  ПодготовленныеДанные.ИдентификаторыИменаКолонок.Получить(СтрокаТаблицыПланов.ИдентификаторПлана);
		
		Если ДанныеКолонок = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеКолонок.ТипПериода = СловарьТекущийПериодПлана()
			Или ДанныеКолонок.ТипПериода = СловарьПрошлыйПериодПлана() Тогда
			
			Область = Макет.ПолучитьОбласть("ШапкаТаблицыПериодЧетыреКолонки");
			
			Если ДанныеКолонок.ТипПериода = СловарьТекущийПериодПлана() Тогда
				Область.Области.ПредставлениеПериодаЧетыреКолонки.Шрифт = Новый Шрифт(,,Истина);
			КонецЕсли;
			
		Иначе
			
			Область = Макет.ПолучитьОбласть("ШапкаТаблицыПериодОднаКолонка");
			
		КонецЕсли;
		
		Область.Параметры.ПредставлениеПериода = СтрШаблон("%1 - %2", 
		                                                   Формат(СтрокаТаблицыПланов.НачалоПериода, "ДФ=dd.MM.yy"), 
		                                                   Формат(СтрокаТаблицыПланов.КонецПериода, "ДФ=dd.MM.yy"));
		
		ТаблицаОтчета.Присоединить(Область);
		
	КонецЦикла;
	
	ТаблицаОтчета.ФиксацияСверху = 20;
	ТаблицаОтчета.ФиксацияСлева  = 14;
	
КонецПроцедуры

Процедура УстановитьШапкуОтчета(Макет, ТаблицаОтчета, ПараметрыФормирования, ПодготовленныеДанные)
	
	Область = Макет.ПолучитьОбласть("ШапкаОтчета");
	ПараметрыОбластиДанных = ПараметрыОбластиДанныхШапкиОтчета(ПараметрыФормирования, ПодготовленныеДанные);
	ЗаполнитьЗначенияСвойств(Область.Параметры, ПараметрыОбластиДанных);
	ТаблицаОтчета.Вывести(Область);
	
КонецПроцедуры

Процедура УстановитьЛегенду(Макет, ТаблицаОтчета)
	
	Область = Макет.ПолучитьОбласть("ГруппировкаЛегенда");
	ТаблицаОтчета.Вывести(Область);
	ТаблицаОтчета.НачатьГруппуСтрок("Легенда", Ложь);
	
	Область = Макет.ПолучитьОбласть("Легенда");
	ТаблицаОтчета.Вывести(Область);
	
	ТаблицаОтчета.ЗакончитьГруппуСтрок();
	
	Область = Макет.ПолучитьОбласть("ПустаяСтрока");
	ТаблицаОтчета.Вывести(Область);
	
КонецПроцедуры

#КонецОбласти

#Область ОтСотрудников

Функция ТекстЗапросаГруппировкаОтСотрудников()
	
	Возврат "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Планы.ИдентификаторПлана КАК ИдентификаторПлана
	|ПОМЕСТИТЬ ИдентификаторыРабочихПланов
	|ИЗ
	|	РегистрСведений.Планы КАК Планы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыПланов КАК ВидыПланов
	|		ПО Планы.ВидПлана = ВидыПланов.Ссылка
	|ГДЕ
	|	ВидыПланов.ТипПлана = ЗНАЧЕНИЕ(Перечисление.ТипыПланов.Рабочий)
	|	И НЕ ВидыПланов.ПометкаУдаления
	|	И ВидыПланов.РодительскийПлан.Ссылка = &ПланЗанятости
	|	И ВидыПланов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВидовПланов.Действует)
	|	И Планы.НачалоПериода >= &НачалоПериода
	|	И Планы.КонецПериода <= &КонецПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаПланов.ИдентификаторПлана КАК ИдентификаторПлана,
	|	ТаблицаПланов.НачалоПериода КАК ДатаНачала,
	|	ТаблицаПланов.КонецПериода КАК ДатаОкончания,
	|	ТаблицаПланов.Зафиксирован КАК Зафиксирован
	|ПОМЕСТИТЬ ТаблицаПланов
	|ИЗ
	|	&ТаблицаПланов КАК ТаблицаПланов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДатаНачала,
	|	ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаписиПлана.ИдентификаторПлана      КАК ИдентификаторПлана,
	|	ЗаписиПлана.Сотрудник               КАК Сотрудник,
	|	ЗаписиПлана.Работа                  КАК Работа,
	|	ЗаписиПлана.ПланируемыеТрудозатраты КАК ПланируемыеТрудозатраты
	|ПОМЕСТИТЬ СуществующиеЗаписиПлана
	|ИЗ
	|	РегистрСведений.ЗаписиПлана КАК ЗаписиПлана
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПланов КАК ТаблицаПланов
	|		ПО (ТаблицаПланов.ИдентификаторПлана = ЗаписиПлана.ИдентификаторПлана)
	|ГДЕ
	|	ЗаписиПлана.Сотрудник В(&ВыбранныеСотрудники)
	|	И ЗаписиПлана.ТипСтрокиПлана = ЗНАЧЕНИЕ(Перечисление.ТипыСтрокПлана.Работа)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Работа,
	|	ИдентификаторПлана
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиПроцесса.Исполнитель                                       КАК Исполнитель,
	|	ВЫБОР 
	|		КОГДА ЗадачиПроцессаРодители.ЗадачаШаблона = ЗНАЧЕНИЕ(Справочник.ЗадачиШаблонаПроцесса.ПустаяСсылка)
	|			ТОГДА ЗадачиПроцессаРодители.Предмет
	|			ИНАЧЕ ИерархияЗадачПроцесса.Родитель
	|	КОНЕЦ                                                            КАК Родитель,
	|	СУММА(ЕСТЬNULL(ИтогиСогласованияЗадачРесурсов.Запланировано, 0)) КАК Запланировано,
	|	СУММА(ЕСТЬNULL(УчетВремени.Длительность, 0))                     КАК УчетВремениСекунды
	|ПОМЕСТИТЬ ЭтапыСотрудникаЗапланированоУчетВремени
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИерархияЗадачПроцесса КАК ИерархияЗадачПроцесса
	|		ПО ЗадачиПроцесса.Ссылка = ИерархияЗадачПроцесса.ЗадачаПроцесса 
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцессаРодители
	|		ПО ЗадачиПроцессаРодители.Ссылка = ИерархияЗадачПроцесса.Родитель
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТехническиеПроекты КАК ТехническиеПроекты
	|		ПО ЗадачиПроцесса.Предмет = ТехническиеПроекты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИтогиСогласованияЗадачРесурсов КАК ИтогиСогласованияЗадачРесурсов
	|		ПО (ИтогиСогласованияЗадачРесурсов.ЗадачаПроцесса = ЗадачиПроцесса.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УчетВремени КАК УчетВремени
	|		ПО (УчетВремени.Задача = ЗадачиПроцесса.Ссылка)
	|			И (УчетВремени.Пользователь = ЗадачиПроцесса.Исполнитель)
	|			И (УчетВремени.Период < &НачалоТекущегоПериода)
	|ГДЕ
	|	ЗадачиПроцесса.Исполнитель В(&ВыбранныеСотрудники)
	|	И ЗадачиПроцесса.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Запланирована), ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.ПринятаКВыполнению))
	|	И НЕ ЗадачиПроцесса.ПометкаУдаления
	|	И ИерархияЗадачПроцесса.Уровень = 0
	|	И НЕ ТехническиеПроекты.ПометкаУдаления
	|	И ТехническиеПроекты.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыТехническихПроектов.Запланирован), ЗНАЧЕНИЕ(Перечисление.СтатусыТехническихПроектов.Активен))
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР 
	|		КОГДА ЗадачиПроцессаРодители.ЗадачаШаблона = ЗНАЧЕНИЕ(Справочник.ЗадачиШаблонаПроцесса.ПустаяСсылка)
	|			ТОГДА ЗадачиПроцессаРодители.Предмет
	|			ИНАЧЕ ИерархияЗадачПроцесса.Родитель
	|	КОНЕЦ,
	|	ЗадачиПроцесса.Исполнитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭтапыСотрудникаЗапланированоУчетВремени.Исполнитель         КАК Исполнитель,
	|	ЭтапыСотрудникаЗапланированоУчетВремени.Родитель            КАК Родитель,
	|	ЭтапыСотрудникаЗапланированоУчетВремени.Запланировано       КАК Запланировано,
	|	ЭтапыСотрудникаЗапланированоУчетВремени.УчетВремениСекунды  КАК УчетВремениСекунды
	|ПОМЕСТИТЬ ЭтапыСотрудникаДляОтображенияВПланах
	|ИЗ
	|	ЭтапыСотрудникаЗапланированоУчетВремени КАК ЭтапыСотрудникаЗапланированоУчетВремени
	|ГДЕ
	|	ЭтапыСотрудникаЗапланированоУчетВремени.Запланировано > &ПороговоеЗначениеДляЭтапаПоЗапланировано
	|	ИЛИ ЭтапыСотрудникаЗапланированоУчетВремени.УчетВремениСекунды > &ПороговоеЗначениеДляЭтапаПоФакт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	СуществующиеЗаписиПлана.Работа КАК Работа
	|ПОМЕСТИТЬ ОтображаемыеРаботы
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЭтапыСотрудникаДляОтображенияВПланах.Родитель
	|ИЗ
	|	ЭтапыСотрудникаДляОтображенияВПланах КАК ЭтапыСотрудникаДляОтображенияВПланах
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СуществующиеЗаписиПлана.Сотрудник КАК Сотрудник,
	|	СуществующиеЗаписиПлана.Работа    КАК Работа
	|ПОМЕСТИТЬ СотрудникиВидыДеятельности
	|ИЗ
	|	СуществующиеЗаписиПлана КАК СуществующиеЗаписиПлана
	|ГДЕ
	|	СуществующиеЗаписиПлана.Работа ССЫЛКА Справочник.ВидыДеятельности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.ПланируемыеТрудозатраты КАК ПланируемыеТрудозатраты,
	|	ВложенныйЗапрос.Сотрудник               КАК Сотрудник,
	|	ВложенныйЗапрос.Работа                  КАК Работа,
	|	ВложенныйЗапрос.ИдентификаторПлана      КАК ИдентификаторПлана
	|ПОМЕСТИТЬ ДанныеВыводимыхРабот
	|ИЗ
	|	(ВЫБРАТЬ
	|		СуществующиеЗаписиПлана.ПланируемыеТрудозатраты КАК ПланируемыеТрудозатраты,
	|		СуществующиеЗаписиПлана.Сотрудник               КАК Сотрудник,
	|		СуществующиеЗаписиПлана.Работа                  КАК Работа,
	|		СуществующиеЗаписиПлана.ИдентификаторПлана      КАК ИдентификаторПлана
	|	ИЗ
	|		СуществующиеЗаписиПлана КАК СуществующиеЗаписиПлана
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		0,
	|		ЭтапыСотрудникаДляОтображенияВПланах.Исполнитель,
	|		ЭтапыСотрудникаДляОтображенияВПланах.Родитель,
	|		0
	|	ИЗ
	|		ЭтапыСотрудникаДляОтображенияВПланах КАК ЭтапыСотрудникаДляОтображенияВПланах) КАК ВложенныйЗапрос
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Работа,
	|	ИдентификаторПлана
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОтображаемыеРаботы.Работа                  КАК Работа,
	|	ЗаписиПлана.Сотрудник                      КАК Сотрудник,
	|	СУММА(ЗаписиПлана.ПланируемыеТрудозатраты) КАК ПланируемыеТрудозатраты
	|ПОМЕСТИТЬ ЗапланированоПланыЗанятостиПрошлыеПериоды
	|ИЗ
	|	ОтображаемыеРаботы КАК ОтображаемыеРаботы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаписиПлана КАК ЗаписиПлана
	|		ПО ОтображаемыеРаботы.Работа = ЗаписиПлана.Работа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Планы КАК Планы
	|		ПО ЗаписиПлана.ИдентификаторПлана = Планы.ИдентификаторПлана
	|			И (Планы.ВидПлана = &ПланЗанятости)
	|			И (Планы.КонецПериода < &НачалоТекущегоПериода) И (Планы.НачалоПериода >= &НачалоПериода)
	|			И (ЗаписиПлана.ТипСтрокиПлана = ЗНАЧЕНИЕ(Перечисление.ТипыСтрокПлана.Работа))
	|ГДЕ
	|	ЗаписиПлана.Сотрудник В(&ВыбранныеСотрудники)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтображаемыеРаботы.Работа,
	|	ЗаписиПлана.Сотрудник
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЗаписиПлана.ПланируемыеТрудозатраты) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиПроцесса.Ссылка  КАК ЭтапНеПоШаблону,
	|	ЗадачиПроцесса.Предмет КАК ТехПроект
	|ПОМЕСТИТЬ ЭтапыНеПоШаблону
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса 
	|ГДЕ
	|	ЗадачиПроцесса.ЗадачаШаблона = ЗНАЧЕНИЕ(Справочник.ЗадачиШаблонаПроцесса.ПустаяСсылка)
	|	И ЗадачиПроцесса.Родитель = ЗНАЧЕНИЕ(Справочник.ЗадачиПроцесса.ПустаяСсылка)
	|	И ЗадачиПроцесса.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Запланирована), ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.ПринятаКВыполнению))
	|	И ЗадачиПроцесса.Предмет В
	|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ДанныеВыводимыхРабот.Работа КАК Работа
	|		ИЗ
	|			ДанныеВыводимыхРабот КАК ДанныеВыводимыхРабот)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИерархияЗадачПроцесса.ЗадачаПроцесса КАК ЗадачаПроцесса,
	|	ИерархияЗадачПроцесса.Родитель       КАК Родитель
	|ПОМЕСТИТЬ ДочерниеЗадачиРабот
	|ИЗ
	|	РегистрСведений.ИерархияЗадачПроцесса КАК ИерархияЗадачПроцесса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтображаемыеРаботы КАК ОтображаемыеРаботы
	|		ПО (ОтображаемыеРаботы.Работа = ИерархияЗадачПроцесса.Родитель)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИерархияЗадачПроцесса.ЗадачаПроцесса КАК ЗадачаПроцесса,
	|	ЭтапыНеПоШаблону.ТехПроект           КАК Родитель
	|ИЗ
	|	РегистрСведений.ИерархияЗадачПроцесса КАК ИерархияЗадачПроцесса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЭтапыНеПоШаблону КАК ЭтапыНеПоШаблону
	|		ПО (ЭтапыНеПоШаблону.ЭтапНеПоШаблону = ИерархияЗадачПроцесса.Родитель)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(УчетВремени.Длительность)  КАК Длительность,
	|	ДанныеВыводимыхРабот.Сотрудник   КАК Сотрудник,
	|	ДанныеВыводимыхРабот.Работа      КАК Работа,
	|	ТаблицаПланов.ИдентификаторПлана КАК ИдентификаторПлана
	|ПОМЕСТИТЬ ЗатраченноеВремяВидыДеятельности
	|ИЗ
	|	ДанныеВыводимыхРабот КАК ДанныеВыводимыхРабот
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.УчетВремени КАК УчетВремени
	|		ПО ДанныеВыводимыхРабот.Сотрудник = УчетВремени.Пользователь
	|			И ДанныеВыводимыхРабот.Работа = УчетВремени.ВидДеятельности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПланов КАК ТаблицаПланов
	|		ПО (УчетВремени.Период >= НАЧАЛОПЕРИОДА(ТаблицаПланов.ДатаНачала, ДЕНЬ))
	|			И (УчетВремени.Период <= КОНЕЦПЕРИОДА(ТаблицаПланов.ДатаОкончания, ДЕНЬ))
	|ГДЕ
	|	ТаблицаПланов.ИдентификаторПлана = ДанныеВыводимыхРабот.ИдентификаторПлана
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеВыводимыхРабот.Работа,
	|	ДанныеВыводимыхРабот.Сотрудник,
	|	ТаблицаПланов.ИдентификаторПлана
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Работа,
	|	ИдентификаторПлана
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(УчетВремени.Длительность)  КАК Длительность,
	|	УчетВремени.Пользователь         КАК Сотрудник,
	|	ТаблицаПланов.ИдентификаторПлана КАК ИдентификаторПлана,
	|	ДочерниеЗадачиРабот.Родитель     КАК Работа
	|ПОМЕСТИТЬ ЗатраченноеВремяЗадачи
	|ИЗ
	|	ДочерниеЗадачиРабот КАК ДочерниеЗадачиРабот
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.УчетВремени КАК УчетВремени
	|		ПО (УчетВремени.Задача = ДочерниеЗадачиРабот.ЗадачаПроцесса)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПланов КАК ТаблицаПланов
	|		ПО (УчетВремени.Период >= НАЧАЛОПЕРИОДА(ТаблицаПланов.ДатаНачала, ДЕНЬ))
	|			И (УчетВремени.Период <= КОНЕЦПЕРИОДА(ТаблицаПланов.ДатаОкончания, ДЕНЬ))
	|ГДЕ
	|	УчетВремени.Пользователь В(&ВыбранныеСотрудники)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДочерниеЗадачиРабот.Родитель,
	|	УчетВремени.Пользователь,
	|	ТаблицаПланов.ИдентификаторПлана
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Работа,
	|	ИдентификаторПлана
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДочерниеЗадачиРабот.Родитель               КАК Работа,
	|	ЗаписиПлана.Сотрудник                      КАК Сотрудник,
	|	СУММА(ЗаписиПлана.ПланируемыеТрудозатраты) КАК ПланируемыеТрудозатраты,
	|	ТаблицаПланов.ИдентификаторПлана           КАК ИдентификаторПлана
	|ПОМЕСТИТЬ ДанныеРабочихПлановЭтапы
	|ИЗ
	|	ДочерниеЗадачиРабот КАК ДочерниеЗадачиРабот
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаписиПлана КАК ЗаписиПлана
	|		ПО ДочерниеЗадачиРабот.ЗадачаПроцесса = ЗаписиПлана.Работа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Планы КАК Планы
	|		ПО (ЗаписиПлана.ИдентификаторПлана = Планы.ИдентификаторПлана)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПланов КАК ТаблицаПланов
	|		ПО (Планы.НачалоПериода = ТаблицаПланов.ДатаНачала)
	|ГДЕ
	|	ЗаписиПлана.ИдентификаторПлана В
	|			(ВЫБРАТЬ
	|				ИдентификаторыРабочихПланов.ИдентификаторПлана КАК ИдентификаторПлана
	|			ИЗ
	|				ИдентификаторыРабочихПланов КАК ИдентификаторыРабочихПланов)
	|	И ЗаписиПлана.Сотрудник В(&ВыбранныеСотрудники)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДочерниеЗадачиРабот.Родитель,
	|	ЗаписиПлана.Сотрудник,
	|	ТаблицаПланов.ИдентификаторПлана
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Работа,
	|	ИдентификаторПлана
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВидыДеятельности.Ссылка КАК Работа,
	|	ЗаписиПлана.Сотрудник КАК Сотрудник,
	|	ЗаписиПлана.ПланируемыеТрудозатраты КАК ПланируемыеТрудозатраты,
	|	ТаблицаПланов.ИдентификаторПлана КАК ИдентификаторПлана
	|ПОМЕСТИТЬ ДанныеРабочихПлановВидыДеятельности
	|ИЗ
	|	Справочник.ВидыДеятельности КАК ВидыДеятельности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаписиПлана КАК ЗаписиПлана
	|		ПО ВидыДеятельности.Ссылка = ЗаписиПлана.Работа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Планы КАК Планы
	|		ПО (ЗаписиПлана.ИдентификаторПлана = Планы.ИдентификаторПлана)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПланов КАК ТаблицаПланов
	|		ПО (Планы.НачалоПериода = ТаблицаПланов.ДатаНачала)
	|ГДЕ
	|	ЗаписиПлана.ИдентификаторПлана В
	|			(ВЫБРАТЬ
	|				ИдентификаторыРабочихПланов.ИдентификаторПлана КАК ИдентификаторПлана
	|			ИЗ
	|				ИдентификаторыРабочихПланов КАК ИдентификаторыРабочихПланов)
	|	И ЗаписиПлана.Сотрудник В(&ВыбранныеСотрудники)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Работа,
	|	ИдентификаторПлана
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаписиПлана.Сотрудник                      КАК Сотрудник,
	|	ЗаписиПлана.Работа                         КАК Работа,
	|	СУММА(ЗаписиПлана.ПланируемыеТрудозатраты) КАК ПланируемыеТрудозатраты
	|ПОМЕСТИТЬ ЗаписиПлановЗанятостиНеотображаемыхПеридов
	|ИЗ
	|	РегистрСведений.ЗаписиПлана КАК ЗаписиПлана
	|ГДЕ
	|	ЗаписиПлана.Сотрудник В(&ВыбранныеСотрудники)
	|	И ЗаписиПлана.ТипСтрокиПлана = ЗНАЧЕНИЕ(Перечисление.ТипыСтрокПлана.Работа)
	|	И ЗаписиПлана.ИдентификаторПлана В
	|			(ВЫБРАТЬ
	|				Планы.ИдентификаторПлана КАК ИдентификаторПлана
	|			ИЗ
	|				РегистрСведений.Планы КАК Планы
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыПланов КАК ВидыПланов
	|					ПО
	|						Планы.ВидПлана = ВидыПланов.Ссылка
	|			ГДЕ
	|				ВидыПланов.Ссылка = &ПланЗанятости
	|				И Планы.НачалоПериода >= &КонецПериода)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаписиПлана.Сотрудник,
	|	ЗаписиПлана.Работа
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Работа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДочерниеЗадачиРабот.Родитель                 КАК Этап,
	|	ДочерниеЗадачиРабот.ЗадачаПроцесса           КАК ЗадачаПроцесса,
	|	УчетВремени.Пользователь                     КАК Исполнитель,
	|	СУММА(ЕСТЬNULL(УчетВремени.Длительность, 0)) КАК ФактСекундыДоТекущегоПериода,
	|	СУММА(ВЫБОР 
	|		КОГДА (УчетВремени.Период < &НачалоТекущегоПериода)
	|			ТОГДА ЕСТЬNULL(УчетВремени.Длительность, 0) 
	|			ИНАЧЕ 0 
	|	КОНЕЦ)                                       КАК ФактСекундыНачалоОтчетаНачалоТекущегоПериода
	|ПОМЕСТИТЬ ФактЗадачиНачалоТекущегоПериода
	|ИЗ
	|	ДочерниеЗадачиРабот КАК ДочерниеЗадачиРабот
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО ДочерниеЗадачиРабот.ЗадачаПроцесса = ЗадачиПроцесса.Ссылка
	|			И (ВЫБОР
	|				КОГДА ЗадачиПроцесса.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Выполнена)
	|					ТОГДА ВЫБОР
	|							КОГДА ЗадачиПроцесса.ФактическаяДатаОкончания < &НачалоТекущегоПериода
	|								ТОГДА ЛОЖЬ
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.УчетВремени КАК УчетВремени
	|		ПО ДочерниеЗадачиРабот.ЗадачаПроцесса = УчетВремени.Задача
	|			И (УчетВремени.Период < &НачалоТекущегоПериода)
	//	|			И УчетВремени.Пользователь В(&ВыбранныеСотрудники)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДочерниеЗадачиРабот.Родитель,
	|	ДочерниеЗадачиРабот.ЗадачаПроцесса,
	|	УчетВремени.Пользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(УчетВремени.Длительность)      КАК Длительность,
	|	СотрудникиВидыДеятельности.Сотрудник КАК Сотрудник,
	|	СотрудникиВидыДеятельности.Работа    КАК Работа
	|ПОМЕСТИТЬ ВидыДеятельностиПрошлыеПериоды
	|ИЗ
	|	СотрудникиВидыДеятельности КАК СотрудникиВидыДеятельности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.УчетВремени КАК УчетВремени
	|		ПО СотрудникиВидыДеятельности.Сотрудник = УчетВремени.Пользователь
	|			И СотрудникиВидыДеятельности.Работа = УчетВремени.ВидДеятельности
	|			И (УчетВремени.Период < &НачалоТекущегоПериода) И (УчетВремени.Период >= &НачалоПериода)
	|			И УчетВремени.Пользователь В(&ВыбранныеСотрудники)
	|
	|СГРУППИРОВАТЬ ПО 
	|	СотрудникиВидыДеятельности.Сотрудник,
	|	СотрудникиВидыДеятельности.Работа
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Работа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	| 
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Этап                                                КАК Этап,
	|	ВложенныйЗапрос.Исполнитель                                         КАК Исполнитель,
	|	СУММА(ВложенныйЗапрос.ФактСекундыНачалоОтчетаНачалоТекущегоПериода) КАК ФактСекундыНачалоОтчетаНачалоТекущегоПериода
	|ПОМЕСТИТЬ ФактЭтапыНачалоТекущегоПериода
	|ИЗ
	|(ВЫБРАТЬ 
	|	ФактЗадачиНачалоТекущегоПериода.Этап                                                КАК Этап,
	|	ФактЗадачиНачалоТекущегоПериода.Исполнитель                                         КАК Исполнитель,
	|	ФактЗадачиНачалоТекущегоПериода.ФактСекундыНачалоОтчетаНачалоТекущегоПериода        КАК ФактСекундыНачалоОтчетаНачалоТекущегоПериода
	|ИЗ
	|	ФактЗадачиНачалоТекущегоПериода КАК ФактЗадачиНачалоТекущегоПериода
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВидыДеятельностиПрошлыеПериоды.Работа       КАК Этап,
	|	ВидыДеятельностиПрошлыеПериоды.Сотрудник    КАК Исполнитель,
	|	ВидыДеятельностиПрошлыеПериоды.Длительность КАК ФактСекундыНачалоОтчетаНачалоТекущегоПериода
	|ИЗ
	|	ВидыДеятельностиПрошлыеПериоды КАК ВидыДеятельностиПрошлыеПериоды) КАК ВложенныйЗапрос
 	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Этап,
	|	ВложенныйЗапрос.Исполнитель
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Исполнитель,
	|	Этап
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДочерниеЗадачиРабот.Родитель КАК Этап,
	|	ДочерниеЗадачиРабот.ЗадачаПроцесса КАК ЗадачаПроцесса,
	|	ЗадачиПроцесса.Исполнитель КАК Исполнитель,
	|	ЕСТЬNULL(ИтогиСогласованияЗадачРесурсов.Запланировано, 0) КАК Запланировано
	|ПОМЕСТИТЬ ОстатокЗапланированоНачалоТекущегоПериода
	|ИЗ
	|	ДочерниеЗадачиРабот КАК ДочерниеЗадачиРабот
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО ДочерниеЗадачиРабот.ЗадачаПроцесса = ЗадачиПроцесса.Ссылка
	|			И (ВЫБОР
	|				КОГДА ЗадачиПроцесса.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Выполнена)
	|					ТОГДА ВЫБОР
	|							КОГДА ЗадачиПроцесса.ФактическаяДатаОкончания < &НачалоТекущегоПериода
	|								ТОГДА ЛОЖЬ
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИтогиСогласованияЗадачРесурсов КАК ИтогиСогласованияЗадачРесурсов
	|		ПО ДочерниеЗадачиРабот.ЗадачаПроцесса = ИтогиСогласованияЗадачРесурсов.ЗадачаПроцесса
	|			И (ИтогиСогласованияЗадачРесурсов.ВидРесурса = &ВидРесурса)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстатокЗапланированоНачалоТекущегоПериода.Этап        КАК Этап,
	|	ОстатокЗапланированоНачалоТекущегоПериода.Исполнитель КАК Исполнитель,
	|	СУММА(ВЫБОР
	|			КОГДА ОстатокЗапланированоНачалоТекущегоПериода.Запланировано * 3600 > ЕстьNULL(ФактЗадачиНачалоТекущегоПериода.ФактСекундыДоТекущегоПериода, 0)
	|				ТОГДА ОстатокЗапланированоНачалоТекущегоПериода.Запланировано * 3600 - ЕстьNULL(ФактЗадачиНачалоТекущегоПериода.ФактСекундыДоТекущегоПериода, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Остаток
	|
	|ПОМЕСТИТЬ ОстатокФактНачалоТекущегоПериода
	|ИЗ
	|	ОстатокЗапланированоНачалоТекущегоПериода КАК ОстатокЗапланированоНачалоТекущегоПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ФактЗадачиНачалоТекущегоПериода КАК ФактЗадачиНачалоТекущегоПериода
	|		ПО ОстатокЗапланированоНачалоТекущегоПериода.Этап = ФактЗадачиНачалоТекущегоПериода.Этап
	|			И ОстатокЗапланированоНачалоТекущегоПериода.Исполнитель = ФактЗадачиНачалоТекущегоПериода.Исполнитель
	|			И ОстатокЗапланированоНачалоТекущегоПериода.ЗадачаПроцесса = ФактЗадачиНачалоТекущегоПериода.ЗадачаПроцесса 
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстатокЗапланированоНачалоТекущегоПериода.Исполнитель,
	|	ОстатокЗапланированоНачалоТекущегоПериода.Этап
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Исполнитель,
	|	Этап
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДочерниеЗадачиРабот.Родитель КАК Этап,
	|	ЗадачиПроцесса.Исполнитель КАК Исполнитель,
	|	СУММА(ЕСТЬNULL(УчетВремени.Длительность, 0)) КАК ФактСекундыДоТекущегоПериода
	|ПОМЕСТИТЬ ФактЗадачиПредыдущиеПериоды
	|ИЗ
	|	ДочерниеЗадачиРабот КАК ДочерниеЗадачиРабот
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО ДочерниеЗадачиРабот.ЗадачаПроцесса = ЗадачиПроцесса.Ссылка
	|			И (ЗадачиПроцесса.Исполнитель В (&ВыбранныеСотрудники))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УчетВремени КАК УчетВремени
	|		ПО ДочерниеЗадачиРабот.ЗадачаПроцесса = УчетВремени.Задача
	|			И (УчетВремени.Период < &НачалоТекущегоПериода)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДочерниеЗадачиРабот.Родитель,
	|	ЗадачиПроцесса.Исполнитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеВыводимыхРабот.ПланируемыеТрудозатраты КАК ПланируемыеТрудозатратыПланЗанятости,
	|	ДанныеВыводимыхРабот.Сотрудник КАК Сотрудник,
	|	ДанныеВыводимыхРабот.Работа КАК Работа,
	|	ДанныеВыводимыхРабот.ИдентификаторПлана КАК ИдентификаторПлана,
	|	ЕСТЬNULL(ЗатраченноеВремяЗадачи.Длительность, 0) КАК ФактическиеТрудозатратыСекунды
	|ПОМЕСТИТЬ ВыводимыеРаботыЗатраченноеВремяЭтапы
	|ИЗ
	|	ДанныеВыводимыхРабот КАК ДанныеВыводимыхРабот
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗатраченноеВремяЗадачи КАК ЗатраченноеВремяЗадачи
	|		ПО ДанныеВыводимыхРабот.Сотрудник = ЗатраченноеВремяЗадачи.Сотрудник
	|			И ДанныеВыводимыхРабот.Работа = ЗатраченноеВремяЗадачи.Работа
	|			И ДанныеВыводимыхРабот.ИдентификаторПлана = ЗатраченноеВремяЗадачи.ИдентификаторПлана
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	ЗатраченноеВремяЗадачи.Сотрудник,
	|	ЗатраченноеВремяЗадачи.Работа,
	|	ЗатраченноеВремяЗадачи.ИдентификаторПлана,
	|	ЗатраченноеВремяЗадачи.Длительность
	|ИЗ
	|	ЗатраченноеВремяЗадачи КАК ЗатраченноеВремяЗадачи
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеВыводимыхРабот КАК ДанныеВыводимыхРабот
	|		ПО ЗатраченноеВремяЗадачи.Сотрудник = ДанныеВыводимыхРабот.Сотрудник
	|			И ЗатраченноеВремяЗадачи.Работа = ДанныеВыводимыхРабот.Работа
	|			И ЗатраченноеВремяЗадачи.ИдентификаторПлана = ДанныеВыводимыхРабот.ИдентификаторПлана
	|ГДЕ
	|	ДанныеВыводимыхРабот.ИдентификаторПлана ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Работа,
	|	ИдентификаторПлана
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВыводимыеРаботыЗатраченноеВремяЭтапы.ПланируемыеТрудозатратыПланЗанятости                                                    КАК ПланируемыеТрудозатратыПланЗанятости,
	|	ВыводимыеРаботыЗатраченноеВремяЭтапы.Сотрудник                                                                               КАК Сотрудник,
	|	ВыводимыеРаботыЗатраченноеВремяЭтапы.Работа                                                                                  КАК Работа,
	|	ВыводимыеРаботыЗатраченноеВремяЭтапы.ИдентификаторПлана                                                                      КАК ИдентификаторПлана,
	|	ЕСТЬNULL(ЗатраченноеВремяВидыДеятельности.Длительность, ВыводимыеРаботыЗатраченноеВремяЭтапы.ФактическиеТрудозатратыСекунды) КАК ФактическиеТрудозатратыСекунды
	|ПОМЕСТИТЬ ВыводимыеРаботыЗатраченноеВремяВсеРаботы
	|ИЗ
	|	ВыводимыеРаботыЗатраченноеВремяЭтапы КАК ВыводимыеРаботыЗатраченноеВремяЭтапы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗатраченноеВремяВидыДеятельности КАК ЗатраченноеВремяВидыДеятельности
	|		ПО ВыводимыеРаботыЗатраченноеВремяЭтапы.Сотрудник = ЗатраченноеВремяВидыДеятельности.Сотрудник
	|			И ВыводимыеРаботыЗатраченноеВремяЭтапы.Работа = ЗатраченноеВремяВидыДеятельности.Работа
	|			И ВыводимыеРаботыЗатраченноеВремяЭтапы.ИдентификаторПлана = ЗатраченноеВремяВидыДеятельности.ИдентификаторПлана
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Работа,
	|	ИдентификаторПлана
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВыводимыеРаботыЗатраченноеВремяВсеРаботы.ПланируемыеТрудозатратыПланЗанятости КАК ПланируемыеТрудозатратыПланЗанятости,
	|	ВыводимыеРаботыЗатраченноеВремяВсеРаботы.Сотрудник КАК Сотрудник,
	|	ВыводимыеРаботыЗатраченноеВремяВсеРаботы.Работа КАК Работа,
	|	ВыводимыеРаботыЗатраченноеВремяВсеРаботы.ИдентификаторПлана КАК ИдентификаторПлана,
	|	ВыводимыеРаботыЗатраченноеВремяВсеРаботы.ФактическиеТрудозатратыСекунды КАК ФактическиеТрудозатратыСекунды,
	|	ЕСТЬNULL(ДанныеРабочихПлановЭтапы.ПланируемыеТрудозатраты, 0) КАК ПланируемыеТрудозатратыРабочиеПланы
	|ПОМЕСТИТЬ ВыводимыеРаботыЗатраченноеВремяРабочиеПланыЭтапы
	|ИЗ
	|	ВыводимыеРаботыЗатраченноеВремяВсеРаботы КАК ВыводимыеРаботыЗатраченноеВремяВсеРаботы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеРабочихПлановЭтапы КАК ДанныеРабочихПлановЭтапы
	|		ПО ВыводимыеРаботыЗатраченноеВремяВсеРаботы.Сотрудник = ДанныеРабочихПлановЭтапы.Сотрудник
	|			И ВыводимыеРаботыЗатраченноеВремяВсеРаботы.Работа = ДанныеРабочихПлановЭтапы.Работа
	|			И ВыводимыеРаботыЗатраченноеВремяВсеРаботы.ИдентификаторПлана = ДанныеРабочихПлановЭтапы.ИдентификаторПлана
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	ДанныеРабочихПлановЭтапы.Сотрудник,
	|	ДанныеРабочихПлановЭтапы.Работа,
	|	ДанныеРабочихПлановЭтапы.ИдентификаторПлана,
	|	0,
	|	ДанныеРабочихПлановЭтапы.ПланируемыеТрудозатраты
	|ИЗ
	|	ДанныеРабочихПлановЭтапы КАК ДанныеРабочихПлановЭтапы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВыводимыеРаботыЗатраченноеВремяВсеРаботы КАК ВыводимыеРаботыЗатраченноеВремяВсеРаботы
	|		ПО ДанныеРабочихПлановЭтапы.Сотрудник = ВыводимыеРаботыЗатраченноеВремяВсеРаботы.Сотрудник
	|			И ДанныеРабочихПлановЭтапы.Работа = ВыводимыеРаботыЗатраченноеВремяВсеРаботы.Работа
	|			И ДанныеРабочихПлановЭтапы.ИдентификаторПлана = ВыводимыеРаботыЗатраченноеВремяВсеРаботы.ИдентификаторПлана
	|ГДЕ
	|	ВыводимыеРаботыЗатраченноеВремяВсеРаботы.ИдентификаторПлана ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Работа,
	|	ИдентификаторПлана
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВыводимыеРаботыЗатраченноеВремяРабочиеПланыЭтапы.ПланируемыеТрудозатратыПланЗанятости КАК ПланируемыеТрудозатратыПланЗанятости,
	|	ВыводимыеРаботыЗатраченноеВремяРабочиеПланыЭтапы.Сотрудник                            КАК Сотрудник,
	|	ВыводимыеРаботыЗатраченноеВремяРабочиеПланыЭтапы.Работа                               КАК Работа,
	|	ВыводимыеРаботыЗатраченноеВремяРабочиеПланыЭтапы.ИдентификаторПлана                   КАК ИдентификаторПлана,
	|	ВыводимыеРаботыЗатраченноеВремяРабочиеПланыЭтапы.ФактическиеТрудозатратыСекунды       КАК ФактическиеТрудозатратыСекунды,
	|	ЕСТЬNULL(ДанныеРабочихПлановВидыДеятельности.ПланируемыеТрудозатраты, ВыводимыеРаботыЗатраченноеВремяРабочиеПланыЭтапы.ПланируемыеТрудозатратыРабочиеПланы) КАК ПланируемыеТрудозатратыРабочиеПланы
	|ПОМЕСТИТЬ ВыводимыеРаботыЗатраченноеВремяРабочиеПланы
	|ИЗ
	|	ВыводимыеРаботыЗатраченноеВремяРабочиеПланыЭтапы КАК ВыводимыеРаботыЗатраченноеВремяРабочиеПланыЭтапы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеРабочихПлановВидыДеятельности КАК ДанныеРабочихПлановВидыДеятельности
	|		ПО ВыводимыеРаботыЗатраченноеВремяРабочиеПланыЭтапы.Сотрудник = ДанныеРабочихПлановВидыДеятельности.Сотрудник
	|			И ВыводимыеРаботыЗатраченноеВремяРабочиеПланыЭтапы.Работа = ДанныеРабочихПлановВидыДеятельности.Работа
	|			И ВыводимыеРаботыЗатраченноеВремяРабочиеПланыЭтапы.ИдентификаторПлана = ДанныеРабочихПлановВидыДеятельности.ИдентификаторПлана
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Работа,
	|	ИдентификаторПлана
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВыводимыеРаботыЗатраченноеВремяРабочиеПланы.Сотрудник                             КАК Сотрудник,
	|	ВыводимыеРаботыЗатраченноеВремяРабочиеПланы.Работа                                КАК Работа,
	|	ВыводимыеРаботыЗатраченноеВремяРабочиеПланы.ИдентификаторПлана                    КАК ИдентификаторПлана,
	|	ВыводимыеРаботыЗатраченноеВремяРабочиеПланы.ПланируемыеТрудозатратыПланЗанятости  КАК ПланируемыеТрудозатратыПланЗанятости,
	|	ВыводимыеРаботыЗатраченноеВремяРабочиеПланы.ФактическиеТрудозатратыСекунды        КАК ФактическиеТрудозатратыСекунды,
	|	ВыводимыеРаботыЗатраченноеВремяРабочиеПланы.ПланируемыеТрудозатратыРабочиеПланы   КАК ПланируемыеТрудозатратыРабочиеПланы,
	|	ЕСТЬNULL(ЗаписиПлановЗанятостиНеотображаемыхПеридов.ПланируемыеТрудозатраты, 0)   КАК ПланируемыеТрудозатратыНеотображаемыхПериодов,
	|	ЕСТЬNULL(ОстатокФактНачалоТекущегоПериода.Остаток, 0)                             КАК ЗапланированоНаНачалоТекущего,
	|	ЕСТЬNULL(ЗапланированоПланыЗанятостиПрошлыеПериоды.ПланируемыеТрудозатраты, 0) * 3600 - ЕСТЬNULL(ФактЭтапыНачалоТекущегоПериода.ФактСекундыНачалоОтчетаНачалоТекущегоПериода, 0) КАК ПланЗанятостиМинусФактСекунды
	|ПОМЕСТИТЬ ВыводимыеРаботыПослеОпределенияТрудозатрат
	|ИЗ
	|	ВыводимыеРаботыЗатраченноеВремяРабочиеПланы КАК ВыводимыеРаботыЗатраченноеВремяРабочиеПланы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаписиПлановЗанятостиНеотображаемыхПеридов КАК ЗаписиПлановЗанятостиНеотображаемыхПеридов
	|		ПО ВыводимыеРаботыЗатраченноеВремяРабочиеПланы.Сотрудник = ЗаписиПлановЗанятостиНеотображаемыхПеридов.Сотрудник
	|			И ВыводимыеРаботыЗатраченноеВремяРабочиеПланы.Работа = ЗаписиПлановЗанятостиНеотображаемыхПеридов.Работа
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстатокФактНачалоТекущегоПериода КАК ОстатокФактНачалоТекущегоПериода
	|		ПО ВыводимыеРаботыЗатраченноеВремяРабочиеПланы.Сотрудник = ОстатокФактНачалоТекущегоПериода.Исполнитель
	|			И ВыводимыеРаботыЗатраченноеВремяРабочиеПланы.Работа = ОстатокФактНачалоТекущегоПериода.Этап
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗапланированоПланыЗанятостиПрошлыеПериоды КАК ЗапланированоПланыЗанятостиПрошлыеПериоды
	|		ПО ВыводимыеРаботыЗатраченноеВремяРабочиеПланы.Сотрудник = ЗапланированоПланыЗанятостиПрошлыеПериоды.Сотрудник
	|			И ВыводимыеРаботыЗатраченноеВремяРабочиеПланы.Работа = ЗапланированоПланыЗанятостиПрошлыеПериоды.Работа
	|		ЛЕВОЕ СОЕДИНЕНИЕ ФактЭтапыНачалоТекущегоПериода КАК ФактЭтапыНачалоТекущегоПериода
	|		ПО ВыводимыеРаботыЗатраченноеВремяРабочиеПланы.Сотрудник = ФактЭтапыНачалоТекущегоПериода.Исполнитель
	|			И ВыводимыеРаботыЗатраченноеВремяРабочиеПланы.Работа = ФактЭтапыНачалоТекущегоПериода.Этап
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Работа,
	|	ИдентификаторПлана
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВыводимыеРаботыПослеОпределенияТрудозатрат.Сотрудник                                                                                           КАК Сотрудник,
	|	ВыводимыеРаботыПослеОпределенияТрудозатрат.Работа                                                                                              КАК Работа,
	|	ВыводимыеРаботыПослеОпределенияТрудозатрат.ИдентификаторПлана                                                                                  КАК ИдентификаторПлана,
	|	ВыводимыеРаботыПослеОпределенияТрудозатрат.ПланируемыеТрудозатратыПланЗанятости                                                                КАК ПланируемыеТрудозатратыПланЗанятости,
	|	ВыводимыеРаботыПослеОпределенияТрудозатрат.ФактическиеТрудозатратыСекунды                                                                      КАК ФактическиеТрудозатратыСекунды,
	|	ВыводимыеРаботыПослеОпределенияТрудозатрат.ПланируемыеТрудозатратыРабочиеПланы                                                                 КАК ПланируемыеТрудозатратыРабочиеПланы,
	|	ВыводимыеРаботыПослеОпределенияТрудозатрат.ПланируемыеТрудозатратыНеотображаемыхПериодов                                                       КАК ПланируемыеТрудозатратыНеотображаемыхПериодов,
	|	ВыводимыеРаботыПослеОпределенияТрудозатрат.ЗапланированоНаНачалоТекущего                                                                       КАК ЗапланированоНаНачалоТекущего,
	|	ВыводимыеРаботыПослеОпределенияТрудозатрат.ПланЗанятостиМинусФактСекунды                                                                       КАК ПланЗанятостиМинусФактСекунды,
	|	Пользователи.Подразделение                                                                                                                     КАК Подразделение,
	|	ЕСТЬNULL(ЗадачиПроцесса.Статус, ЗНАЧЕНИЕ(Справочник.ЗадачиПроцесса.ПустаяСсылка))                                                              КАК Статус,
	|	ЕСТЬNULL(ТехническиеПроекты.Версия, ЕСТЬNULL(ТехническиеПроектыЭтапыНеПоШаблону.Версия, ЗНАЧЕНИЕ(Справочник.ВерсииПроекта.ПустаяСсылка)))      КАК Версия,
	|	ЕСТЬNULL(ТехническиеПроекты.Владелец, ЕСТЬNULL(ТехническиеПроектыЭтапыНеПоШаблону.Владелец, ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)))        КАК Проект,
	|	ЕСТЬNULL(ТехническиеПроекты.Ссылка, ЕСТЬNULL(ТехническиеПроектыЭтапыНеПоШаблону.Ссылка, ЗНАЧЕНИЕ(Справочник.ТехническиеПроекты.ПустаяСсылка))) КАК ТехПроект,
	|	ЕСТЬNULL(ЗадачиПроцесса.ПлановаяДатаНачала, ЕСТЬNULL(ТехническиеПроектыЭтапыНеПоШаблону.ПлановаяДатаНачала, &ПустаяДата))                      КАК ПлановаяДатаНачала,
	|	ЕСТЬNULL(ЗадачиПроцесса.КрайняяДатаОкончания, ЕСТЬNULL(ТехническиеПроектыЭтапыНеПоШаблону.ПлановаяДатаОкончания, &ПустаяДата))                 КАК КрайняяДатаОкончания,
	|	ВЫБОР
	|		КОГДА ВыводимыеРаботыПослеОпределенияТрудозатрат.Работа ССЫЛКА Справочник.ЗадачиПроцесса
	|			ИЛИ ВыводимыеРаботыПослеОпределенияТрудозатрат.Работа ССЫЛКА Справочник.ТехническиеПроекты
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЗначениеУпорядочиванияПоТипуРаботы,
	|	ЕСТЬNULL(СостоянияЗадачПроцессов.ЗначениеУпорядочивания, 0) КАК ЗначениеУпорядочиванияЭтапа
	|ИЗ
	|	ВыводимыеРаботыПослеОпределенияТрудозатрат КАК ВыводимыеРаботыПослеОпределенияТрудозатрат
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО ВыводимыеРаботыПослеОпределенияТрудозатрат.Сотрудник = Пользователи.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО ВыводимыеРаботыПослеОпределенияТрудозатрат.Работа = ЗадачиПроцесса.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТехническиеПроекты КАК ТехническиеПроекты
	|		ПО (ЗадачиПроцесса.Предмет = ТехническиеПроекты.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТехническиеПроекты КАК ТехническиеПроектыЭтапыНеПоШаблону
	|		ПО (ВыводимыеРаботыПослеОпределенияТрудозатрат.Работа = ТехническиеПроектыЭтапыНеПоШаблону.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗадачПроцессов КАК СостоянияЗадачПроцессов
	|		ПО ВыводимыеРаботыПослеОпределенияТрудозатрат.Работа = СостоянияЗадачПроцессов.ЗадачаПроцесса
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗначениеУпорядочиванияПоТипуРаботы,
	|	Подразделение,
	|	Сотрудник,
	|	ТехПроект,
	|	ЗначениеУпорядочиванияЭтапа
	|ИТОГИ ПО
	|	Подразделение,
	|	Сотрудник,
	|	ЗначениеУпорядочиванияПоТипуРаботы,
	|	ТехПроект,
	|	Работа";
	
КонецФункции

Функция ПодготовленныеДанныеГруппировкаОтСотрудников(РезультатЗапроса, ПараметрыФормирования, ТаблицаПланов)
	
	ДанныеОтчета = НовыйПодготовленныеДанныеОтчета(ТаблицаПланов);
	
	ДеревоДанных                     = ДанныеОтчета.ДеревоДанных;
	ИдентификаторыИменаКолонок       = ДанныеОтчета.ИдентификаторыИменаКолонок;
	ДанныеОтчета.ПредставлениеОтбора = ПредставлениеОтбора(ПараметрыФормирования);
	
	ВыборкаПодразделение = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПодразделение.Следующий() Цикл
		
		СтрокаПодразделение = ДеревоДанных.Строки.Добавить();
		СтрокаПодразделение.СотрудникРабота = ВыборкаПодразделение.Подразделение;
		
		ВыборкаСотрудник = ВыборкаПодразделение.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаСотрудник.Следующий() Цикл
			
			СтрокаСотрудник = СтрокаПодразделение.Строки.Добавить();
			СтрокаСотрудник.СотрудникРабота = ВыборкаСотрудник.Сотрудник;
			
			ВыборкаЗначениеУпорядочивания  = ВыборкаСотрудник.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
			Пока ВыборкаЗначениеУпорядочивания.Следующий() Цикл 
				
				ВыборкаТехПроект = ВыборкаЗначениеУпорядочивания.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаТехПроект.Следующий() Цикл
					
					ВыборкаРабота = ВыборкаТехПроект.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаРабота.Следующий() Цикл
					
						СтрокаРабота =  СтрокаСотрудник.Строки.Добавить();
						СтрокаРабота.СотрудникРабота = ВыборкаРабота.Работа;
						
						ВыборкаДетали = ВыборкаРабота.Выбрать();
						
						ДополнительныеДанныеУстановлены = Ложь;
						
						Пока ВыборкаДетали.Следующий() Цикл
							
							Если Не ДополнительныеДанныеУстановлены Тогда
								
								СтрокаРабота.ТехническийПроект                 = ВыборкаДетали.ТехПроект;
								СтрокаРабота.Версия                            = ВыборкаДетали.Версия;
								СтрокаРабота.Статус                            = ВыборкаДетали.Статус;
								СтрокаРабота.ДатаНачала                        = ВыборкаДетали.ПлановаяДатаНачала;
								СтрокаРабота.ДатаОкончания                     = ВыборкаДетали.КрайняяДатаОкончания;
								СтрокаРабота.Проект                            = ВыборкаДетали.Проект;
								СтрокаРабота.ЗапланированоНаНачалоТекущего     = ПланированиеКлиентСервер.ЧасыПоДлительностиВСекундах(ВыборкаДетали.ЗапланированоНаНачалоТекущего);
								СтрокаРабота.ПланЗанятостиНеотображаемыйПериод = ВыборкаДетали.ПланируемыеТрудозатратыНеотображаемыхПериодов;
								СтрокаРабота.ПланЗанятостиМинусФакт            = ПланированиеКлиентСервер.ЧасыПоДлительностиВСекундах(ВыборкаДетали.ПланЗанятостиМинусФактСекунды);
								
								Если ТипЗнч(СтрокаРабота.СотрудникРабота) = Тип("СправочникСсылка.ЗадачиПроцесса")
									Или ТипЗнч(СтрокаРабота.СотрудникРабота) = Тип("СправочникСсылка.ТехническиеПроекты") Тогда
									СтрокаРабота.Нераспределено = СтрокаРабота.ЗапланированоНаНачалоТекущего - СтрокаРабота.ПланЗанятостиНеотображаемыйПериод;
								КонецЕсли;
								
								ДополнительныеДанныеУстановлены = Истина;
								
							КонецЕсли;
								
							Для Каждого СтрокаТаблицыПланов Из ТаблицаПланов Цикл
								
								ИменаКолонок = ИдентификаторыИменаКолонок.Получить(СтрокаТаблицыПланов.ИдентификаторПлана);
								
								Если ИменаКолонок = Неопределено Тогда 
									Продолжить;
								КонецЕсли;
								
								Если СтрокаТаблицыПланов.НачалоПериода > ВыборкаДетали.КрайняяДатаОкончания
									Или СтрокаТаблицыПланов.КонецПериода < ВыборкаДетали.ПлановаяДатаНачала Тогда
									
									СтрокаРабота[ИменаКолонок.ПериодКорректен] = Ложь;
									
								Иначе
									
									СтрокаРабота[ИменаКолонок.ПериодКорректен] = Истина;
									
								КонецЕсли;
								
								Если (ВыборкаДетали.ПлановаяДатаНачала >= СтрокаТаблицыПланов.НачалоПериода
									И ВыборкаДетали.ПлановаяДатаНачала <= КонецДня(СтрокаТаблицыПланов.КонецПериода))
									Или (ВыборкаДетали.КрайняяДатаОкончания >= СтрокаТаблицыПланов.НачалоПериода
									И ВыборкаДетали.КрайняяДатаОкончания <= КонецДня(СтрокаТаблицыПланов.КонецПериода)) Тогда
									
									ИменаКолонок = ИдентификаторыИменаКолонок.Получить(СтрокаТаблицыПланов.ИдентификаторПлана);
									
									Если ИменаКолонок <> Неопределено Тогда
										СтрокаРабота[ИменаКолонок.ПериодКорректен] = Истина;
									КонецЕсли;
									
								КонецЕсли;
								
							КонецЦикла;
							
							Если ВыборкаДетали.ИдентификаторПлана <> 0 Тогда
								
								ИменаКолонок = ИдентификаторыИменаКолонок.Получить(ВыборкаДетали.ИдентификаторПлана);
								
								Если ИменаКолонок = Неопределено Тогда
									Продолжить;
								КонецЕсли;
								
								СтрокаРабота[ИменаКолонок.ПланЗанятости] = ВыборкаДетали.ПланируемыеТрудозатратыПланЗанятости;
								Если ИменаКолонок.ТипПериода <> СловарьПрошлыйПериодПлана()
									И ТипЗнч(СтрокаРабота.СотрудникРабота) = Тип("СправочникСсылка.ЗадачиПроцесса")
									Или ТипЗнч(СтрокаРабота.СотрудникРабота) = Тип("СправочникСсылка.ТехническиеПроекты") Тогда
										СтрокаРабота.Нераспределено = СтрокаРабота.Нераспределено - СтрокаРабота[ИменаКолонок.ПланЗанятости];
								КонецЕсли;
								
								Если ИменаКолонок.ТипПериода = СловарьТекущийПериодПлана()
									Или ИменаКолонок.ТипПериода = СловарьПрошлыйПериодПлана() Тогда
									
									СтрокаРабота[ИменаКолонок.РабочиеПланы] = ВыборкаДетали.ПланируемыеТрудозатратыРабочиеПланы;
									СтрокаРабота[ИменаКолонок.Факт]         = ПланированиеКлиентСервер.ЧасыПоДлительностиВСекундах(ВыборкаДетали.ФактическиеТрудозатратыСекунды);
									
									Если ИменаКолонок.ТипПериода = СловарьПрошлыйПериодПлана() Тогда
										СтрокаРабота.Факт           = СтрокаРабота.Факт + СтрокаРабота[ИменаКолонок.Факт];
									КонецЕсли;
									
								КонецЕсли;
								
							КонецЕсли;
							
						КонецЦикла;
						
						Если СтрокаРабота.Нераспределено > 0 Тогда
							СтрокаРабота.Нераспределено = СтрокаРабота.Нераспределено;
						Иначе 
							СтрокаРабота.Резерв         = - СтрокаРабота.Нераспределено;
							СтрокаРабота.Нераспределено = 0;
						КонецЕсли;
						
					КонецЦикла
					
				КонецЦикла;
				
			КонецЦикла;
			
			ПересчитатьМассивКолонокРодительскойСтрокиПоДаннымПодчиненных(СтрокаСотрудник, ДанныеОтчета.ИменаКолонокПерерасчетРодители, Ложь);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ДанныеОтчета;
	
КонецФункции

Процедура ВывестиДанныеВТабличныйДокументОтСотрудников(РезультатФормированияОтчета, ПодготовленныеДанные, ПараметрыФормирования, ТаблицаПланов)
	
	Макет = Отчеты.КонтрольПланирования.ПолучитьМакет("ОтСотрудников");
	
	ТаблицаОтчета = РезультатФормированияОтчета.ТабличныйДокумент;
	
	УстановитьШапкуОтчета(Макет, ТаблицаОтчета, ПараметрыФормирования, ПодготовленныеДанные);
	УстановитьЛегенду(Макет, ТаблицаОтчета);
	УстановитьШапкуТаблицыОтчета(Макет, ТаблицаОтчета, ПодготовленныеДанные, ПараметрыФормирования, ТаблицаПланов);
	ЭтоПоследняяСтрока = Ложь;
	
	Для Каждого СтрокаПодразделение Из ПодготовленныеДанные.ДеревоДанных.Строки Цикл
		
		ВывестиСтрокуПодразделениеОтСотрудников(СтрокаПодразделение, Макет, ТаблицаОтчета, ТаблицаПланов, ПодготовленныеДанные.ИдентификаторыИменаКолонок);
		ТаблицаОтчета.НачатьГруппуСтрок(СтрокаПодразделение.СотрудникРабота);
		
		Для Каждого СтрокаСотрудник Из СтрокаПодразделение.Строки Цикл
			
			ВывестиСтрокаСотрудникОтСотрудников(СтрокаСотрудник, Макет, ТаблицаОтчета, ТаблицаПланов, ПодготовленныеДанные.ИдентификаторыИменаКолонок);
			ТаблицаОтчета.НачатьГруппуСтрок(СтрокаСотрудник.СотрудникРабота);
			
			Для Каждого СтрокаРабота Из СтрокаСотрудник.Строки Цикл
				
				Если ПодготовленныеДанные.ДеревоДанных.Строки.Индекс(СтрокаПодразделение) = ПодготовленныеДанные.ДеревоДанных.Строки.Количество() - 1
					И СтрокаПодразделение.Строки.Индекс(СтрокаСотрудник) = СтрокаПодразделение.Строки.Количество() - 1
					И СтрокаСотрудник.Строки.Индекс(СтрокаРабота) = СтрокаСотрудник.Строки.Количество() - 1 Тогда
					
					ЭтоПоследняяСтрока = Истина;
					
				КонецЕсли;
				
				ВывестиСтрокаРаботаОтСотрудников(СтрокаРабота,
				                                 Макет,
				                                 ТаблицаОтчета,
				                                 ТаблицаПланов,
				                                 ПодготовленныеДанные.ИдентификаторыИменаКолонок,
				                                 ЭтоПоследняяСтрока);
				
			КонецЦикла;
			
			ТаблицаОтчета.ЗакончитьГруппуСтрок();
			
		КонецЦикла;
		
		ТаблицаОтчета.ЗакончитьГруппуСтрок();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиСтрокаРаботаОтСотрудников(СтрокаРабота, Макет, ТаблицаОтчета, ТаблицаПланов, ИдентификаторыИменаКолонок, ЭтоПоследняяСтрока)
	
	Область = Макет.ПолучитьОбласть("СтрокаРаботаПостоянныеКолонки");
	
	Если ТипЗнч(СтрокаРабота.СотрудникРабота) = Тип("СправочникСсылка.ТехническиеПроекты") Тогда
		Работа = НСтр("ru = 'Задачи не по шаблону'");
	Иначе
		Работа = СтрокаРабота.СотрудникРабота;
	КонецЕсли;
	
	Область.Параметры.Работа                      = Работа;
	Область.Параметры.ТехПроект                   = СтрокаРабота.ТехническийПроект;
	Область.Параметры.Версия                      = СтрокаРабота.Версия;
	Область.Параметры.Проект                      = СтрокаРабота.Проект;
	Область.Параметры.ДатаНачала                  = Формат(СтрокаРабота.ДатаНачала,    "ДФ=dd.MM.yy");
	Область.Параметры.ДатаОкончания               = Формат(СтрокаРабота.ДатаОкончания, "ДФ=dd.MM.yy"); 
	Область.Параметры.ОстатокНаДату               = СтрокаРабота.ЗапланированоНаНачалоТекущего;
	Область.Параметры.Факт                        = СтрокаРабота.Факт;
	Область.Параметры.НераспределеноПланЗанятости = СтрокаРабота.Нераспределено;
	Область.Параметры.РезервПланЗанятости         = СтрокаРабота.Резерв;
	Область.Параметры.ПланЗанятостиМинусФакт      = СтрокаРабота.ПланЗанятостиМинусФакт;
	
	Если СтрокаРабота.Статус <> Перечисления.СтатусыЗадачПроцессов.Выполнена
		И НачалоДня(СтрокаРабота.ДатаОкончания) < НачалоДня(ТекущаяДатаСеанса()) Тогда
		
		Область.Области.ДатаОкончанияЭтапа.ЦветТекста = ЦветаСтиля.ЗонаЗадачиКрасный;
		
	КонецЕсли; 
	
	Если ЭтоПоследняяСтрока Тогда
		Область.Области.СтрокаРаботаПостоянныеКолонки.ГраницаСнизу = ЛинияТолщинаДва();
	КонецЕсли;
	
	ТаблицаОтчета.Вывести(Область);
	
	Для Каждого СтрокаТаблицыПланов Из ТаблицаПланов Цикл
		
		ДанныеКолонок =  ИдентификаторыИменаКолонок.Получить(СтрокаТаблицыПланов.ИдентификаторПлана);
		
		Если ДанныеКолонок = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеКолонок.ТипПериода = СловарьТекущийПериодПлана()
			Или ДанныеКолонок.ТипПериода = СловарьПрошлыйПериодПлана() Тогда 
			
			ИмяОбласти = "СтрокаРаботаЧетыреКолонки";
			Область = Макет.ПолучитьОбласть(ИмяОбласти);
			
			Область.Параметры.Факт           = СтрокаРабота[ДанныеКолонок.Факт];
			Область.Параметры.РабочиеПланы   = СтрокаРабота[ДанныеКолонок.РабочиеПланы];
			
			Если СтрокаРабота[ДанныеКолонок.РабочиеПланы] <> СтрокаРабота[ДанныеКолонок.ПланЗанятости] Тогда
				
				Область.Области.РаботаРабочиеПланы.ЦветТекста = ЦветаСтиля.ЗонаЗадачиКрасный;
				
			КонецЕсли;
			
			Если ДанныеКолонок.ТипПериода = СловарьПрошлыйПериодПлана() 
				И СтрокаРабота[ДанныеКолонок.Факт] <> СтрокаРабота[ДанныеКолонок.РабочиеПланы] Тогда
				
				Область.Области.РаботаФакт.ЦветТекста = ЦветаСтиля.ЗонаЗадачиКрасный;
				
			КонецЕсли;
			
		Иначе
			
			ИмяОбласти = "СтрокаРаботаОднаКолонка";
			Область = Макет.ПолучитьОбласть(ИмяОбласти);
			
		КонецЕсли;
		
		Если СтрокаРабота[ДанныеКолонок.ПериодКорректен] Тогда
			
			Область.Области[ИмяОбласти].ЦветФона = ЦветаСтиля.ЦветФонаВходитВПериодПланирования;
			
		КонецЕсли;
		
		Область.Параметры.ПланЗанятости =  СтрокаРабота[ДанныеКолонок.ПланЗанятости];
		
		Если ЭтоПоследняяСтрока Тогда
			Область.Области[ИмяОбласти].ГраницаСнизу = ЛинияТолщинаДва();
		КонецЕсли;
		
		ТаблицаОтчета.Присоединить(Область);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиСтрокаСотрудникОтСотрудников(СтрокаСотрудник, Макет, ТаблицаОтчета, ТаблицаПланов, ИдентификаторыИменаКолонок)
	
	Область = Макет.ПолучитьОбласть("СтрокаСотрудникПостоянныеКолонки");
	
	Область.Параметры.Сотрудник                   = СтрокаСотрудник.СотрудникРабота;
	Область.Параметры.ОстатокНаДату               = СтрокаСотрудник.ЗапланированоНаНачалоТекущего;
	Область.Параметры.Факт                        = СтрокаСотрудник.Факт;
	Область.Параметры.ПланЗанятостиМинусФакт      = СтрокаСотрудник.ПланЗанятостиМинусФакт;
	Область.Параметры.НераспределеноПланЗанятости = СтрокаСотрудник.Нераспределено;
	Область.Параметры.РезервПланЗанятости         = СтрокаСотрудник.Резерв;
	
	ТаблицаОтчета.Вывести(Область);
	
	Для Каждого СтрокаТаблицыПланов Из ТаблицаПланов Цикл
		
		ДанныеКолонок =  ИдентификаторыИменаКолонок.Получить(СтрокаТаблицыПланов.ИдентификаторПлана);
		
		Если ДанныеКолонок = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеКолонок.ТипПериода = СловарьТекущийПериодПлана()
			Или ДанныеКолонок.ТипПериода = СловарьПрошлыйПериодПлана() Тогда
			
			Область = Макет.ПолучитьОбласть("СтрокаСотрудникЧетыреКолонки");
			
			Область.Параметры.Факт           = СтрокаСотрудник[ДанныеКолонок.Факт];
			Область.Параметры.РабочиеПланы   = СтрокаСотрудник[ДанныеКолонок.РабочиеПланы];
			
			Если СтрокаСотрудник[ДанныеКолонок.РабочиеПланы] <> СтрокаСотрудник[ДанныеКолонок.ПланЗанятости] Тогда
				
				Область.Области.СотрудникРабочиеПланы.ЦветТекста = ЦветаСтиля.ЗонаЗадачиКрасный;
				
			КонецЕсли;
			
			Если ДанныеКолонок.ТипПериода = СловарьПрошлыйПериодПлана() 
				И СтрокаСотрудник[ДанныеКолонок.Факт] <> СтрокаСотрудник[ДанныеКолонок.РабочиеПланы] Тогда
				
				Область.Области.СотрудникФакт.ЦветТекста = ЦветаСтиля.ЗонаЗадачиКрасный;
				
			КонецЕсли;
			
		Иначе
			
			Область = Макет.ПолучитьОбласть("СтрокаСотрудникОднаКолонка");
			
		КонецЕсли;
		
		Область.Параметры.ПланЗанятости =  СтрокаСотрудник[ДанныеКолонок.ПланЗанятости];
		
		ТаблицаОтчета.Присоединить(Область);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиСтрокуПодразделениеОтСотрудников(СтрокаПодразделение, Макет, ТаблицаОтчета, ТаблицаПланов, ИдентификаторыИменаКолонок)
	
	Область = Макет.ПолучитьОбласть("СтрокаПодразделениеПостоянныеКолонки");
	
	Подразделение = ?(ЗначениеЗаполнено(СтрокаПодразделение.СотрудникРабота), СтрокаПодразделение.СотрудникРабота, НСтр("ru = '<без подразделения>'"));
	Область.Параметры.Подразделение = Подразделение;
	ТаблицаОтчета.Вывести(Область);
	
	Для Каждого СтрокаТаблицыПланов Из ТаблицаПланов Цикл
		
		ДанныеКолонок =  ИдентификаторыИменаКолонок.Получить(СтрокаТаблицыПланов.ИдентификаторПлана);
		
		Если ДанныеКолонок = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеКолонок.ТипПериода = СловарьТекущийПериодПлана()
			Или ДанныеКолонок.ТипПериода = СловарьПрошлыйПериодПлана() Тогда
			
			Область = Макет.ПолучитьОбласть("СтрокаПодразделениеЧетыреКолонки");
			
		Иначе
			
			Область = Макет.ПолучитьОбласть("СтрокаПодразделениеОднаКолонка");
			
		КонецЕсли;
		
		ТаблицаОтчета.Присоединить(Область);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОтТехПроектов

Функция ТекстЗапросаГруппировкаОтТехПроектов()
	
	Возврат "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Планы.ИдентификаторПлана КАК ИдентификаторПлана
	|ПОМЕСТИТЬ ИдентификаторыРабочихПланов
	|ИЗ
	|	РегистрСведений.Планы КАК Планы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыПланов КАК ВидыПланов
	|		ПО Планы.ВидПлана = ВидыПланов.Ссылка
	|ГДЕ
	|	ВидыПланов.ТипПлана = ЗНАЧЕНИЕ(Перечисление.ТипыПланов.Рабочий)
	|	И НЕ ВидыПланов.ПометкаУдаления
	|	И ВидыПланов.РодительскийПлан.Ссылка = &ПланЗанятости
	|	И ВидыПланов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВидовПланов.Действует)
	|	И Планы.НачалоПериода >= &НачалоПериода
	|	И Планы.КонецПериода <= &КонецПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаПланов.ИдентификаторПлана КАК ИдентификаторПлана,
	|	ТаблицаПланов.НачалоПериода      КАК ДатаНачала,
	|	ТаблицаПланов.КонецПериода       КАК ДатаОкончания,
	|	ТаблицаПланов.Зафиксирован       КАК Зафиксирован
	|ПОМЕСТИТЬ ТаблицаПланов
	|ИЗ
	|	&ТаблицаПланов КАК ТаблицаПланов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДатаНачала,
	|	ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаписиПлана.ИдентификаторПлана      КАК ИдентификаторПлана,
	|	ЗаписиПлана.Сотрудник               КАК Сотрудник,
	|	ЗаписиПлана.Работа                  КАК Работа,
	|	ЗаписиПлана.ПланируемыеТрудозатраты КАК ПланируемыеТрудозатраты
	|ПОМЕСТИТЬ СуществующиеЗаписиПлана
	|ИЗ
	|	РегистрСведений.ЗаписиПлана КАК ЗаписиПлана
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПланов КАК ТаблицаПланов
	|		ПО (ТаблицаПланов.ИдентификаторПлана = ЗаписиПлана.ИдентификаторПлана)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО ЗаписиПлана.Работа = ЗадачиПроцесса.Ссылка
	|ГДЕ
	|	ЗаписиПлана.ТипСтрокиПлана = ЗНАЧЕНИЕ(Перечисление.ТипыСтрокПлана.Работа)
	|	И ЗаписиПлана.ПланируемыеТрудозатраты <> 0
	|	И (ЗадачиПроцесса.Предмет В (&ВыводимыеТехническиеПроекты) Или ЗаписиПлана.Работа В (&ВыводимыеТехническиеПроекты))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Работа,
	|	ИдентификаторПлана
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиПроцесса.Исполнитель                                       КАК Исполнитель,
	|	ВЫБОР 
	|		КОГДА ЗадачиПроцессаРодители.ЗадачаШаблона = ЗНАЧЕНИЕ(Справочник.ЗадачиШаблонаПроцесса.ПустаяСсылка)
	|			ТОГДА ЗадачиПроцессаРодители.Предмет
	|			ИНАЧЕ ИерархияЗадачПроцесса.Родитель
	|	КОНЕЦ                                                            КАК Родитель,
	|	СУММА(ЕСТЬNULL(ИтогиСогласованияЗадачРесурсов.Запланировано, 0)) КАК Запланировано,
	|	СУММА(ЕСТЬNULL(УчетВремени.Длительность, 0))                     КАК УчетВремениСекунды
	|ПОМЕСТИТЬ ЭтапыСотрудникаЗапланированоУчетВремени
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИерархияЗадачПроцесса КАК ИерархияЗадачПроцесса
	|		ПО ЗадачиПроцесса.Ссылка = ИерархияЗадачПроцесса.ЗадачаПроцесса 
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцессаРодители
	|		ПО ЗадачиПроцессаРодители.Ссылка = ИерархияЗадачПроцесса.Родитель
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТехническиеПроекты КАК ТехническиеПроекты
	|		ПО ЗадачиПроцесса.Предмет = ТехническиеПроекты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИтогиСогласованияЗадачРесурсов КАК ИтогиСогласованияЗадачРесурсов
	|		ПО (ИтогиСогласованияЗадачРесурсов.ЗадачаПроцесса = ЗадачиПроцесса.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УчетВремени КАК УчетВремени
	|		ПО (УчетВремени.Задача = ЗадачиПроцесса.Ссылка)
	|			И (УчетВремени.Пользователь = ЗадачиПроцесса.Исполнитель)
	|			И (УчетВремени.Период < &НачалоТекущегоПериода)
	|ГДЕ
	|	ЗадачиПроцесса.Предмет В(&ВыводимыеТехническиеПроекты)
	|	И ЗадачиПроцесса.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Запланирована), ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.ПринятаКВыполнению))
	|	И НЕ ЗадачиПроцесса.ПометкаУдаления
	|	И ИерархияЗадачПроцесса.Уровень = 0
	|	И НЕ ТехническиеПроекты.ПометкаУдаления
	|	И ТехническиеПроекты.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыТехническихПроектов.Запланирован), ЗНАЧЕНИЕ(Перечисление.СтатусыТехническихПроектов.Активен))
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР 
	|		КОГДА ЗадачиПроцессаРодители.ЗадачаШаблона = ЗНАЧЕНИЕ(Справочник.ЗадачиШаблонаПроцесса.ПустаяСсылка)
	|			ТОГДА ЗадачиПроцессаРодители.Предмет
	|			ИНАЧЕ ИерархияЗадачПроцесса.Родитель
	|	КОНЕЦ,
	|	ЗадачиПроцесса.Исполнитель	
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭтапыСотрудникаЗапланированоУчетВремени.Исполнитель         КАК Исполнитель,
	|	ЭтапыСотрудникаЗапланированоУчетВремени.Родитель            КАК Родитель,
	|	ЭтапыСотрудникаЗапланированоУчетВремени.Запланировано       КАК Запланировано,
	|	ЭтапыСотрудникаЗапланированоУчетВремени.УчетВремениСекунды  КАК УчетВремениСекунды
	|ПОМЕСТИТЬ ЭтапыСотрудникаДляОтображенияВПланах
	|ИЗ
	|	ЭтапыСотрудникаЗапланированоУчетВремени КАК ЭтапыСотрудникаЗапланированоУчетВремени
	|ГДЕ
	|	ЭтапыСотрудникаЗапланированоУчетВремени.Запланировано > &ПороговоеЗначениеДляЭтапаПоЗапланировано
	|	ИЛИ ЭтапыСотрудникаЗапланированоУчетВремени.УчетВремениСекунды > &ПороговоеЗначениеДляЭтапаПоФакт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СуществующиеЗаписиПлана.Работа КАК Работа
	|ПОМЕСТИТЬ ОтображаемыеРаботы
	|ИЗ
	|	СуществующиеЗаписиПлана КАК СуществующиеЗаписиПлана
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЭтапыСотрудникаДляОтображенияВПланах.Родитель
	|ИЗ
	|	ЭтапыСотрудникаДляОтображенияВПланах КАК ЭтапыСотрудникаДляОтображенияВПланах
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.ПланируемыеТрудозатраты КАК ПланируемыеТрудозатраты,
	|	ВложенныйЗапрос.Сотрудник КАК Сотрудник,
	|	ВложенныйЗапрос.Работа КАК Работа,
	|	ВложенныйЗапрос.ИдентификаторПлана КАК ИдентификаторПлана
	|ПОМЕСТИТЬ ДанныеВыводимыхРабот
	|ИЗ
	|	(ВЫБРАТЬ
	|		СуществующиеЗаписиПлана.ПланируемыеТрудозатраты КАК ПланируемыеТрудозатраты,
	|		СуществующиеЗаписиПлана.Сотрудник КАК Сотрудник,
	|		СуществующиеЗаписиПлана.Работа КАК Работа,
	|		СуществующиеЗаписиПлана.ИдентификаторПлана КАК ИдентификаторПлана
	|	ИЗ
	|		СуществующиеЗаписиПлана КАК СуществующиеЗаписиПлана
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		0,
	|		ЭтапыСотрудникаДляОтображенияВПланах.Исполнитель,
	|		ЭтапыСотрудникаДляОтображенияВПланах.Родитель,
	|		0
	|	ИЗ
	|		ЭтапыСотрудникаДляОтображенияВПланах КАК ЭтапыСотрудникаДляОтображенияВПланах) КАК ВложенныйЗапрос
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Работа,
	|	ИдентификаторПлана
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	ДанныеВыводимыхРабот.Работа КАК Работа,
	|	ДанныеВыводимыхРабот.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ОтображаемыеРаботыСотрудники
	|ИЗ
	|	ДанныеВыводимыхРабот КАК ДанныеВыводимыхРабот
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Работа,
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОтображаемыеРаботыСотрудники.Работа КАК Работа,
	|	ОтображаемыеРаботыСотрудники.Сотрудник КАК Сотрудник,
	|	СУММА(ЗаписиПлана.ПланируемыеТрудозатраты) КАК ПланируемыеТрудозатраты
	|ПОМЕСТИТЬ ЗапланированоПланыЗанятостиПрошлыеПериоды
	|ИЗ
	|	ОтображаемыеРаботыСотрудники КАК ОтображаемыеРаботыСотрудники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаписиПлана КАК ЗаписиПлана
	|		ПО ОтображаемыеРаботыСотрудники.Работа = ЗаписиПлана.Работа
	|			И ОтображаемыеРаботыСотрудники.Сотрудник = ЗаписиПлана.Сотрудник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Планы КАК Планы
	|		ПО (ЗаписиПлана.ИдентификаторПлана = Планы.ИдентификаторПлана)
	|			И (Планы.ВидПлана = &ПланЗанятости)
	|			И (Планы.КонецПериода < &НачалоТекущегоПериода) И (Планы.НачалоПериода >= &НачалоПериода)
	|			И (ЗаписиПлана.ТипСтрокиПлана = ЗНАЧЕНИЕ(Перечисление.ТипыСтрокПлана.Работа))
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтображаемыеРаботыСотрудники.Работа,
	|	ОтображаемыеРаботыСотрудники.Сотрудник
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЗаписиПлана.ПланируемыеТрудозатраты) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиПроцесса.Ссылка  КАК ЭтапНеПоШаблону,
	|	ЗадачиПроцесса.Предмет КАК ТехПроект
	|ПОМЕСТИТЬ ЭтапыНеПоШаблону
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса 
	|ГДЕ
	|	ЗадачиПроцесса.ЗадачаШаблона = ЗНАЧЕНИЕ(Справочник.ЗадачиШаблонаПроцесса.ПустаяСсылка)
	|	И ЗадачиПроцесса.Родитель = ЗНАЧЕНИЕ(Справочник.ЗадачиПроцесса.ПустаяСсылка)
	|	И ЗадачиПроцесса.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Запланирована), ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.ПринятаКВыполнению))
	|	И ЗадачиПроцесса.Предмет В
	|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ДанныеВыводимыхРабот.Работа КАК Работа
	|		ИЗ
	|			ДанныеВыводимыхРабот КАК ДанныеВыводимыхРабот)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИерархияЗадачПроцесса.ЗадачаПроцесса КАК ЗадачаПроцесса,
	|	ИерархияЗадачПроцесса.Родитель       КАК Родитель
	|ПОМЕСТИТЬ ДочерниеЗадачиРабот
	|ИЗ
	|	РегистрСведений.ИерархияЗадачПроцесса КАК ИерархияЗадачПроцесса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтображаемыеРаботы КАК ОтображаемыеРаботы
	|		ПО (ОтображаемыеРаботы.Работа = ИерархияЗадачПроцесса.Родитель)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИерархияЗадачПроцесса.ЗадачаПроцесса КАК ЗадачаПроцесса,
	|	ЭтапыНеПоШаблону.ТехПроект           КАК Родитель
	|ИЗ
	|	РегистрСведений.ИерархияЗадачПроцесса КАК ИерархияЗадачПроцесса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЭтапыНеПоШаблону КАК ЭтапыНеПоШаблону
	|		ПО (ЭтапыНеПоШаблону.ЭтапНеПоШаблону = ИерархияЗадачПроцесса.Родитель)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(УчетВремени.Длительность) КАК Длительность,
	|	УчетВремени.Пользователь КАК Сотрудник,
	|	ТаблицаПланов.ИдентификаторПлана КАК ИдентификаторПлана,
	|	ДочерниеЗадачиРабот.Родитель КАК Работа
	|ПОМЕСТИТЬ ЗатраченноеВремяЗадачи
	|ИЗ
	|	ДочерниеЗадачиРабот КАК ДочерниеЗадачиРабот
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.УчетВремени КАК УчетВремени
	|		ПО (УчетВремени.Задача = ДочерниеЗадачиРабот.ЗадачаПроцесса)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПланов КАК ТаблицаПланов
	|		ПО (УчетВремени.Период >= НАЧАЛОПЕРИОДА(ТаблицаПланов.ДатаНачала, ДЕНЬ))
	|			И (УчетВремени.Период <= КОНЕЦПЕРИОДА(ТаблицаПланов.ДатаОкончания, ДЕНЬ))
	|
	|СГРУППИРОВАТЬ ПО
	|	ДочерниеЗадачиРабот.Родитель,
	|	УчетВремени.Пользователь,
	|	ТаблицаПланов.ИдентификаторПлана
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Работа,
	|	ИдентификаторПлана
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДочерниеЗадачиРабот.Родитель КАК Работа,
	|	ЗаписиПлана.Сотрудник КАК Сотрудник,
	|	СУММА(ЗаписиПлана.ПланируемыеТрудозатраты) КАК ПланируемыеТрудозатраты,
	|	ТаблицаПланов.ИдентификаторПлана КАК ИдентификаторПлана
	|ПОМЕСТИТЬ ДанныеРабочихПлановЭтапы
	|ИЗ
	|	ДочерниеЗадачиРабот КАК ДочерниеЗадачиРабот
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаписиПлана КАК ЗаписиПлана
	|		ПО ДочерниеЗадачиРабот.ЗадачаПроцесса = ЗаписиПлана.Работа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Планы КАК Планы
	|		ПО (ЗаписиПлана.ИдентификаторПлана = Планы.ИдентификаторПлана)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПланов КАК ТаблицаПланов
	|		ПО (Планы.НачалоПериода = ТаблицаПланов.ДатаНачала)
	|ГДЕ
	|	ЗаписиПлана.ИдентификаторПлана В
	|			(ВЫБРАТЬ
	|				ИдентификаторыРабочихПланов.ИдентификаторПлана КАК ИдентификаторПлана
	|			ИЗ
	|				ИдентификаторыРабочихПланов КАК ИдентификаторыРабочихПланов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДочерниеЗадачиРабот.Родитель,
	|	ЗаписиПлана.Сотрудник,
	|	ТаблицаПланов.ИдентификаторПлана
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЗаписиПлана.ПланируемыеТрудозатраты) > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Работа,
	|	ИдентификаторПлана
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаписиПлана.Сотрудник КАК Сотрудник,
	|	ЗаписиПлана.Работа КАК Работа,
	|	СУММА(ЗаписиПлана.ПланируемыеТрудозатраты) КАК ПланируемыеТрудозатраты
	|ПОМЕСТИТЬ ЗаписиПлановЗанятостиНеотображаемыхПеридов
	|ИЗ
	|	РегистрСведений.ЗаписиПлана КАК ЗаписиПлана
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтображаемыеРаботыСотрудники КАК ОтображаемыеРаботыСотрудники
	|		ПО ЗаписиПлана.Работа = ОтображаемыеРаботыСотрудники.Работа
	|			И ЗаписиПлана.Сотрудник = ОтображаемыеРаботыСотрудники.Сотрудник
	|			И (ЗаписиПлана.ТипСтрокиПлана = ЗНАЧЕНИЕ(Перечисление.ТипыСтрокПлана.Работа))
	|			И (ЗаписиПлана.ПланируемыеТрудозатраты <> 0)
	|ГДЕ
	|	ЗаписиПлана.ТипСтрокиПлана = ЗНАЧЕНИЕ(Перечисление.ТипыСтрокПлана.Работа)
	|	И ЗаписиПлана.ИдентификаторПлана В
	|			(ВЫБРАТЬ
	|				Планы.ИдентификаторПлана КАК ИдентификаторПлана
	|			ИЗ
	|				РегистрСведений.Планы КАК Планы
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыПланов КАК ВидыПланов
	|					ПО
	|						Планы.ВидПлана = ВидыПланов.Ссылка
	|			ГДЕ
	|				ВидыПланов.Ссылка = &ПланЗанятости
	|				И Планы.НачалоПериода >= &КонецПериода)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаписиПлана.Сотрудник,
	|	ЗаписиПлана.Работа
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Работа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДочерниеЗадачиРабот.Родитель                 КАК Этап,
	|	ДочерниеЗадачиРабот.ЗадачаПроцесса           КАК ЗадачаПроцесса,
	|	УчетВремени.Пользователь                     КАК Исполнитель,
	|	СУММА(ЕСТЬNULL(УчетВремени.Длительность, 0)) КАК ФактСекундыДоТекущегоПериода,
	|	СУММА(ВЫБОР 
	|		КОГДА (УчетВремени.Период < &НачалоТекущегоПериода)
	|			ТОГДА ЕСТЬNULL(УчетВремени.Длительность, 0) 
	|			ИНАЧЕ 0 
	|	КОНЕЦ)                                       КАК ФактСекундыНачалоОтчетаНачалоТекущегоПериода
	|ПОМЕСТИТЬ ФактЗадачиНачалоТекущегоПериода
	|ИЗ
	|	ДочерниеЗадачиРабот КАК ДочерниеЗадачиРабот
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО ДочерниеЗадачиРабот.ЗадачаПроцесса = ЗадачиПроцесса.Ссылка
	|			И (ВЫБОР
	|				КОГДА ЗадачиПроцесса.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Выполнена)
	|					ТОГДА ВЫБОР
	|							КОГДА ЗадачиПроцесса.ФактическаяДатаОкончания < &НачалоТекущегоПериода
	|								ТОГДА ЛОЖЬ
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.УчетВремени КАК УчетВремени
	|		ПО ДочерниеЗадачиРабот.ЗадачаПроцесса = УчетВремени.Задача
	|			И (УчетВремени.Период < &НачалоТекущегоПериода)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДочерниеЗадачиРабот.Родитель,
	|	ДочерниеЗадачиРабот.ЗадачаПроцесса,
	|	УчетВремени.Пользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФактЗадачиНачалоТекущегоПериода.Этап                                                КАК Этап,
	|	ФактЗадачиНачалоТекущегоПериода.Исполнитель                                         КАК Исполнитель,
	|	СУММА(ФактЗадачиНачалоТекущегоПериода.ФактСекундыДоТекущегоПериода)                 КАК ФактСекундыДоТекущегоПериода,
	|	СУММА(ФактЗадачиНачалоТекущегоПериода.ФактСекундыНачалоОтчетаНачалоТекущегоПериода) КАК ФактСекундыНачалоОтчетаНачалоТекущегоПериода
	|ПОМЕСТИТЬ ФактЭтапыНачалоТекущегоПериода
	|ИЗ
	|	ФактЗадачиНачалоТекущегоПериода КАК ФактЗадачиНачалоТекущегоПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	ФактЗадачиНачалоТекущегоПериода.Этап,
	|	ФактЗадачиНачалоТекущегоПериода.Исполнитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДочерниеЗадачиРабот.Родитель КАК Этап,
	|	ДочерниеЗадачиРабот.ЗадачаПроцесса КАК ЗадачаПроцесса,
	|	ЗадачиПроцесса.Исполнитель КАК Исполнитель,
	|	ЕСТЬNULL(ИтогиСогласованияЗадачРесурсов.Запланировано, 0) КАК Запланировано
	|ПОМЕСТИТЬ ОстатокЗапланированоНачалоТекущегоПериода
	|ИЗ
	|	ДочерниеЗадачиРабот КАК ДочерниеЗадачиРабот
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО ДочерниеЗадачиРабот.ЗадачаПроцесса = ЗадачиПроцесса.Ссылка
	|			И (ВЫБОР
	|				КОГДА ЗадачиПроцесса.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Выполнена)
	|					ТОГДА ВЫБОР
	|							КОГДА ЗадачиПроцесса.ФактическаяДатаОкончания < &НачалоТекущегоПериода
	|								ТОГДА ЛОЖЬ
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИтогиСогласованияЗадачРесурсов КАК ИтогиСогласованияЗадачРесурсов
	|		ПО ДочерниеЗадачиРабот.ЗадачаПроцесса = ИтогиСогласованияЗадачРесурсов.ЗадачаПроцесса
	|			И (ИтогиСогласованияЗадачРесурсов.ВидРесурса = &ВидРесурса)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстатокЗапланированоНачалоТекущегоПериода.Этап        КАК Этап,
	|	ОстатокЗапланированоНачалоТекущегоПериода.Исполнитель КАК Исполнитель,
	|	СУММА(ВЫБОР
	|			КОГДА ОстатокЗапланированоНачалоТекущегоПериода.Запланировано * 3600 > ЕСТЬNULL(ФактЗадачиНачалоТекущегоПериода.ФактСекундыДоТекущегоПериода, 0)
	|				ТОГДА ОстатокЗапланированоНачалоТекущегоПериода.Запланировано * 3600 - ЕСТЬNULL(ФактЗадачиНачалоТекущегоПериода.ФактСекундыДоТекущегоПериода, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Остаток
	|
	|ПОМЕСТИТЬ ОстатокФактНачалоТекущегоПериода
	|ИЗ
	|	ОстатокЗапланированоНачалоТекущегоПериода КАК ОстатокЗапланированоНачалоТекущегоПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ФактЗадачиНачалоТекущегоПериода КАК ФактЗадачиНачалоТекущегоПериода
	|		ПО ОстатокЗапланированоНачалоТекущегоПериода.Этап = ФактЗадачиНачалоТекущегоПериода.Этап
	|			И ОстатокЗапланированоНачалоТекущегоПериода.Исполнитель = ФактЗадачиНачалоТекущегоПериода.Исполнитель
	|			И ОстатокЗапланированоНачалоТекущегоПериода.ЗадачаПроцесса = ФактЗадачиНачалоТекущегоПериода.ЗадачаПроцесса 
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстатокЗапланированоНачалоТекущегоПериода.Исполнитель,
	|	ОстатокЗапланированоНачалоТекущегоПериода.Этап
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Исполнитель,
	|	Этап
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДочерниеЗадачиРабот.Родитель КАК Этап,
	|	УчетВремени.Пользователь КАК Исполнитель,
	|	СУММА(ЕСТЬNULL(УчетВремени.Длительность, 0)) КАК ФактСекундыДоТекущегоПериода
	|ПОМЕСТИТЬ ФактЗадачиПредыдущиеПериоды
	|ИЗ
	|	ДочерниеЗадачиРабот КАК ДочерниеЗадачиРабот
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.УчетВремени КАК УчетВремени
	|		ПО ДочерниеЗадачиРабот.ЗадачаПроцесса = УчетВремени.Задача
	|			И (УчетВремени.Период < &НачалоТекущегоПериода)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДочерниеЗадачиРабот.Родитель,
	|	УчетВремени.Пользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеВыводимыхРабот.ПланируемыеТрудозатраты КАК ПланируемыеТрудозатратыПланЗанятости,
	|	ДанныеВыводимыхРабот.Сотрудник КАК Сотрудник,
	|	ДанныеВыводимыхРабот.Работа КАК Работа,
	|	ДанныеВыводимыхРабот.ИдентификаторПлана КАК ИдентификаторПлана,
	|	ЕСТЬNULL(ЗатраченноеВремяЗадачи.Длительность, 0) КАК ФактическиеТрудозатратыСекунды
	|ПОМЕСТИТЬ ВыводимыеРаботыЗатраченноеВремяВсеРаботы
	|ИЗ
	|	ДанныеВыводимыхРабот КАК ДанныеВыводимыхРабот
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗатраченноеВремяЗадачи КАК ЗатраченноеВремяЗадачи
	|		ПО ДанныеВыводимыхРабот.Сотрудник = ЗатраченноеВремяЗадачи.Сотрудник
	|			И ДанныеВыводимыхРабот.Работа = ЗатраченноеВремяЗадачи.Работа
	|			И ДанныеВыводимыхРабот.ИдентификаторПлана = ЗатраченноеВремяЗадачи.ИдентификаторПлана
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	ЗатраченноеВремяЗадачи.Сотрудник,
	|	ЗатраченноеВремяЗадачи.Работа,
	|	ЗатраченноеВремяЗадачи.ИдентификаторПлана,
	|	ЗатраченноеВремяЗадачи.Длительность
	|ИЗ
	|	ЗатраченноеВремяЗадачи КАК ЗатраченноеВремяЗадачи
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеВыводимыхРабот КАК ДанныеВыводимыхРабот
	|		ПО ЗатраченноеВремяЗадачи.Сотрудник = ДанныеВыводимыхРабот.Сотрудник
	|			И ЗатраченноеВремяЗадачи.Работа = ДанныеВыводимыхРабот.Работа
	|			И ЗатраченноеВремяЗадачи.ИдентификаторПлана = ДанныеВыводимыхРабот.ИдентификаторПлана
	|ГДЕ
	|	ДанныеВыводимыхРабот.ИдентификаторПлана ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Работа,
	|	ИдентификаторПлана
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВыводимыеРаботыЗатраченноеВремяВсеРаботы.ПланируемыеТрудозатратыПланЗанятости КАК ПланируемыеТрудозатратыПланЗанятости,
	|	ВыводимыеРаботыЗатраченноеВремяВсеРаботы.Сотрудник КАК Сотрудник,
	|	ВыводимыеРаботыЗатраченноеВремяВсеРаботы.Работа КАК Работа,
	|	ВыводимыеРаботыЗатраченноеВремяВсеРаботы.ИдентификаторПлана КАК ИдентификаторПлана,
	|	ВыводимыеРаботыЗатраченноеВремяВсеРаботы.ФактическиеТрудозатратыСекунды КАК ФактическиеТрудозатратыСекунды,
	|	ЕСТЬNULL(ДанныеРабочихПлановЭтапы.ПланируемыеТрудозатраты, 0) КАК ПланируемыеТрудозатратыРабочиеПланы
	|ПОМЕСТИТЬ ВыводимыеРаботыЗатраченноеВремяРабочиеПланы
	|ИЗ
	|	ВыводимыеРаботыЗатраченноеВремяВсеРаботы КАК ВыводимыеРаботыЗатраченноеВремяВсеРаботы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеРабочихПлановЭтапы КАК ДанныеРабочихПлановЭтапы
	|		ПО ВыводимыеРаботыЗатраченноеВремяВсеРаботы.Сотрудник = ДанныеРабочихПлановЭтапы.Сотрудник
	|			И ВыводимыеРаботыЗатраченноеВремяВсеРаботы.Работа = ДанныеРабочихПлановЭтапы.Работа
	|			И ВыводимыеРаботыЗатраченноеВремяВсеРаботы.ИдентификаторПлана = ДанныеРабочихПлановЭтапы.ИдентификаторПлана
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	ДанныеРабочихПлановЭтапы.Сотрудник,
	|	ДанныеРабочихПлановЭтапы.Работа,
	|	ДанныеРабочихПлановЭтапы.ИдентификаторПлана,
	|	0,
	|	ДанныеРабочихПлановЭтапы.ПланируемыеТрудозатраты
	|ИЗ
	|	ДанныеРабочихПлановЭтапы КАК ДанныеРабочихПлановЭтапы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВыводимыеРаботыЗатраченноеВремяВсеРаботы КАК ВыводимыеРаботыЗатраченноеВремяВсеРаботы
	|		ПО ДанныеРабочихПлановЭтапы.Сотрудник = ВыводимыеРаботыЗатраченноеВремяВсеРаботы.Сотрудник
	|			И ДанныеРабочихПлановЭтапы.Работа = ВыводимыеРаботыЗатраченноеВремяВсеРаботы.Работа
	|			И ДанныеРабочихПлановЭтапы.ИдентификаторПлана = ВыводимыеРаботыЗатраченноеВремяВсеРаботы.ИдентификаторПлана
	|ГДЕ
	|	ВыводимыеРаботыЗатраченноеВремяВсеРаботы.ИдентификаторПлана ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Работа,
	|	ИдентификаторПлана
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВыводимыеРаботыЗатраченноеВремяРабочиеПланы.Сотрудник                            КАК Сотрудник,
	|	ВыводимыеРаботыЗатраченноеВремяРабочиеПланы.Работа                               КАК Работа,
	|	ВыводимыеРаботыЗатраченноеВремяРабочиеПланы.ИдентификаторПлана                   КАК ИдентификаторПлана,
	|	ВыводимыеРаботыЗатраченноеВремяРабочиеПланы.ПланируемыеТрудозатратыПланЗанятости КАК ПланируемыеТрудозатратыПланЗанятости,
	|	ВыводимыеРаботыЗатраченноеВремяРабочиеПланы.ФактическиеТрудозатратыСекунды       КАК ФактическиеТрудозатратыСекунды,
	|	ВыводимыеРаботыЗатраченноеВремяРабочиеПланы.ПланируемыеТрудозатратыРабочиеПланы  КАК ПланируемыеТрудозатратыРабочиеПланы,
	|	ЕСТЬNULL(ЗаписиПлановЗанятостиНеотображаемыхПеридов.ПланируемыеТрудозатраты, 0)  КАК ПланируемыеТрудозатратыНеотображаемыхПериодов,
	|	ЕСТЬNULL(ОстатокФактНачалоТекущегоПериода.Остаток,0)                             КАК ЗапланированоНаНачалоТекущего,
	|	ЕСТЬNULL(ЗапланированоПланыЗанятостиПрошлыеПериоды.ПланируемыеТрудозатраты, 0) * 3600 - ЕСТЬNULL(ФактЭтапыНачалоТекущегоПериода.ФактСекундыНачалоОтчетаНачалоТекущегоПериода, 0) КАК ПланЗанятостиМинусФактСекунды
	|ПОМЕСТИТЬ ВыводимыеРаботыПослеОпределенияЗатраченноеВремя
	|ИЗ
	|	ВыводимыеРаботыЗатраченноеВремяРабочиеПланы КАК ВыводимыеРаботыЗатраченноеВремяРабочиеПланы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаписиПлановЗанятостиНеотображаемыхПеридов КАК ЗаписиПлановЗанятостиНеотображаемыхПеридов
	|		ПО ВыводимыеРаботыЗатраченноеВремяРабочиеПланы.Сотрудник = ЗаписиПлановЗанятостиНеотображаемыхПеридов.Сотрудник
	|			И ВыводимыеРаботыЗатраченноеВремяРабочиеПланы.Работа = ЗаписиПлановЗанятостиНеотображаемыхПеридов.Работа
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстатокФактНачалоТекущегоПериода КАК ОстатокФактНачалоТекущегоПериода
	|		ПО ВыводимыеРаботыЗатраченноеВремяРабочиеПланы.Сотрудник = ОстатокФактНачалоТекущегоПериода.Исполнитель
	|			И ВыводимыеРаботыЗатраченноеВремяРабочиеПланы.Работа = ОстатокФактНачалоТекущегоПериода.Этап
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗапланированоПланыЗанятостиПрошлыеПериоды КАК ЗапланированоПланыЗанятостиПрошлыеПериоды
	|		ПО ВыводимыеРаботыЗатраченноеВремяРабочиеПланы.Сотрудник = ЗапланированоПланыЗанятостиПрошлыеПериоды.Сотрудник
	|			И ВыводимыеРаботыЗатраченноеВремяРабочиеПланы.Работа = ЗапланированоПланыЗанятостиПрошлыеПериоды.Работа
	|		ЛЕВОЕ СОЕДИНЕНИЕ ФактЭтапыНачалоТекущегоПериода КАК ФактЭтапыНачалоТекущегоПериода
	|		ПО ВыводимыеРаботыЗатраченноеВремяРабочиеПланы.Сотрудник = ФактЭтапыНачалоТекущегоПериода.Исполнитель
	|			И ВыводимыеРаботыЗатраченноеВремяРабочиеПланы.Работа = ФактЭтапыНачалоТекущегоПериода.Этап
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Работа,
	|	ИдентификаторПлана
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВыводимыеРаботыПослеОпределенияЗатраченноеВремя.Сотрудник                                                                                               КАК Сотрудник,
	|	ВыводимыеРаботыПослеОпределенияЗатраченноеВремя.Работа                                                                                                  КАК Работа,
	|	ВыводимыеРаботыПослеОпределенияЗатраченноеВремя.ИдентификаторПлана                                                                                      КАК ИдентификаторПлана,
	|	ВыводимыеРаботыПослеОпределенияЗатраченноеВремя.ПланируемыеТрудозатратыПланЗанятости                                                                    КАК ПланируемыеТрудозатратыПланЗанятости,
	|	ВыводимыеРаботыПослеОпределенияЗатраченноеВремя.ФактическиеТрудозатратыСекунды                                                                          КАК ФактическиеТрудозатратыСекунды,
	|	ВыводимыеРаботыПослеОпределенияЗатраченноеВремя.ПланируемыеТрудозатратыРабочиеПланы                                                                     КАК ПланируемыеТрудозатратыРабочиеПланы,
	|	ВыводимыеРаботыПослеОпределенияЗатраченноеВремя.ПланируемыеТрудозатратыНеотображаемыхПериодов                                                           КАК ПланируемыеТрудозатратыНеотображаемыхПериодов,
	|	ВыводимыеРаботыПослеОпределенияЗатраченноеВремя.ЗапланированоНаНачалоТекущего                                                                           КАК ЗапланированоНаНачалоТекущего,
	|	ВыводимыеРаботыПослеОпределенияЗатраченноеВремя.ПланЗанятостиМинусФактСекунды                                                                           КАК ПланЗанятостиМинусФактСекунды,
	|	Пользователи.Подразделение                                                                                                                              КАК Подразделение,
	|	ЕСТЬNULL(ЗадачиПроцесса.Статус,  ЗНАЧЕНИЕ(Справочник.ЗадачиПроцесса.ПустаяСсылка))                                                                      КАК Статус,
	|	ЕСТЬNULL(ТехническиеПроекты.Версия, ЕСТЬNULL(ТехническиеПроектыЭтапыНеПоШаблону.Версия, ЗНАЧЕНИЕ(Справочник.ВерсииПроекта.ПустаяСсылка)))               КАК Версия,
	|	ЕСТЬNULL(ТехническиеПроекты.Владелец, ЕСТЬNULL(ТехническиеПроектыЭтапыНеПоШаблону.Владелец, ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)))                 КАК Проект,
	|	ЕСТЬNULL(ТехническиеПроекты.Ссылка, ЕСТЬNULL(ТехническиеПроектыЭтапыНеПоШаблону.Ссылка, ЗНАЧЕНИЕ(Справочник.ТехническиеПроекты.ПустаяСсылка)))          КАК ТехПроект,
	|	ЕСТЬNULL(ЗадачиПроцесса.ПлановаяДатаНачала, &ПустаяДата)                                                                                                КАК ПлановаяДатаНачала,
	|	ЕСТЬNULL(ЗадачиПроцесса.КрайняяДатаОкончания, &ПустаяДата)                                                                                              КАК КрайняяДатаОкончания,
	|	ЕСТЬNULL(ТехническиеПроекты.ПлановаяДатаНачала, ЕСТЬNULL(ТехническиеПроектыЭтапыНеПоШаблону.ПлановаяДатаНачала, &ПустаяДата))                           КАК ПлановаяДатаНачалаТехПроект,
	|	ЕСТЬNULL(ТехническиеПроекты.Статус, ЕСТЬNULL(ТехническиеПроектыЭтапыНеПоШаблону.Статус,ЗНАЧЕНИЕ(Перечисление.СтатусыТехническихПроектов.ПустаяСсылка))) КАК СтатусТехническийПроект,
	|	ЕСТЬNULL(ТехническиеПроекты.ПлановаяДатаОкончания, ЕСТЬNULL(ТехническиеПроектыЭтапыНеПоШаблону.ПлановаяДатаОкончания, &ПустаяДата))                     КАК ПлановаяДатаОкончанияТехПроект,
	|	ЕСТЬNULL(СостоянияЗадачПроцессов.ЗначениеУпорядочивания, 0)                                                                                             КАК ЗначениеУпорядочиванияЭтапа
	|ИЗ
	|	ВыводимыеРаботыПослеОпределенияЗатраченноеВремя КАК ВыводимыеРаботыПослеОпределенияЗатраченноеВремя
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО ВыводимыеРаботыПослеОпределенияЗатраченноеВремя.Сотрудник = Пользователи.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО ВыводимыеРаботыПослеОпределенияЗатраченноеВремя.Работа = ЗадачиПроцесса.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТехническиеПроекты КАК ТехническиеПроекты
	|		ПО (ЗадачиПроцесса.Предмет = ТехническиеПроекты.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТехническиеПроекты КАК ТехническиеПроектыЭтапыНеПоШаблону
	|		ПО (ВыводимыеРаботыПослеОпределенияЗатраченноеВремя.Работа = ТехническиеПроектыЭтапыНеПоШаблону.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗадачПроцессов КАК СостоянияЗадачПроцессов
	|		ПО (ВыводимыеРаботыПослеОпределенияЗатраченноеВремя.Работа =  СостоянияЗадачПроцессов.ЗадачаПроцесса)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТехПроект,
	|	ПлановаяДатаНачалаТехПроект,
	|	ЗначениеУпорядочиванияЭтапа,
	|	Сотрудник
	|ИТОГИ ПО
	|	ТехПроект,
	|	Работа,
	|	Сотрудник";
	
КонецФункции

Функция ПодготовленныеДанныеГруппировкаОтТехПроектов(РезультатЗапроса, ПараметрыФормирования, ТаблицаПланов)
	
	ДанныеОтчета = НовыйПодготовленныеДанныеОтчета(ТаблицаПланов);
	
	ДеревоДанных                     = ДанныеОтчета.ДеревоДанных;
	ИдентификаторыИменаКолонок       = ДанныеОтчета.ИдентификаторыИменаКолонок;
	ДанныеОтчета.ПредставлениеОтбора = ПредставлениеОтбора(ПараметрыФормирования);
	
	ВыборкаТехПроект = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаТехПроект.Следующий() Цикл
		
		СтрокаТехПроект = ДеревоДанных.Строки.Добавить();
		СтрокаТехПроект.ТехническийПроект = ВыборкаТехПроект.ТехПроект;
		
		ВыборкаЭтап = ВыборкаТехПроект.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаЭтап.Следующий() Цикл 
			
			СтрокаЭтап = СтрокаТехПроект.Строки.Добавить();
			СтрокаЭтап.СотрудникРабота = ВыборкаЭтап.Работа;
			
			ВыборкаСотрудник = ВыборкаЭтап.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаСотрудник.Следующий() Цикл
				
				СтрокаСотрудник = СтрокаЭтап.Строки.Добавить();
				СтрокаСотрудник.СотрудникРабота = ВыборкаСотрудник.Сотрудник; 
				
				ВыборкаДетали = ВыборкаСотрудник.Выбрать();
				
				ДополнительныеДанныеУстановлены = Ложь;
				
				Пока ВыборкаДетали.Следующий() Цикл
					
					Если Не ДополнительныеДанныеУстановлены Тогда
						
						СтрокаТехПроект.Версия                            = ВыборкаДетали.Версия;
						СтрокаТехПроект.Проект                            = ВыборкаДетали.Проект;
						СтрокаТехПроект.ДатаНачала                        = ВыборкаДетали.ПлановаяДатаНачалаТехПроект;
						СтрокаТехПроект.ДатаОкончания                     = ВыборкаДетали.ПлановаяДатаОкончанияТехПроект;
						СтрокаТехПроект.Статус                            = ВыборкаДетали.СтатусТехническийПроект;
						
						Если ТипЗнч(СтрокаЭтап.СотрудникРабота) = Тип("СправочникСсылка.ТехническиеПроекты") Тогда
							
							СтрокаЭтап.ДатаНачала                         = ВыборкаДетали.ПлановаяДатаНачалаТехПроект;
							СтрокаЭтап.ДатаОкончания                      = ВыборкаДетали.ПлановаяДатаОкончанияТехПроект;
							СтрокаЭтап.Статус                             = ВыборкаДетали.СтатусТехническийПроект;
							
						Иначе
							
							СтрокаЭтап.ДатаНачала                         = ВыборкаДетали.ПлановаяДатаНачала;
							СтрокаЭтап.ДатаОкончания                      = ВыборкаДетали.КрайняяДатаОкончания;
							СтрокаЭтап.Статус                             = ВыборкаДетали.Статус;
							
						КонецЕсли;
						
						СтрокаСотрудник.ЗапланированоНаНачалоТекущего     = ПланированиеКлиентСервер.ЧасыПоДлительностиВСекундах(ВыборкаДетали.ЗапланированоНаНачалоТекущего);
						СтрокаСотрудник.ПланЗанятостиНеотображаемыйПериод = ВыборкаДетали.ПланируемыеТрудозатратыНеотображаемыхПериодов;
						СтрокаСотрудник.Нераспределено                    = СтрокаСотрудник.ЗапланированоНаНачалоТекущего - СтрокаСотрудник.ПланЗанятостиНеотображаемыйПериод;
						СтрокаСотрудник.ПланЗанятостиМинусФакт            = ПланированиеКлиентСервер.ЧасыПоДлительностиВСекундах(ВыборкаДетали.ПланЗанятостиМинусФактСекунды);
						
						ДополнительныеДанныеУстановлены = Истина;
						
					КонецЕсли;
					
					Для Каждого СтрокаТаблицыПланов Из ТаблицаПланов Цикл
						
						ИменаКолонок = ИдентификаторыИменаКолонок.Получить(СтрокаТаблицыПланов.ИдентификаторПлана);
						
						Если ИменаКолонок = Неопределено Тогда 
							Продолжить;
						КонецЕсли;
						
						Если СтрокаТаблицыПланов.НачалоПериода > ВыборкаДетали.КрайняяДатаОкончания
							Или СтрокаТаблицыПланов.КонецПериода < ВыборкаДетали.ПлановаяДатаНачала Тогда
							
							СтрокаЭтап[ИменаКолонок.ПериодКорректен]      = Ложь;
							СтрокаСотрудник[ИменаКолонок.ПериодКорректен] = Ложь;
							
						Иначе
							
							СтрокаЭтап[ИменаКолонок.ПериодКорректен]      = Истина;
							СтрокаСотрудник[ИменаКолонок.ПериодКорректен] = Истина
							
						КонецЕсли;
						
						Если СтрокаТаблицыПланов.НачалоПериода > ВыборкаДетали.ПлановаяДатаОкончанияТехПроект
							Или СтрокаТаблицыПланов.КонецПериода < ВыборкаДетали.ПлановаяДатаНачалаТехПроект Тогда
							
							СтрокаТехПроект[ИменаКолонок.ПериодКорректен] = Ложь;
							
						Иначе
							
							СтрокаТехПроект[ИменаКолонок.ПериодКорректен] = Истина;
							
						КонецЕсли;
						
						Если (ВыборкаДетали.ПлановаяДатаНачала >= СтрокаТаблицыПланов.НачалоПериода
							И ВыборкаДетали.ПлановаяДатаНачала <= КонецДня(СтрокаТаблицыПланов.КонецПериода))
							Или (ВыборкаДетали.КрайняяДатаОкончания >= СтрокаТаблицыПланов.НачалоПериода
							И ВыборкаДетали.КрайняяДатаОкончания <= КонецДня(СтрокаТаблицыПланов.КонецПериода)) Тогда
							
							ИменаКолонок = ИдентификаторыИменаКолонок.Получить(СтрокаТаблицыПланов.ИдентификаторПлана);
							
							Если ИменаКолонок <> Неопределено Тогда
								СтрокаЭтап[ИменаКолонок.ПериодКорректен]    = Истина;
								СтрокаСотрудник[ИменаКолонок.ПериодКорректен] = Истина
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЦикла;
					
					Если ВыборкаДетали.ИдентификаторПлана <> 0 Тогда
						
						ИменаКолонок = ИдентификаторыИменаКолонок.Получить(ВыборкаДетали.ИдентификаторПлана);
						
						Если ИменаКолонок = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						
						СтрокаСотрудник[ИменаКолонок.ПланЗанятости] = ВыборкаДетали.ПланируемыеТрудозатратыПланЗанятости;
						Если ИменаКолонок.ТипПериода <> СловарьПрошлыйПериодПлана() Тогда
							СтрокаСотрудник.Нераспределено = СтрокаСотрудник.Нераспределено - СтрокаСотрудник[ИменаКолонок.ПланЗанятости];
						КонецЕсли;
						
						Если ИменаКолонок.ТипПериода = СловарьТекущийПериодПлана()
							Или ИменаКолонок.ТипПериода = СловарьПрошлыйПериодПлана() Тогда
							
							СтрокаСотрудник[ИменаКолонок.РабочиеПланы]       = ВыборкаДетали.ПланируемыеТрудозатратыРабочиеПланы;
							СтрокаСотрудник[ИменаКолонок.Факт]               = ПланированиеКлиентСервер.ЧасыПоДлительностиВСекундах(ВыборкаДетали.ФактическиеТрудозатратыСекунды);
							
							Если ИменаКолонок.ТипПериода = СловарьПрошлыйПериодПлана() Тогда
								СтрокаСотрудник.Факт = СтрокаСотрудник.Факт + СтрокаСотрудник[ИменаКолонок.Факт];
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если СтрокаСотрудник.Нераспределено > 0 Тогда
					СтрокаСотрудник.Нераспределено = СтрокаСотрудник.Нераспределено;
				Иначе
					СтрокаСотрудник.Резерв         = - СтрокаСотрудник.Нераспределено;
					СтрокаСотрудник.Нераспределено = 0;
				КонецЕсли;
				
				ПересчитатьМассивКолонокРодительскойСтрокиПоДаннымПодчиненных(СтрокаЭтап, ДанныеОтчета.ИменаКолонокПерерасчетРодители, Ложь);
				
			КонецЦикла;
			
			ПересчитатьМассивКолонокРодительскойСтрокиПоДаннымПодчиненных(СтрокаТехПроект, ДанныеОтчета.ИменаКолонокПерерасчетРодители, Ложь);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ДанныеОтчета;
	
КонецФункции

Процедура ВывестиДанныеВТабличныйДокументОтТехПроектов(РезультатФормированияОтчета, ПодготовленныеДанные, ПараметрыФормирования, ТаблицаПланов)
	
	Макет = Отчеты.КонтрольПланирования.ПолучитьМакет("ОтТехническихПроектов");
	
	ТаблицаОтчета = РезультатФормированияОтчета.ТабличныйДокумент;
	
	УстановитьШапкуОтчета(Макет, ТаблицаОтчета, ПараметрыФормирования, ПодготовленныеДанные);
	УстановитьЛегенду(Макет, ТаблицаОтчета);
	УстановитьШапкуТаблицыОтчета(Макет, ТаблицаОтчета, ПодготовленныеДанные, ПараметрыФормирования, ТаблицаПланов);
	
	ЭтоПоследняяСтрока = Ложь;
	
	Для Каждого СтрокаТехПроект Из ПодготовленныеДанные.ДеревоДанных.Строки Цикл
		
		ВывестиСтрокуТехПроектОтТехПроектов(СтрокаТехПроект, Макет, ТаблицаОтчета, ТаблицаПланов, ПодготовленныеДанные.ИдентификаторыИменаКолонок);
		ТаблицаОтчета.НачатьГруппуСтрок(СтрокаТехПроект.ТехническийПроект);
		
		Для Каждого СтрокаЭтап Из СтрокаТехПроект.Строки Цикл
			
			ВывестиСтрокаЭтапОтТехПроектов(СтрокаЭтап, Макет, ТаблицаОтчета, ТаблицаПланов, ПодготовленныеДанные.ИдентификаторыИменаКолонок);
			ТаблицаОтчета.НачатьГруппуСтрок(СтрокаЭтап.СотрудникРабота);
			
			Для Каждого СтрокаСотрудник Из СтрокаЭтап.Строки Цикл
				
				Если ПодготовленныеДанные.ДеревоДанных.Строки.Индекс(СтрокаТехПроект) = ПодготовленныеДанные.ДеревоДанных.Строки.Количество() - 1
					И СтрокаТехПроект.Строки.Индекс(СтрокаЭтап) = СтрокаТехПроект.Строки.Количество() - 1
					И СтрокаЭтап.Строки.Индекс(СтрокаСотрудник) = СтрокаЭтап.Строки.Количество() - 1 Тогда
					
					ЭтоПоследняяСтрока = Истина;
					
				КонецЕсли;
				
				ВывестиСтрокаCотрудникОтТехПроектов(СтрокаСотрудник,
				                                    Макет, 
				                                    ТаблицаОтчета, 
				                                    ТаблицаПланов, 
				                                    ПодготовленныеДанные.ИдентификаторыИменаКолонок,
				                                    ЭтоПоследняяСтрока);
				
			КонецЦикла;
			
			ТаблицаОтчета.ЗакончитьГруппуСтрок();
			
		КонецЦикла;
		
		ТаблицаОтчета.ЗакончитьГруппуСтрок();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиСтрокаCотрудникОтТехПроектов(СтрокаСотрудник, Макет, ТаблицаОтчета, ТаблицаПланов, ИдентификаторыИменаКолонок, ЭтоПоследняяСтрока)
	
	Область = Макет.ПолучитьОбласть("СтрокаСотрудникПостоянныеКолонки");
	
	Область.Параметры.Сотрудник                   = СтрокаСотрудник.СотрудникРабота;
	Область.Параметры.ОстатокНаДату               = СтрокаСотрудник.ЗапланированоНаНачалоТекущего;
	Область.Параметры.Факт                        = СтрокаСотрудник.Факт;
	Область.Параметры.НераспределеноПланЗанятости = СтрокаСотрудник.Нераспределено;
	Область.Параметры.РезервПланЗанятости         = СтрокаСотрудник.Резерв;
	Область.Параметры.ПланЗанятостиМинусФакт      = СтрокаСотрудник.ПланЗанятостиМинусФакт;
	
	Если ЭтоПоследняяСтрока Тогда
		Область.Области.СтрокаСотрудникПостоянныеКолонки.ГраницаСнизу = ЛинияТолщинаДва();
	КонецЕсли;

	ТаблицаОтчета.Вывести(Область);
	
	Для Каждого СтрокаТаблицыПланов Из ТаблицаПланов Цикл
		
		ДанныеКолонок =  ИдентификаторыИменаКолонок.Получить(СтрокаТаблицыПланов.ИдентификаторПлана);
		
		Если ДанныеКолонок = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеКолонок.ТипПериода = СловарьТекущийПериодПлана()
			Или ДанныеКолонок.ТипПериода = СловарьПрошлыйПериодПлана() Тогда
			
			ИмяОбласти = "СтрокаСотрудникЧетыреКолонки";
			Область = Макет.ПолучитьОбласть(ИмяОбласти);
			
			Область.Параметры.Факт           = СтрокаСотрудник[ДанныеКолонок.Факт];
			Область.Параметры.РабочиеПланы   = СтрокаСотрудник[ДанныеКолонок.РабочиеПланы];
			
			Если СтрокаСотрудник[ДанныеКолонок.РабочиеПланы] <> СтрокаСотрудник[ДанныеКолонок.ПланЗанятости] Тогда
				
				Область.Области.СотрудникРабочиеПланы.ЦветТекста = ЦветаСтиля.ЗонаЗадачиКрасный;
				
			КонецЕсли;
			
			Если ДанныеКолонок.ТипПериода = СловарьПрошлыйПериодПлана() 
				И СтрокаСотрудник[ДанныеКолонок.Факт] <> СтрокаСотрудник[ДанныеКолонок.РабочиеПланы] Тогда
				
				Область.Области.СотрудникФакт.ЦветТекста = ЦветаСтиля.ЗонаЗадачиКрасный;
				
			КонецЕсли;
			
		Иначе
			
			ИмяОбласти = "СтрокаСотрудникОднаКолонка";
			Область = Макет.ПолучитьОбласть(ИмяОбласти);
			
		КонецЕсли;
		
		Если СтрокаСотрудник[ДанныеКолонок.ПериодКорректен] Тогда
			
			Область.Области[ИмяОбласти].ЦветФона = ЦветаСтиля.ЦветФонаВходитВПериодПланирования;
			
		КонецЕсли;
		
		Область.Параметры.ПланЗанятости = СтрокаСотрудник[ДанныеКолонок.ПланЗанятости];
		
		Если ЭтоПоследняяСтрока Тогда
			Область.Области[ИмяОбласти].ГраницаСнизу = ЛинияТолщинаДва();
		КонецЕсли;
		
		ТаблицаОтчета.Присоединить(Область);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиСтрокаЭтапОтТехПроектов(СтрокаЭтап, Макет, ТаблицаОтчета, ТаблицаПланов, ИдентификаторыИменаКолонок)
	
	Область = Макет.ПолучитьОбласть("СтрокаЭтапПостоянныеКолонки");
	
	Если ТипЗнч(СтрокаЭтап.СотрудникРабота) = Тип("СправочникСсылка.ЗадачиПроцесса") Тогда
		
		Этап                        = СтрокаЭтап.СотрудникРабота;
		
	Иначе
		
		Этап                        = НСтр("ru = 'Задачи не по шаблону'");
		
	КонецЕсли;
	
	Область.Параметры.Этап                        = Этап;
	Область.Параметры.ДатаНачала                  = Формат(СтрокаЭтап.ДатаНачала,    "ДФ=dd.MM.yy");
	Область.Параметры.ДатаОкончания               = Формат(СтрокаЭтап.ДатаОкончания, "ДФ=dd.MM.yy");
	Область.Параметры.ОстатокНаДату               = СтрокаЭтап.ЗапланированоНаНачалоТекущего;
	Область.Параметры.Факт                        = СтрокаЭтап.Факт;
	Область.Параметры.НераспределеноПланЗанятости = СтрокаЭтап.Нераспределено;
	Область.Параметры.РезервПланЗанятости         = СтрокаЭтап.Резерв;
	Область.Параметры.ПланЗанятостиМинусФакт      = СтрокаЭтап.ПланЗанятостиМинусФакт;
	
	Если СтрокаЭтап.Статус <> Перечисления.СтатусыЗадачПроцессов.Выполнена
		И НачалоДня(СтрокаЭтап.ДатаОкончания) < НачалоДня(ТекущаяДатаСеанса()) Тогда
		
		Область.Области.ДатаОкончанияЭтапа.ЦветТекста = ЦветаСтиля.ЗонаЗадачиКрасный;
		
	КонецЕсли;
	
	ТаблицаОтчета.Вывести(Область);
	
	Для Каждого СтрокаТаблицыПланов Из ТаблицаПланов Цикл
		
		ДанныеКолонок =  ИдентификаторыИменаКолонок.Получить(СтрокаТаблицыПланов.ИдентификаторПлана);
		
		Если ДанныеКолонок = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеКолонок.ТипПериода = СловарьТекущийПериодПлана()
			Или ДанныеКолонок.ТипПериода = СловарьПрошлыйПериодПлана() Тогда
			
			ИмяОбласти = "СтрокаЭтапЧетыреКолонки";
			Область = Макет.ПолучитьОбласть(ИмяОбласти);
			
			Область.Параметры.Факт           = СтрокаЭтап[ДанныеКолонок.Факт];
			Область.Параметры.РабочиеПланы   = СтрокаЭтап[ДанныеКолонок.РабочиеПланы];
			
			Если СтрокаЭтап[ДанныеКолонок.РабочиеПланы] <> СтрокаЭтап[ДанныеКолонок.ПланЗанятости] Тогда
				
				Область.Области.ЭтапРабочиеПланы.ЦветТекста = ЦветаСтиля.ЗонаЗадачиКрасный;
				
			КонецЕсли;
			
			Если ДанныеКолонок.ТипПериода = СловарьПрошлыйПериодПлана() 
				И СтрокаЭтап[ДанныеКолонок.Факт] <> СтрокаЭтап[ДанныеКолонок.РабочиеПланы] Тогда
				
				Область.Области.ЭтапФакт.ЦветТекста = ЦветаСтиля.ЗонаЗадачиКрасный;
				
			КонецЕсли;
			
		Иначе
			
			ИмяОбласти = "СтрокаТехПроектОднаКолонка";
			Область = Макет.ПолучитьОбласть(ИмяОбласти);
			
		КонецЕсли;
		
		Если СтрокаЭтап[ДанныеКолонок.ПериодКорректен] Тогда
			
			Область.Области[ИмяОбласти].ЦветФона = ЦветаСтиля.ЦветФонаВходитВПериодПланированияСреднееВыделение;
			
		КонецЕсли;
		
		Область.Параметры.ПланЗанятости = СтрокаЭтап[ДанныеКолонок.ПланЗанятости];
		
		ТаблицаОтчета.Присоединить(Область);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиСтрокуТехПроектОтТехПроектов(СтрокаТехПроект, Макет, ТаблицаОтчета, ТаблицаПланов, ИдентификаторыИменаКолонок)
	
	Область = Макет.ПолучитьОбласть("СтрокаТехПроектПостоянныеКолонки");
	
	Область.Параметры.ТехПроект                   = СтрокаТехПроект.ТехническийПроект;
	Область.Параметры.Версия                      = СтрокаТехПроект.Версия;
	Область.Параметры.Проект                      = СтрокаТехПроект.Проект;
	Область.Параметры.ДатаНачала                  = Формат(СтрокаТехПроект.ДатаНачала,    "ДФ=dd.MM.yy");
	Область.Параметры.ДатаОкончания               = Формат(СтрокаТехПроект.ДатаОкончания, "ДФ=dd.MM.yy"); 
	Область.Параметры.ОстатокНаДату               = СтрокаТехПроект.ЗапланированоНаНачалоТекущего;
	Область.Параметры.Факт                        = СтрокаТехПроект.Факт;
	Область.Параметры.НераспределеноПланЗанятости = СтрокаТехПроект.Нераспределено;
	Область.Параметры.РезервПланЗанятости         = СтрокаТехПроект.Резерв;
	Область.Параметры.ПланЗанятостиМинусФакт      = СтрокаТехПроект.ПланЗанятостиМинусФакт;
	
	Если СтрокаТехПроект.Статус <> Перечисления.СтатусыТехническихПроектов.Выполнен
		И НачалоДня(СтрокаТехПроект.ДатаОкончания) < НачалоДня(ТекущаяДатаСеанса()) Тогда
		
		Область.Области.ДатаОкончанияТехПроекта.ЦветТекста = ЦветаСтиля.ЗонаЗадачиКрасный;
		
	КонецЕсли;

	ТаблицаОтчета.Вывести(Область);
	
	Для Каждого СтрокаТаблицыПланов Из ТаблицаПланов Цикл
		
		ДанныеКолонок =  ИдентификаторыИменаКолонок.Получить(СтрокаТаблицыПланов.ИдентификаторПлана);
		
		Если ДанныеКолонок = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеКолонок.ТипПериода = СловарьТекущийПериодПлана()
			Или ДанныеКолонок.ТипПериода = СловарьПрошлыйПериодПлана() Тогда
			
			ИмяОбласти = "СтрокаТехПроектЧетыреКолонки";
			Область = Макет.ПолучитьОбласть(ИмяОбласти);
			
			Область.Параметры.Факт           = СтрокаТехПроект[ДанныеКолонок.Факт];
			Область.Параметры.РабочиеПланы   = СтрокаТехПроект[ДанныеКолонок.РабочиеПланы];
			
			Если СтрокаТехПроект[ДанныеКолонок.РабочиеПланы] <> СтрокаТехПроект[ДанныеКолонок.ПланЗанятости] Тогда
				
				Область.Области.ТехПроектРабочиеПланы.ЦветТекста = ЦветаСтиля.ЗонаЗадачиКрасный;
				
			КонецЕсли;
			
			Если ДанныеКолонок.ТипПериода = СловарьПрошлыйПериодПлана() 
				И СтрокаТехПроект[ДанныеКолонок.Факт] <> СтрокаТехПроект[ДанныеКолонок.РабочиеПланы] Тогда
				
				Область.Области.ТехПроектФакт.ЦветТекста = ЦветаСтиля.ЗонаЗадачиКрасный;
				
			КонецЕсли;
			
		Иначе
			
			ИмяОбласти = "СтрокаТехПроектОднаКолонка";
			Область = Макет.ПолучитьОбласть(ИмяОбласти);
			
		КонецЕсли;
		
		Если СтрокаТехПроект[ДанныеКолонок.ПериодКорректен] Тогда
			
			Область.Области[ИмяОбласти].ЦветФона = ЦветаСтиля.ЦветФонаВходитВПериодПланированияСильноеВыделение;
			
		КонецЕсли;
		
		Область.Параметры.ПланЗанятости = СтрокаТехПроект[ДанныеКолонок.ПланЗанятости];
		
		ТаблицаОтчета.Присоединить(Область);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПараметрыОбластиДанныхШапкиОтчета(ПараметрыФормирования, ПодготовленныеДанные)
	
	ПараметрыОбласти = Новый Структура;
	ПараметрыОбласти.Вставить("ТипГруппировки",      "");
	ПараметрыОбласти.Вставить("ПериодФормирования",  "");
	ПараметрыОбласти.Вставить("ПредставлениеОтбора", "" );
	
	Если ПараметрыФормирования.ВариантГруппировки = "ОтСотрудников" Тогда
		ПараметрыОбласти.ТипГруппировки = НСтр("ru = 'От сотрудников'");
			ИначеЕсли ПараметрыФормирования.ВариантГруппировки = "ОтТехПроектов" Тогда
		ПараметрыОбласти.ТипГруппировки = НСтр("ru = 'От технических проектов'");
	КонецЕсли;

	ПараметрыОбласти.ПериодФормирования  = Строка(ПараметрыФормирования.ПериодОтчета);
	ПараметрыОбласти.ПредставлениеОтбора = ПодготовленныеДанные.ПредставлениеОтбора;
	
	Возврат ПараметрыОбласти;
	
КонецФункции

Функция ЛинияТолщинаДва()
	
	Возврат Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2, Ложь);
	
КонецФункции

#КонецОбласти

#Область ПредставлениеВыводимыхДанных

Функция ПредставлениеОтбора(ПараметрыФормирования)
	
	ТекстПредставления = "";
	
	Если ПараметрыФормирования.ВариантГруппировки = "ОтСотрудников" Тогда
		
		СписокОтбора = ПараметрыФормирования.ОтборПоУчастникам;
		СтрокаСклонения = НСтр("ru = '%1 участник ; %1 участника; ; %1 участников; %1 участников; %1 участников'");
		
	ИначеЕсли ПараметрыФормирования.ВариантГруппировки = "ОтТехПроектов" Тогда
		
		СписокОтбора = ПараметрыФормирования.ОтборПоТехническимПроектам; 
		СтрокаСклонения = НСтр("ru = '%1 тех. проект ; %1 тех. проекта; ; %1 тех. проектов; %1 тех. проектов; %1 тех. проектов'");
		
	КонецЕсли;
		
	Если СписокОтбора.Количество() = 1 Тогда
		
		ТекстПредставления = Строка(СписокОтбора[0].Значение);
		
	ИначеЕсли СписокОтбора.Количество() > 1 Тогда
		
		ЭлементовОбработано = 0;
		
		Для Каждого ЭлементСписка Из СписокОтбора Цикл
			
			Если ЭлементовОбработано > 3 Тогда
				
				КоличествоОсталось = СписокОтбора.Количество() - 3;
				
				ПредставлениеОставшихся = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
					СтрокаСклонения,
					КоличествоОсталось);
				
				ТекстПредставления = ТекстПредставления + " " + СтрШаблон(НСтр("ru = ' и еще %1.'"), ПредставлениеОставшихся);
				
				Прервать;
				
			КонецЕсли;
			
			Если ЭлементовОбработано > 0 Тогда
				
				ТекстПредставления = ТекстПредставления + ", ";
				
			КонецЕсли;
			
			ТекстПредставления = ТекстПредставления + Строка(ЭлементСписка.Значение);
			
			ЭлементовОбработано = ЭлементовОбработано + 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТекстПредставления;
	
КонецФункции

#КонецОбласти

#Область Пересчеты

Процедура РассчитатьЗначениеРодительскойСтрокиПоДаннымПодчиненных(СтрокаДерева, ИмяКолонки) Экспорт
	
	СтрокаДерева[ИмяКолонки] = 0;
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.Строки Цикл
		СтрокаДерева[ИмяКолонки] = СтрокаДерева[ИмяКолонки] + ПодчиненнаяСтрока[ИмяКолонки];
	КонецЦикла;
	
КонецПроцедуры

Процедура ПересчитатьМассивКолонокРодительскихСтрокДереваПоДаннымПодчиненных(Форма, ИмяДерева, МассивИменКолонок) Экспорт
	
	Для Каждого СтрокаВерхнегоУровня Из Форма[ИмяДерева].Строки Цикл
		
		ПересчитатьМассивКолонокРодительскойСтрокиПоДаннымПодчиненных(СтрокаВерхнегоУровня, МассивИменКолонок, Истина);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПересчитатьМассивКолонокРодительскойСтрокиПоДаннымПодчиненных(СтрокаВерхнегоУровня, МассивИменКолонок, ВключаяПодчиненные) Экспорт

	Если ВключаяПодчиненные Тогда
	
		Для Каждого ПодчиненнаяСтрока Из СтрокаВерхнегоУровня.Строки Цикл
			
			Для Каждого ИмяКолонки Из МассивИменКолонок Цикл
				
				РассчитатьЗначениеРодительскойСтрокиПоДаннымПодчиненных(ПодчиненнаяСтрока, ИмяКолонки);
				
			КонецЦикла;
			
		КонецЦикла;
	
	КонецЕсли;
	
	Для Каждого ИмяКолонки Из МассивИменКолонок Цикл
		
		РассчитатьЗначениеРодительскойСтрокиПоДаннымПодчиненных(СтрокаВерхнегоУровня, ИмяКолонки);
		
	КонецЦикла;
	
КонецПроцедуры 

#КонецОбласти 

#Область Словарь

Функция СловарьТекущийПериодПлана()

	Возврат "Текущий";
	
КонецФункции 

Функция СловарьБудующийПериодПлана()

	Возврат "Будующий";
	
КонецФункции

Функция СловарьПрошлыйПериодПлана()

	Возврат "Прошлый";
	
КонецФункции

Функция НовыйСообщениеОбОшибке()
	
	ДанныеСообщения = Новый Структура;
	ДанныеСообщения.Вставить("ТекстОшибки", "");
	ДанныеСообщения.Вставить("ИмяРеквизита","");
	
	Возврат ДанныеСообщения;
	
КонецФункции

Функция ОписаниеТиповСотрудникРабота()
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.Подразделения"));
	МассивТипов.Добавить(Тип("СправочникСсылка.Пользователи"));
	МассивТипов.Добавить(Тип("СправочникСсылка.ЗадачиПроцесса"));
	МассивТипов.Добавить(Тип("СправочникСсылка.ВидыДеятельности"));
	МассивТипов.Добавить(Тип("СправочникСсылка.ТехническиеПроекты"));
	
	Возврат Новый ОписаниеТипов(МассивТипов);
	
КонецФункции

Функция ОписаниеТиповСтатус()
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатусыЗадачПроцессов"));
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатусыТехническихПроектов"));
	
	Возврат Новый ОписаниеТипов(МассивТипов);
	
КонецФункции

#КонецОбласти

#Область ИменаКолонок

Функция ИмяДобавленнойКолонкиПериода(ДеревоДанных, ИдентификаторПлана, ПрефиксКолонки, ИменаКолонок, ОписаниеТипа)
	
	ИмяКолонки = ПрефиксКолонки + "_" + ПланированиеКлиентСервер.ИдентификаторПланаСтрокой(ИдентификаторПлана);
	ДеревоДанных.Колонки.Добавить(ИмяКолонки,ОписаниеТипа);
	ИменаКолонок[ПрефиксКолонки] = ИмяКолонки; 
	
	Возврат ИмяКолонки;
	
КонецФункции

Функция НовыйИменаКолонокПериода()
	
	ИменаКолонок = Новый Структура;
	ИменаКолонок.Вставить("ПланЗанятости",      "");
	ИменаКолонок.Вставить("РабочиеПланы",       "");
	ИменаКолонок.Вставить("Факт",               "");
	ИменаКолонок.Вставить("ЗапланированоЗадач", "");
	ИменаКолонок.Вставить("ПериодКорректен",    Ложь);
	ИменаКолонок.Вставить("ТипПериода",         ""); 

	Возврат ИменаКолонок;
	
КонецФункции

Функция ИмяКолонкиОстатокТекущийПериод(ПодготовленныеДанные, ТаблицаПланов) 
	
	ИмяКолонки = "";
	
	Для Каждого ИменаКолонокПоИдентификатору Из ПодготовленныеДанные.ИдентификаторыИменаКолонок Цикл
		
		Если ИменаКолонокПоИдентификатору.Значение.ТипПериода = СловарьТекущийПериодПлана() Тогда
			
			СтрокаТаблицыПланов = СтрокаТаблицыПлановПоЗначениюКолонки(ТаблицаПланов, "ИдентификаторПлана", ИменаКолонокПоИдентификатору.Ключ);
			
			Если СтрокаТаблицыПланов <> Неопределено Тогда
				
				ИмяКолонки = СтрШаблон(НСтр("ru = 'Остаток на %1'"), Формат(СтрокаТаблицыПланов.НачалоПериода, "ДФ=dd.MM.yy"));
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИмяКолонки;
	
КонецФункции

#КонецОбласти

#Область ТаблицаПланов

Функция ТаблицаПланов(ПараметрыФормирования, ДанныеВидаПлана)
	
	ДанныеПланов = Новый Структура;
	ДанныеПланов.Вставить("ТаблицаПланов",                     Неопределено);
	ДанныеПланов.Вставить("ВидСогласуемогоРесурсаПлановыхРабот", Неопределено);
	
	ПараметрыПолученияПлановПоПериоду = Справочники.ВидыПланов.НовыйПараметрыПолученияДанныхПлановПоПериоду();
	ПараметрыПолученияПлановПоПериоду.ВидПлана              = ПараметрыФормирования.ПланЗанятости;
	ПараметрыПолученияПлановПоПериоду.ДатаНачала            = ПараметрыФормирования.ПериодОтчета.ДатаНачала;
	ПараметрыПолученияПлановПоПериоду.НастройкиПланирования = ДанныеВидаПлана.ВсеНастройкиПланирования[0];
	ПараметрыПолученияПлановПоПериоду.ДатаОкончания         = ПараметрыФормирования.ПериодОтчета.ДатаОкончания;
	
	ТаблицаПланов =  Справочники.ВидыПланов.ДанныеПлановПоЗаданномуПериоду(ПараметрыПолученияПлановПоПериоду);
	
	ДополнитьТаблицуПлановТипомПериода(ТаблицаПланов, ТекущаяДатаСеанса());
	
	ДанныеПланов.ВидСогласуемогоРесурсаПлановыхРабот = ДанныеВидаПлана.ВидСогласуемогоРесурсаПлановыхРабот;
	ДанныеПланов.ТаблицаПланов                       = ТаблицаПланов;
	
	Возврат ДанныеПланов;
	
КонецФункции 

Процедура ДополнитьТаблицуПлановТипомПериода(ТаблицаПланов, ТекущаяДата) 
	
	ТаблицаПланов.Колонки.Добавить("ТипПериода", Новый ОписаниеТипов("Строка"));
	
	Для Каждого СтрокаТаблицы Из ТаблицаПланов Цикл
		
		Если СтрокаТаблицы.НачалоПериода >  ТекущаяДата Тогда
			СтрокаТаблицы.ТипПериода = СловарьБудующийПериодПлана();
		ИначеЕсли СтрокаТаблицы.КонецПериода < ТекущаяДата Тогда
			СтрокаТаблицы.ТипПериода = СловарьПрошлыйПериодПлана();
		Иначе
			СтрокаТаблицы.ТипПериода = СловарьТекущийПериодПлана();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ИдентификаторыОтображаемыхПланов(ТаблицаПланов)
	
	Возврат ТаблицаПланов.ВыгрузитьКолонку("ИдентификаторПлана");
	
КонецФункции

Функция СтрокаТаблицыПлановПоЗначениюКолонки(ТаблицаПланов, ИмяКолонки, Значение) 
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить(ИмяКолонки, Значение);
	
	НайденныеСтроки = ТаблицаПланов.НайтиСтроки(ПараметрыПоиска);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		
		Возврат Неопределено;
		
	Иначе
		
		Возврат НайденныеСтроки[0];
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
