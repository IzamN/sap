#Область ОписаниеПеременных 

&НаКлиенте
Перем ЗакрытиеПодтверждено;
&НаКлиенте
Перем ЗакрытиеФормы;  

#КонецОбласти

#Область ОбработчикиСобытийФормы  

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МесяцРегистрации = Параметры.МесяцРегистрации;
	Объект.Проект = Параметры.Проект;  
	Элементы.Проект.СписокВыбора.ЗагрузитьЗначения(Параметры.МассивПроектов);
	ПроектыСрезПоследних();
	
КонецПроцедуры

&НаСервере
Процедура ПриОткрытииНаСервере()
	Объект.ПериодВводаДанныхОВремени = "Текущий месяц";
	Объект.ДатаНачалаПериода = МесяцРегистрации;
	Объект.ДатаОкончанияПериода = КонецМесяца(МесяцРегистрации); 
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПриОткрытииНаСервере();
	ПериодРегистрацииПриИзменении(); 
	УстановкаДоступаДляРедактированияТабеляУчетаВремени();	
КонецПроцедуры  

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка) 
	ЭтаФорма.Модифицированность = Истина;  
	ЗакрытиеФормы = Истина;  
	СотрудникиСИсправлениями = Объект.СотрудникиСИсправлениями;
	
	Если НЕ ЗакрытиеПодтверждено И НЕ ЗавершениеРаботы И СотрудникиСИсправлениями.Количество() <> 0 Тогда
		Отказ = Истина;
		ПриИзмененииДанныеОВремени();	
	КонецЕсли;
КонецПроцедуры 

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Оповестить("ОбновитьВводПоказателей");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы  

&НаКлиенте
Процедура МесяцРегистрацииПриИзменении(Элемент)
	МесяцРегистрации = НачалоМесяца(МесяцРегистрации);
	ИзменениеПериодаРегистрации();  
	ПриИзмененииДанныеОВремени();
	Элементы.ДанныеОВремени.ВыделенныеСтроки.Очистить();  
	ДатаЗакрытияПоказателей = ПоследняяДатаЗакрытияРедактированияПоказателей();    
	УстановкаДоступаДляРедактированияТабеляУчетаВремени();	
КонецПроцедуры  

&НаКлиенте
Процедура ПроектПриИзменении(Элемент)
	ИзменениеПериодаРегистрации();
	ПриИзмененииДанныеОВремени();
	ОчищениеВыделеннийСтрок();
КонецПроцедуры

&НаКлиенте
Процедура ПериодВводаДанныхОВремениПриИзменении(Элемент)  
	ИзменениеПериодаРегистрации();
	ПриИзмененииДанныеОВремени();
	ОчищениеВыделеннийСтрок(); 
КонецПроцедуры  

&НаКлиенте
Процедура ДатаНачалаПериодаПриИзменении(Элемент)
	Объект.ДатаОкончанияПериода = КонецМесяца(Объект.ДатаНачалаПериода); 
	ПриИзмененииДанныеОВремени();   
	ОчищениеВыделеннийСтрок();
КонецПроцедуры 

&НаКлиенте
Процедура ДатаОкончанияПериодаПриИзменении(Элемент)
	Если Месяц(Объект.ДатаНачалаПериода) <> Месяц(Объект.ДатаОкончанияПериода) Тогда 
		Объект.ДатаОкончанияПериода = КонецМесяца(Объект.ДатаНачалаПериода);
	КонецЕсли;
	ПриИзмененииДанныеОВремени();  
	ОчищениеВыделеннийСтрок();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДанныеОВремени 

&НаКлиенте
Процедура ДанныеОВремениВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка) 	
	
	СтандартнаяОбработка = Ложь;
	
	ИмяКолонки = Элемент.ТекущийЭлемент.Имя;
	Если (ИмяКолонки = "ДанныеОВремениСотрудник" ИЛИ ИмяКолонки = "ДанныеОВремениОрганизация" ИЛИ ИмяКолонки = "ДанныеОВремениНомерСтроки" ИЛИ ИмяКолонки = "ДанныеОВремениВремяИтог") Тогда 
		Возврат;
	КонецЕсли;  
	
	ДанныйТекущейСтроки = Элементы.ДанныеОВремени.ТекущиеДанные;
	
	НомерДня = НомерДняПоПутиЭлемента(); 
		                                                             		
	ПериодРегистрацииДень = Дата(Год(МесяцРегистрации),Месяц(МесяцРегистрации),НомерДня);
	Сотрудник = ДанныйТекущейСтроки.Сотрудник;
	ВремяПредставление = ДанныйТекущейСтроки[ПолучитьИмяКолонки()];
	ВидУчетаВремени = ДанныйТекущейСтроки["ВидВремени" + НомерДня];
	Время = ДанныйТекущейСтроки["Часов" + НомерДня];   	
	
	ПараметрыФормы = Новый Структура("ПериодРегистрацииДень, Сотрудник, ВидУчетаВремени, Время, ВремяПредставление", ПериодРегистрацииДень, Сотрудник, ВидУчетаВремени, Время, ВремяПредставление);    	
	ОткрытьФорму("ОбщаяФорма.ФормаЭлементаУчетВидаВремениЧасов",ПараметрыФормы, Элемент);

КонецПроцедуры 

//Запись изменённых значений в таблицу СотрудникиСИсправлениями
&НаСервере
Процедура ДанныеОВремениОбработкаВыбораНаСервере(ВыбранноеЗначение)
	Если ВыбранноеЗначение.Исправление Тогда
		
		Таблица = Объект.СотрудникиСИсправлениями;
		
		//Удаление предыдущих изменений одной записи
		ПараметрыОтбора = Новый Структура("Сотрудник, ПериодРегистрацииДень", ВыбранноеЗначение.Сотрудник, ВыбранноеЗначение.ПериодРегистрацииДень);
		ИзменённыеСтроки = Таблица.НайтиСтроки(ПараметрыОтбора); 
		Для каждого Строка Из ИзменённыеСтроки Цикл 
			Таблица.Удалить(Строка); 
		КонецЦикла;   
		
		//Добавление новой изменённой записи
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.ПериодРегистрации = МесяцРегистрации;
		НоваяСтрока.Сотрудник = ВыбранноеЗначение.Сотрудник;
		НоваяСтрока.ПериодРегистрацииДень = ВыбранноеЗначение.ПериодРегистрацииДень;
		НоваяСтрока.ВидУчетаВремени = ВыбранноеЗначение.ВидУчетаВремени;
		НоваяСтрока.Часы = ВыбранноеЗначение.Часы; 
				
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДанныеОВремениОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ДанныеОВремениОбработкаВыбораНаСервере(ВыбранноеЗначение);
	ДанныйТекущейСтроки = Элементы.ДанныеОВремени.ТекущиеДанные;
	ДанныйТекущейСтроки[ПолучитьИмяКолонки()] = ВыбранноеЗначение.ВремяПредставление;  
	
	//Изменение данных В табличной части ДанныеОВремени
	НомерДня = НомерДняПоПутиЭлемента(); 
	//ДанныйТекущейСтроки = Элементы.ДанныеОВремени.ТекущиеДанные;
	ДанныйТекущейСтроки["ВидВремени" + НомерДня] = ВыбранноеЗначение.ВидУчетаВремени;
	ДанныйТекущейСтроки["Часов" + НомерДня] = ВыбранноеЗначение.Часы; 

	НомерТекущейСтроки = Элемент.ТекущиеДанные.НомерСтроки; 
	ДанныйТекущейСтроки["ВремяИтог"] = РассчетИтоговПоВидамВремениИЧасам(НомерТекущейСтроки);   
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Записать(Команда)
	ЗаписатьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	ЗаписатьИЗакрытьНаСервере();
	Закрыть();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции 

//Запись в Регистр Сведений ЭП_ДанныеТабельногоУчетаРабочегоВремениСотрудников
&НаСервере
Процедура ЗаписатьНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СотрудникиСИсправлениями.ПериодРегистрации КАК ПериодРегистрации,
	|	СотрудникиСИсправлениями.Сотрудник КАК Сотрудник,
	|	СотрудникиСИсправлениями.ПериодРегистрацииДень КАК ПериодРегистрацииДень,
	|	СотрудникиСИсправлениями.ВидУчетаВремени КАК ВидУчетаВремени,
	|	СотрудникиСИсправлениями.Часы КАК Часы
	|ПОМЕСТИТЬ ВТ_СотрудникиСИсправлениями
	|ИЗ
	|	&СотрудникиСИсправлениями КАК СотрудникиСИсправлениями
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПериодРегистрации,
	|	Сотрудник,
	|	ПериодРегистрацииДень
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СотрудникиСИсправлениями.ПериодРегистрации КАК ПериодРегистрации,
	|	ВТ_СотрудникиСИсправлениями.Сотрудник КАК Сотрудник,
	|	ВТ_СотрудникиСИсправлениями.ПериодРегистрацииДень КАК ПериодРегистрацииДень,
	|	ВТ_СотрудникиСИсправлениями.ВидУчетаВремени КАК ВидУчетаВремени,
	|	ВТ_СотрудникиСИсправлениями.Часы КАК Часы,
	|	ЭП_ДанныеТабельногоУчетаРабочегоВремениСотрудников.ВидУчетаВремени КАК ВидУчетаВремениПредыдущий
	|ИЗ
	|	ВТ_СотрудникиСИсправлениями КАК ВТ_СотрудникиСИсправлениями
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭП_ДанныеТабельногоУчетаРабочегоВремениСотрудников КАК ЭП_ДанныеТабельногоУчетаРабочегоВремениСотрудников
	|		ПО ВТ_СотрудникиСИсправлениями.ПериодРегистрации = ЭП_ДанныеТабельногоУчетаРабочегоВремениСотрудников.ПериодРегистрации
	|			И ВТ_СотрудникиСИсправлениями.Сотрудник = ЭП_ДанныеТабельногоУчетаРабочегоВремениСотрудников.Сотрудник
	|			И ВТ_СотрудникиСИсправлениями.ПериодРегистрацииДень = ЭП_ДанныеТабельногоУчетаРабочегоВремениСотрудников.ПериодРегистрацииДень";
	
	Запрос.УстановитьПараметр("СотрудникиСИсправлениями", Объект.СотрудникиСИсправлениями.Выгрузить());
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить(); 
	
	Если Не РезультатЗапроса.Пустой() Тогда
	
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Запись = РегистрыСведений.ЭП_ДанныеТабельногоУчетаРабочегоВремениСотрудников.СоздатьМенеджерЗаписи();  
					
			Запись.ПериодРегистрации = Выборка.ПериодРегистрации;
			Запись.Сотрудник = Выборка.Сотрудник;
			Запись.ПериодРегистрацииДень = Выборка.ПериодРегистрацииДень;
			Запись.ВидУчетаВремени = Выборка.ВидУчетаВремениПредыдущий;
			
			Запись.Прочитать();
			
			Если Запись.Выбран() Тогда  
				ЗаполнитьЗначенияСвойств(Запись, Выборка);				
				Запись.Записать();
			КонецЕсли;
			
		КонецЦикла; 
		
		УстановитьПривилегированныйРежим(Ложь);	
		
		Объект.СотрудникиСИсправлениями.Очистить();
	
	КонецЕсли;	
	
	Запись = РегистрыСведений.ЭП_УтвержденныеПроекты.СоздатьМенеджерЗаписи();
	Запись.Месяц = МесяцРегистрации;
	Запись.Проект = Объект.Проект;
	Запись.Утвержден = Утвержден;
	Запись.Период = ТекущаяДатаСеанса();
	Запись.Записать();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьИЗакрытьНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СотрудникиСИсправлениями.ПериодРегистрации КАК ПериодРегистрации,
	|	СотрудникиСИсправлениями.Сотрудник КАК Сотрудник,
	|	СотрудникиСИсправлениями.ПериодРегистрацииДень КАК ПериодРегистрацииДень,
	|	СотрудникиСИсправлениями.ВидУчетаВремени КАК ВидУчетаВремени,
	|	СотрудникиСИсправлениями.Часы КАК Часы
	|ПОМЕСТИТЬ ВТ_СотрудникиСИсправлениями
	|ИЗ
	|	&СотрудникиСИсправлениями КАК СотрудникиСИсправлениями
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПериодРегистрации,
	|	Сотрудник,
	|	ПериодРегистрацииДень
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СотрудникиСИсправлениями.ПериодРегистрации КАК ПериодРегистрации,
	|	ВТ_СотрудникиСИсправлениями.Сотрудник КАК Сотрудник,
	|	ВТ_СотрудникиСИсправлениями.ПериодРегистрацииДень КАК ПериодРегистрацииДень,
	|	ВТ_СотрудникиСИсправлениями.ВидУчетаВремени КАК ВидУчетаВремени,
	|	ВТ_СотрудникиСИсправлениями.Часы КАК Часы,
	|	ЭП_ДанныеТабельногоУчетаРабочегоВремениСотрудников.ВидУчетаВремени КАК ВидУчетаВремениПредыдущий
	|ИЗ
	|	ВТ_СотрудникиСИсправлениями КАК ВТ_СотрудникиСИсправлениями
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭП_ДанныеТабельногоУчетаРабочегоВремениСотрудников КАК ЭП_ДанныеТабельногоУчетаРабочегоВремениСотрудников
	|		ПО ВТ_СотрудникиСИсправлениями.ПериодРегистрации = ЭП_ДанныеТабельногоУчетаРабочегоВремениСотрудников.ПериодРегистрации
	|			И ВТ_СотрудникиСИсправлениями.Сотрудник = ЭП_ДанныеТабельногоУчетаРабочегоВремениСотрудников.Сотрудник
	|			И ВТ_СотрудникиСИсправлениями.ПериодРегистрацииДень = ЭП_ДанныеТабельногоУчетаРабочегоВремениСотрудников.ПериодРегистрацииДень";
	
	Запрос.УстановитьПараметр("СотрудникиСИсправлениями", Объект.СотрудникиСИсправлениями.Выгрузить());
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить(); 
	
	Если Не РезультатЗапроса.Пустой() Тогда
	
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Запись = РегистрыСведений.ЭП_ДанныеТабельногоУчетаРабочегоВремениСотрудников.СоздатьМенеджерЗаписи();  
					
			Запись.ПериодРегистрации = Выборка.ПериодРегистрации;
			Запись.Сотрудник = Выборка.Сотрудник;
			Запись.ПериодРегистрацииДень = Выборка.ПериодРегистрацииДень;
			Запись.ВидУчетаВремени = Выборка.ВидУчетаВремениПредыдущий;
			
			Запись.Прочитать();
			
			Если Запись.Выбран() Тогда  
				ЗаполнитьЗначенияСвойств(Запись, Выборка);				
				Запись.Записать();
			КонецЕсли;
			
		КонецЦикла; 
		
		УстановитьПривилегированныйРежим(Ложь);	
		
		Объект.СотрудникиСИсправлениями.Очистить();
	
	КонецЕсли;	
	
	Запись = РегистрыСведений.ЭП_УтвержденныеПроекты.СоздатьМенеджерЗаписи();
	Запись.Месяц = МесяцРегистрации;
	Запись.Проект = Объект.Проект;
	Запись.Утвержден = Утвержден;
	Запись.Период = ТекущаяДатаСеанса();
	Запись.Ответственный = Пользователи.ТекущийПользователь();
	
	Запись.Записать();
		
КонецПроцедуры


&НаКлиенте
Процедура ПериодРегистрацииПриИзменении()
	ЗаполнитьДанныеОВремени();
	ОформитьПоляТаблицыДнейМесяца(НачалоМесяца(Объект.ДатаНачалаПериода), "ДанныеОВремениВремя%1Представление");
	ТабельУстановитьВидимостьКолонокДнейПериода();	
КонецПроцедуры

&НаСервере
// Процедура заполняет заголовки полей таблицы "подневного" ввода данных,
// а также делает невидимыми колонки с 29 по 31 
// в зависимости от количества дней в выбранном месяце.
//
// Параметры:
//	Месяц - дата, начало выбранного месяца.
//	ШаблонИмениПоля - строка, имя поля дня, в котором номер дня обозначен "%1".
//
Процедура ОформитьПоляТаблицыДнейМесяца(Месяц, ШаблонИмениПоля, ПереноситьПредставлениеДня = Истина)
	
	ЦветРабочегоДня = ЦветаСтиля.ЦветТекстаФормы;
	ЦветВыходногоДня = ЦветаСтиля.ЦветОсобогоТекста;
	
	ПоследнийДеньМесяца = КоличествоДнейМесяца(Месяц);
	
	Для НомерДня = 1 По ПоследнийДеньМесяца Цикл
		
		ТекущийДень = Дата(Год(Месяц), Месяц(Месяц), НомерДня);
		
		ДеньНедели = ДеньНедели(ТекущийДень);
		
		Разделить = ?(ПереноситьПредставлениеДня, Символы.ПС, " ");
		
		Элемент = Элементы[СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениПоля, НомерДня)];
		Элемент.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								"%1%2%3", НомерДня, Разделить, Формат(ТекущийДень, "ДФ=ддд"));
		Элемент.ЦветТекстаЗаголовка = ?(ДеньНедели = 6 Или ДеньНедели = 7, ЦветВыходногоДня, ЦветРабочегоДня);
		
	КонецЦикла;		
КонецПроцедуры

&НаСервере
// Функция определяет количество дней в месяце.
//
// Параметры:
//	Дата - любая дата месяца
//
// Возвращаемое значение
//	- число, количество дней в месяце.
//
Функция КоличествоДнейМесяца(Дата) 
	Возврат День(КонецМесяца(Дата));
КонецФункции 

&НаСервере
Процедура ТабельУстановитьВидимостьКолонокДнейПериода()
	ПервыйДеньПериода = День(Объект.ДатаНачалаПериода);
	ПоследнийДеньПериода = День(Объект.ДатаОкончанияПериода);
	
	Для НомерДня = 1 По ПервыйДеньПериода - 1 Цикл
		Элементы["ДанныеОВремениВремя" + НомерДня + "Представление"].Видимость = Ложь;		
	КонецЦикла;	
	
	Для НомерДня = ПервыйДеньПериода По ПоследнийДеньПериода Цикл
		Элементы["ДанныеОВремениВремя" + НомерДня + "Представление"].Видимость = Истина;		
	КонецЦикла;	
	
	Для НомерДня = ПоследнийДеньПериода + 1 По 31 Цикл
		Элементы["ДанныеОВремениВремя" + НомерДня + "Представление"].Видимость = Ложь;		
	КонецЦикла;		
КонецПроцедуры  

// Функция определяет имя колонки текущего элемента.
//
// Возвращаемое значение
//	- строка, имя колонки.
//
&НаСервере
Функция ПолучитьИмяКолонки() 
	
	ПутьКДанным = Элементы.ДанныеОВремени.ТекущийЭлемент.ПутьКДанным;
	ИмяКолонки = СтрЗаменить(ПутьКДанным, "Объект.ДанныеОВремени.", "");
	
	Возврат ИмяКолонки;	
	
КонецФункции

// Функция определяет номер дня текущего элемента.
//
// Возвращаемое значение
//	- строка, номер дня.
//
&НаСервере
Функция НомерДняПоПутиЭлемента()              
	
   РегулярноеВыражение = "\d+";   
   РезультатПоиска = СтрНайтиПоРегулярномуВыражению(Элементы.ДанныеОВремени.ТекущийЭлемент.ПутьКДанным, РегулярноеВыражение);

   Если РезультатПоиска.НачальнаяПозиция <> 0 Тогда    
	   Возврат РезультатПоиска.Значение;
   КонецЕсли;	
	
КонецФункции 

&НаКлиенте
Процедура ИзменениеПериодаРегистрации()  
	
	ПериодВводаДанныхОВремени = Объект.ПериодВводаДанныхОВремени;
	
	 Если ПериодВводаДанныхОВремени = "Текущий месяц" Тогда  
		ДоступностьИзмененияДаты(Ложь);
		Объект.ДатаНачалаПериода = МесяцРегистрации;
		Объект.ДатаОкончанияПериода = КонецМесяца(МесяцРегистрации);
	ИначеЕсли ПериодВводаДанныхОВремени = "Первая половина месяца" Тогда
		ДоступностьИзмененияДаты(Ложь);
		Объект.ДатаНачалаПериода = МесяцРегистрации;
		Объект.ДатаОкончанияПериода = Дата(Год(МесяцРегистрации), Месяц(МесяцРегистрации), 15);
	ИначеЕсли ПериодВводаДанныхОВремени = "Вторая половина месяца" Тогда  
		ДоступностьИзмененияДаты(Ложь);
		Объект.ДатаНачалаПериода = Дата(Год(МесяцРегистрации), Месяц(МесяцРегистрации), 16);
		Объект.ДатаОкончанияПериода = КонецМесяца(МесяцРегистрации);
	Иначе
		ДоступностьИзмененияДаты(Истина);  
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДоступностьИзмененияДаты(Доступность)
	Элементы.ДатаНачалаПериода.Доступность = Доступность;
	Элементы.ДатаОкончанияПериода.Доступность = Доступность;
КонецПроцедуры

&НаКлиенте
Процедура ДиалогСВопросом() 
	
	ТекстВопроса = "Данные были изменены. Сохранить изменения?"; 
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтотОбъект);
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);	
	
КонецПроцедуры  

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда 
		Если ЗакрытиеФормы Тогда
			 ЗакрытиеПодтверждено = Истина;
			 Закрыть();   
		 КонецЕсли;
        ПериодРегистрацииПриИзменении(); 
		Объект.СотрудникиСИсправлениями.Очистить(); 
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда
		 ЗаписатьНаСервере();
		 ПериодРегистрацииПриИзменении(); 
		 Если ЗакрытиеФормы Тогда
			 ЗакрытиеПодтверждено = Истина;
			 Закрыть();   
		 КонецЕсли;
	КонецЕсли;
	 ПериодРегистрацииПриИзменении();
КонецПроцедуры  

&НаКлиенте
Процедура ПриИзмененииДанныеОВремени()
	СотрудникиСИсправлениями = Объект.СотрудникиСИсправлениями;
	Если СотрудникиСИсправлениями.Количество() <> 0 Тогда
		ДиалогСВопросом();
	Иначе
		ПериодРегистрацииПриИзменении();
	КонецЕсли;	
КонецПроцедуры

&НаСервере 
// Функция определяет итоговую запись в текущей строке.
//
// Параметры:
//	НомерТекущейСтроки - номер редактируемой строки
//
// Возвращаемое значение
//	- строка, для заполнения итогов по времени в текущей строке.
//
Функция РассчетИтоговПоВидамВремениИЧасам(НомерТекущейСтроки)
		
	Таблица = Новый ТаблицаЗначений;                     
	Таблица.Колонки.Добавить("ВидУчетаВремени", Новый ОписаниеТипов("СправочникСсылка.ЭП_ВидыУчетаВремени"));
	// добавляем колонку «Количество» с типом «Число», длиной в 9 символов и с точностью в 2 символа
	ФорматЧисла = Новый КвалификаторыЧисла(5, 2);
	ОписаниеТипа = Новый ОписаниеТипов("Число", ФорматЧисла);
	Таблица.Колонки.Добавить("Часы", ОписаниеТипа); 
	
	Строка = Объект.ДанныеОВремени.Получить(НомерТекущейСтроки-1); 
		
	Для НомерДня = 1 По 31 Цикл 
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока["ВидУчетаВремени"] = Строка["ВидВремени" + НомерДня];
		НоваяСтрока["Часы"] = Строка["Часов" + НомерДня];
	КонецЦикла;  
		
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыУчетаВремениЧасы.ВидУчетаВремени КАК ВидУчетаВремени,
		|	ВидыУчетаВремениЧасы.Часы КАК Часы
		|ПОМЕСТИТЬ ВТ_ВидыУчетаВремениЧасы
		|ИЗ
		|	&ВидыУчетаВремениЧасы КАК ВидыУчетаВремениЧасы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ВТ_ВидыУчетаВремениЧасы.ВидУчетаВремени) КАК ВидУчетаВремени,
		|	СУММА(ВТ_ВидыУчетаВремениЧасы.Часы) КАК Часы,
		|	ЭП_ВидыУчетаВремени.БуквенныйКод КАК БуквенныйКод
		|ИЗ
		|	ВТ_ВидыУчетаВремениЧасы КАК ВТ_ВидыУчетаВремениЧасы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭП_ВидыУчетаВремени КАК ЭП_ВидыУчетаВремени
		|		ПО ВТ_ВидыУчетаВремениЧасы.ВидУчетаВремени = ЭП_ВидыУчетаВремени.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ЭП_ВидыУчетаВремени.БуквенныйКод
		|
		|УПОРЯДОЧИТЬ ПО
		|	БуквенныйКод УБЫВ"; 
	
	Запрос.УстановитьПараметр("ВидыУчетаВремениЧасы", Таблица); 
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);

	
	Выборка = РезультатЗапроса.Выбрать(); 
	Итог = "";
	
	Пока Выборка.Следующий() Цикл
		  
			Итог = Итог + СтрШаблон("%1 %2 д. %3 ч.",Выборка.БуквенныйКод, Выборка.ВидУчетаВремени, Выборка.Часы) + Символы.ПС; 

	КонецЦикла;
	                   	
	Возврат Итог;
		
КонецФункции

&НаСервере
//Заполнение таблицы ДанныеОВремени
Процедура ЗаполнитьДанныеОВремени()
		
	Объект.ДанныеОВремени.Очистить(); 
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭП_ЗагруженностьСотрудниковСрезПоследних.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТ_ЗагруженностьСотрудников
	|ИЗ
	|	РегистрСведений.ЭП_ЗагруженностьСотрудников.СрезПоследних(&КонецПериода, Проект = &Проект) КАК ЭП_ЗагруженностьСотрудниковСрезПоследних
	|ГДЕ
	|	ЭП_ЗагруженностьСотрудниковСрезПоследних.ПометкаУдаления = ЛОЖЬ
	|	И ВЫБОР
	|			КОГДА ЭП_ЗагруженностьСотрудниковСрезПоследних.СрокНахожденияВПроекте >= &КонецПериода
	|				ТОГДА ИСТИНА
	|			КОГДА ЭП_ЗагруженностьСотрудниковСрезПоследних.СрокНахожденияВПроекте = &ПустаяДата
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭП_Сотрудники.Ссылка КАК Сотрудник,
	|	ЭП_Сотрудники.Организация КАК Организация,
	|	ЭП_ДанныеТабельногоУчетаРабочегоВремениСотрудников.ВидУчетаВремени КАК ВидУчетаВремени,
	|	ЭП_ВидыУчетаВремени.БуквенныйКод КАК ВидУчетаВремениКод,
	|	ЭП_ДанныеТабельногоУчетаРабочегоВремениСотрудников.ПериодРегистрацииДень КАК ПериодРегистрацииДень,
	|	ЭП_ДанныеТабельногоУчетаРабочегоВремениСотрудников.Часы КАК Часы
	|ИЗ
	|	РегистрСведений.ЭП_ДанныеТабельногоУчетаРабочегоВремениСотрудников КАК ЭП_ДанныеТабельногоУчетаРабочегоВремениСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭП_Сотрудники КАК ЭП_Сотрудники
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЗагруженностьСотрудников КАК ВТ_ЗагруженностьСотрудников
	|			ПО (ВТ_ЗагруженностьСотрудников.Сотрудник = ЭП_Сотрудники.Ссылка)
	|		ПО ЭП_ДанныеТабельногоУчетаРабочегоВремениСотрудников.Сотрудник = ЭП_Сотрудники.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭП_ВидыУчетаВремени КАК ЭП_ВидыУчетаВремени
	|		ПО ЭП_ДанныеТабельногоУчетаРабочегоВремениСотрудников.ВидУчетаВремени = ЭП_ВидыУчетаВремени.Ссылка
	|ГДЕ
	|	ЭП_ДанныеТабельногоУчетаРабочегоВремениСотрудников.ПериодРегистрацииДень МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ЭП_Сотрудники.КОД_ЗУП = """"
	|	И НЕ ЭП_Сотрудники.ДоговорГПХ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидУчетаВремениКод УБЫВ
	|ИТОГИ
	|	МАКСИМУМ(Организация),
	|	МАКСИМУМ(ВидУчетаВремениКод),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПериодРегистрацииДень),
	|	СУММА(Часы)
	|ПО
	|	Сотрудник,
	|	ВидУчетаВремени";
	
	Запрос.УстановитьПараметр("Проект", Объект.Проект);   
	Запрос.УстановитьПараметр("КонецПериода", Объект.ДатаОкончанияПериода);
	Запрос.УстановитьПараметр("НачалоПериода", Объект.ДатаНачалаПериода);
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1,1,1));
	

	УстановитьПривилегированныйРежим(Истина);	
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);

	
	ВыборкаСотрудник = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
	
	Таблица = Объект.ДанныеОВремени;
	
	Пока ВыборкаСотрудник.Следующий() Цикл
		
		НоваяСтрока = Таблица.Добавить();      
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаСотрудник); 
		Итог = "";
		
		ВыборкаВидУчетаВремени = ВыборкаСотрудник.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
		Пока ВыборкаВидУчетаВремени.Следующий() Цикл 
			
			Итог = Итог + СтрШаблон("%1 %2 д. %3 ч.",ВыборкаВидУчетаВремени.ВидУчетаВремениКод, ВыборкаВидУчетаВремени.ПериодРегистрацииДень, ВыборкаВидУчетаВремени.Часы) + Символы.ПС; 
						
			ВыборкаДетальныеЗаписи = ВыборкаВидУчетаВремени.Выбрать();
	
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				НомерДня = День(ВыборкаДетальныеЗаписи.ПериодРегистрацииДень); 
			
				ВидВремени = "ВидВремени" + НомерДня; 
				Часов = "Часов" + НомерДня; 
				ВремяПредставление = "Время" + НомерДня + "Представление";
				
				
				НоваяСтрока[ВидВремени] = ВыборкаДетальныеЗаписи.ВидУчетаВремени;
				НоваяСтрока[Часов] = ВыборкаДетальныеЗаписи.Часы;        
				НоваяСтрока[ВремяПредставление] = СтрШаблон("%1; %2", ВыборкаДетальныеЗаписи.ВидУчетаВремениКод, ВыборкаДетальныеЗаписи.Часы);
				
			КонецЦикла;
		КонецЦикла;
		
		НоваяСтрока.ВремяИтог = Итог;
		
	КонецЦикла;
		
	Таблица.Сортировать("Сотрудник ВОЗР");
		
КонецПроцедуры 

//Получение последней даты редактирования показателей
&НаСервере
Функция ПоследняяДатаЗакрытияРедактированияПоказателей() 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(МАКСИМУМ(ЭП_ДатыЗакрытияРедактированияПоказателейСрезПоследних.Период), 0) КАК Период
		|ИЗ
		|	РегистрСведений.ЭП_ДатыЗакрытияРедактированияПоказателей.СрезПоследних КАК ЭП_ДатыЗакрытияРедактированияПоказателейСрезПоследних";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить(); 
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ДатаЗакрытияПоказателей = Выборка.Период;
	Иначе
		ДатаЗакрытияПоказателей = 0;
	КонецЕсли;
	
	Возврат ДатаЗакрытияПоказателей;
	
КонецФункции

&НаКлиенте
Процедура ДоступностьКолонок(ТаблицаФормы, Доступ)
	
	Для Каждого ПодчиненныйЭлемент Из ТаблицаФормы.ПодчиненныеЭлементы Цикл 
		ПодчиненныйЭлемент.Доступность = Доступ;  
		//ПодчиненныйЭлемент.ТолькоПросмотр = Не Доступ;
        Элементы.ДанныеОВремени.РежимВыделения = РежимВыделенияТаблицы.Одиночный;
	КонецЦикла;
	
КонецПроцедуры 

// Очищение выделения строк
&НаКлиенте
Процедура ОчищениеВыделеннийСтрок()
	Элементы.ДанныеОВремени.ВыделенныеСтроки.Очистить(); 
КонецПроцедуры 

&НаКлиенте
Процедура УстановкаДоступаДляРедактированияТабеляУчетаВремени()
	
	ДатаЗакрытияПоказателей = ПоследняяДатаЗакрытияРедактированияПоказателей();
	
	Если ДатаЗакрытияПоказателей <> 0 Тогда
		Если ДатаЗакрытияПоказателей >= МесяцРегистрации Тогда
			Элементы.Записать.Доступность = Ложь;  
			ДоступностьКолонок(Элементы.ДанныеОВремени, Ложь);  
			ОчищениеВыделеннийСтрок();
		Иначе 
			Элементы.Записать.Доступность = Истина; 
			ДоступностьКолонок(Элементы.ДанныеОВремени, Истина);	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроектыСрезПоследних()

	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ
	              |	ЭП_УтвержденныеПроектыСрезПоследних.Проект КАК Проект
	              |ИЗ
	              |	РегистрСведений.ЭП_УтвержденныеПроекты.СрезПоследних(
	              |			,
	              |			Проект = &Проект
	              |				И Месяц = &Месяц) КАК ЭП_УтвержденныеПроектыСрезПоследних
	              |ГДЕ
	              |	ЭП_УтвержденныеПроектыСрезПоследних.Утвержден";
	Запрос.УстановитьПараметр("Месяц", МесяцРегистрации);
	Запрос.УстановитьПараметр("Проект", Объект.Проект);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Объект.Проект = Выборка.Проект Тогда
			Утвержден = Истина;
		Иначе
			Утвержден = Ложь;
		КонецЕсли;	
	КонецЦикла;	

КонецПроцедуры 

#КонецОбласти   


ЗакрытиеПодтверждено = Ложь;
ЗакрытиеФормы = Ложь;    

