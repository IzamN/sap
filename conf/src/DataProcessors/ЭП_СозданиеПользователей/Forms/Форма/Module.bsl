
#Область ОписаниеПеременных

&НаСервере
Перем ГруппаДоступаАдминистраторы;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЗаполнитьСписокПользователей();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокГруппДоступа

&НаКлиенте
Процедура СписокГруппДоступаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПользовательГрупп", ПользователиКлиент.ТекущийПользователь());
	
	ОткрытьФорму("Справочник.ГруппыДоступа.Форма.ВыборПоОтветственному", ПараметрыФормы, ЭтотОбъект,
		,,, Новый ОписаниеОповещения("СписокГруппДоступаДобавление_Завершение", ЭтотОбъект, Истина));

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьСписок(Команда)
	ОбновитьСписокНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометку(Команда)
	Для Каждого ИдентификаторСтроки Из Элементы.СписокПользователей.ВыделенныеСтроки Цикл
		СтрокаСписка = Элементы.СписокПользователей.ДанныеСтроки(ИдентификаторСтроки);
		Если СтрокаСписка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаСписка.Пометка = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометку(Команда)
	Для Каждого ИдентификаторСтроки Из Элементы.СписокПользователей.ВыделенныеСтроки Цикл
		СтрокаСписка = Элементы.СписокПользователей.ДанныеСтроки(ИдентификаторСтроки);
		Если СтрокаСписка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаСписка.Пометка = Ложь;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПользователей(Команда)
	ОчиститьСообщения();
	
	Если ПустаяСтрока(ПарольПоУмолчанию) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = '""Пароль по умолчанию"" не задан'"),, "ПарольПоУмолчанию");
		Возврат;
	КонецЕсли;
	
	Если СписокГруппДоступа.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = '""Группы доступа"" не заданы'"),, "СписокГруппДоступа");
		Возврат;
	КонецЕсли;
	
	СоздатьПользователейНаСервере();
	ЗаполнитьСписокПользователей();
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьСписокНаСервере()
	ЗаполнитьСписокПользователей();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокПользователей()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Пользователь,
	|	ЭП_Сотрудники.Ссылка КАК Сотрудник,
	|	ЛОЖЬ КАК Пометка
	|ИЗ
	|	Справочник.ЭП_Сотрудники КАК ЭП_Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО ЭП_Сотрудники.Ссылка = Пользователи.ЭП_Сотрудник
	|ГДЕ
	|	НЕ ЭП_Сотрудники.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выгрузка = РезультатЗапроса.Выгрузить();
	
	СписокПользователей.Загрузить(Выгрузка);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьПользователейНаСервере()
	Отбор = Новый Структура(
		"Пометка, Пользователь", Истина, Справочники.Пользователи.ПустаяСсылка());
	Сотрудники = СписокПользователей.Выгрузить(Отбор, "Сотрудник").ВыгрузитьКолонку("Сотрудник");
	
	Если Сотрудники.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПользователей = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Сотрудники, "Фамилия, Имя, Отчество");
	
	ГруппаДоступаАдминистраторы = УправлениеДоступом.ГруппаДоступаАдминистраторы();
	
	Для Каждого Сотрудник Из Сотрудники Цикл
		
		НачатьТранзакцию();
		Попытка
			Пользователь = СоздатьПользователя(ИменаПользователей.Получить(Сотрудник), Сотрудник);
			
			Для Каждого СтрокаГруппы Из СписокГруппДоступа Цикл
				ОписаниеОшибки = "";
	
				ИзменитьСоставГруппы(
					СтрокаГруппы.ГруппаДоступа,
					Истина,
					Пользователь,
					ОписаниеОшибки);
					
				Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
					ВызватьИсключение ОписаниеОшибки;
				КонецЕсли;
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Ошибка генерации пользователя по сотруднику ""%1""'"), Сотрудник));
			
			ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(
				НСтр("ru = 'Создание пользователей для сотрудников'"),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.Пользователи,
				Сотрудник,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СоздатьПользователя(ФИОПользователя, Сотрудник)
	
	Фамилия =	ФИОПользователя.Фамилия;
	Имя =		ФИОПользователя.Имя;
	Отчество =	ФИОПользователя.Отчество;
	
	ПолноеИмя =					Фамилия + " " + Имя + " " + Отчество;
	ИмяПользователяДляВхода =	Фамилия + Лев(Имя,1) + Лев(Отчество, 1);
	
	ВходВПрограммуРазрешен =	Истина;
	АутентификацияСтандартная = Истина;
	АутентификацияWindows =		Ложь;
	ЗапрещеноИзменятьПароль =	Ложь;
	ПоказыватьВСпискеВыбора =	Ложь;
	
	//Создаем пользователя
	ОбновляемыеСвойства = Пользователи.НовоеОписаниеПользователяИБ();
	ОбновляемыеСвойства.Вставить("Действие",					"Записать");
	ОбновляемыеСвойства.Вставить("ВходВПрограммуРазрешен",		ВходВПрограммуРазрешен); 
	ОбновляемыеСвойства.Вставить("Имя", 						ИмяПользователяДляВхода); 
	ОбновляемыеСвойства.Вставить("ПолноеИмя",					ПолноеИмя); 
	ОбновляемыеСвойства.Вставить("АутентификацияOpenID",		Ложь); 
	ОбновляемыеСвойства.Вставить("АутентификацияСтандартная",	АутентификацияСтандартная); 
	ОбновляемыеСвойства.Вставить("АутентификацияWindows",		АутентификацияWindows); 
	ОбновляемыеСвойства.Вставить("Пароль",						ПарольПоУмолчанию); 
	ОбновляемыеСвойства.Вставить("ПарольУстановлен",				Истина); 
	ОбновляемыеСвойства.Вставить("ЗапрещеноИзменятьПароль",			ЗапрещеноИзменятьПароль); 
	ОбновляемыеСвойства.Вставить("ПоказыватьВСпискеВыбора",			ПоказыватьВСпискеВыбора);
	ОбновляемыеСвойства.Вставить("ПотребоватьСменуПароляПриВходе",	Истина); 
	
	ПользовательИБСуществует =
		ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователяДляВхода) <> Неопределено;
	
	Пользователи.УстановитьСвойстваПользователяИБ(
		ИмяПользователяДляВхода, ОбновляемыеСвойства, НЕ ПользовательИБСуществует);
	
	Пользователь = Справочники.Пользователи.НайтиПоНаименованию(ОбновляемыеСвойства.ПолноеИмя, истина);
	ПользовательСуществует = ЗначениеЗаполнено(Пользователь);
	
	Если ПользовательСуществует Тогда
		ВызватьИсключение "Пользователь для сотрудника уже существует";
	КонецЕсли;
	
	ПользовательОбъект = Справочники.Пользователи.СоздатьЭлемент();	
	ПользовательОбъект.Наименование = ОбновляемыеСвойства.ПолноеИмя;
	ПользовательОбъект.ЭП_Сотрудник = Сотрудник;
	
	ПользовательОбъект.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОбновляемыеСвойства);
	
	ПользовательОбъект.Записать();	
	
	Пользователь = ПользовательОбъект.Ссылка;
	
	Возврат Пользователь
	
КонецФункции
	
&НаКлиенте
Процедура СписокГруппДоступаДобавление_Завершение(ГруппаДоступа, ВключитьВГруппуДоступа) Экспорт
	
	Если ТипЗнч(ГруппаДоступа) <> Тип("СправочникСсылка.ГруппыДоступа")
	  ИЛИ НЕ ЗначениеЗаполнено(ГруппаДоступа) Тогда
		
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = СписокГруппДоступа.Добавить();
	НоваяСтрока.ГруппаДоступа = ГруппаДоступа;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьСоставГруппы(Знач ГруппаДоступа, Знач Добавить, Знач Пользователь, ОписаниеОшибки = "")
	
	Если НЕ РазрешеноИзменениеСоставаПользователейГруппы(ГруппаДоступа) Тогда
		Если Добавить Тогда
			ОписаниеОшибки =
				НСтр("ru = 'Недостаточно прав для включения пользователя в группу доступа,
				           |(не ответственный за участников группы доступа или нет прав администратора).'");
		Иначе
			ОписаниеОшибки =
				НСтр("ru = 'Недостаточно прав для исключения пользователя из группы доступа,
				           |(не ответственный за участников группы доступа или нет прав администратора).'");
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.РазделениеВключено()
	   И ГруппаДоступа = ГруппаДоступаАдминистраторы
	   И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ПользователиВМоделиСервиса") Тогда
		
		МодульПользователиСлужебныйВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ПользователиСлужебныйВМоделиСервиса");
		ДействияСПользователемСервиса = МодульПользователиСлужебныйВМоделиСервиса.ПолучитьДействияСПользователемСервиса();
		
		Если НЕ ДействияСПользователемСервиса.ИзменениеАдминистративногоДоступа Тогда
			ВызватьИсключение
				НСтр("ru = 'Недостаточно прав доступа для изменения состава администраторов.'");
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.ГруппыДоступа");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ГруппаДоступа);
		Блокировка.Заблокировать();
		
		ГруппаДоступаОбъект = ГруппаДоступа.ПолучитьОбъект();
		ЗаблокироватьДанныеДляРедактирования(ГруппаДоступаОбъект.Ссылка, ГруппаДоступаОбъект.ВерсияДанных);
		Если Добавить Тогда
			Если ГруппаДоступаОбъект.Пользователи.Найти(Пользователь, "Пользователь") = Неопределено Тогда
				ГруппаДоступаОбъект.Пользователи.Добавить().Пользователь = Пользователь;
			КонецЕсли;
		Иначе
			СтрокаТЧ = ГруппаДоступаОбъект.Пользователи.Найти(Пользователь, "Пользователь");
			Если СтрокаТЧ <> Неопределено Тогда
				ГруппаДоступаОбъект.Пользователи.Удалить(СтрокаТЧ);
			КонецЕсли;
		КонецЕсли;
		
		Если ГруппаДоступаОбъект.Ссылка = ГруппаДоступаАдминистраторы Тогда
			
			УправлениеДоступомСлужебный.ПроверитьНаличиеПользователяИБВГруппеДоступаАдминистраторы(
				ГруппаДоступаОбъект.Пользователи, ОписаниеОшибки);
			
			Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
				ОтменитьТранзакцию();
				РазблокироватьДанныеДляРедактирования(ГруппаДоступаОбъект.Ссылка);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		ГруппаДоступаОбъект.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		РазблокироватьДанныеДляРедактирования(ГруппаДоступаОбъект.Ссылка);
		ВызватьИсключение;
	КонецПопытки;
	
	РазблокироватьДанныеДляРедактирования(ГруппаДоступаОбъект.Ссылка);
	ТекущаяГруппаДоступа = ГруппаДоступаОбъект.Ссылка;
	УправлениеДоступомСлужебный.ЗапуститьОбновлениеДоступа();
	
КонецПроцедуры

&НаСервере
Функция РазрешеноИзменениеСоставаПользователейГруппы(ГруппаДоступа)
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГруппаДоступа",              ГруппаДоступа);
	Запрос.УстановитьПараметр("АвторизованныйПользователь", Пользователи.АвторизованныйПользователь());
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	Справочник.ГруппыДоступа КАК ГруппыДоступа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|		ПО (СоставыГруппПользователей.Пользователь = &АвторизованныйПользователь)
	|			И (СоставыГруппПользователей.ГруппаПользователей = ГруппыДоступа.Ответственный)
	|			И (ГруппыДоступа.Ссылка = &ГруппаДоступа)";
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

#КонецОбласти
