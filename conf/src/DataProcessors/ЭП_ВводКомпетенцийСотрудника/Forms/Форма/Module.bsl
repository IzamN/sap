

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Параметры.Свойство("Сотрудник", Сотрудник);

	ДатаВвода = ТекущаяДата();
	СрокОбновления = ДобавитьМесяц(ДатаВвода, 12); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ЗаполнитьДеревоКомпетенций();
КонецПроцедуры

&НаКлиенте
Процедура ДатаВводаПриИзменении(Элемент)
	СрокОбновления = ДобавитьМесяц(ДатаВвода, 12); 
КонецПроцедуры 


&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	ЗаполнитьДеревоКомпетенций();
КонецПроцедуры

 &НаКлиенте
Процедура Перечитать(Команда)
	ЗаполнитьДеревоКомпетенций();
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписатьИЗакрыть(Команда)
	ЗаписатьИзменения(Истина);
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписать(Команда) 
	ЗаписатьИзменения(Ложь);
КонецПроцедуры


&НаКлиенте
Процедура ДеревоКомпетенцийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанные = Элемент.ДанныеСтроки(ВыбраннаяСтрока);
	Если Поле = Элементы.ДеревоКомпетенцийВидКомпетенций Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(,ТекущиеДанные.ВидКомпетенций);
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ДеревоКомпетенцийНовоеЗначениеОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Элементы.ДеревоКомпетенций.ТекущиеДанные.НовоеЗначение = Null;
КонецПроцедуры


&НаКлиенте
Процедура ДеревоКомпетенцийПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекущиеДанные = Элемент.ТекущиеДанные; 
	ПредыдущееЗначение = ТекущиеДанные.НовоеЗначение;
	Если ТипЗнч(ТекущиеДанные.НовоеЗначение) <> Тип("Число") Тогда
		ТекущиеДанные.НовоеЗначение = 0;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ДеревоКомпетенцийПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	ТекущиеДанные = Элемент.ТекущиеДанные; 
	Если ОтменаРедактирования Тогда
		ТекущиеДанные.НовоеЗначение = ПредыдущееЗначение;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьДеревоКомпетенций()
	
	ЗаполнитьДеревоКомпетенцийНаСервере();
	
	Для Каждого СтрокаДерева Из ДеревоКомпетенций.ПолучитьЭлементы() Цикл
		Элементы.ДеревоКомпетенций.Развернуть(СтрокаДерева.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьДеревоКомпетенцийНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭП_ВидыКомпетенцийСотрудников.Ссылка КАК Ссылка,
	|	ЭП_ВидыКомпетенцийСотрудников.Обязательный КАК Обязательный,
	|	ЭП_ВидыКомпетенцийСотрудников.ЭтоГруппа КАК ЭтоГруппа
	|ПОМЕСТИТЬ ВТ_ВидыКомпетенций
	|ИЗ
	|	Справочник.ЭП_ВидыКомпетенцийСотрудников КАК ЭП_ВидыКомпетенцийСотрудников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ВидыКомпетенций.Ссылка КАК ВидКомпетенций,
	|	ЭП_КомпетенцииСотрудниковСрезПоследних.Значение КАК ТекущееЗначение,
	|	ЭП_КомпетенцииСотрудниковСрезПоследних.Значение КАК НовоеЗначение,
	|	ВТ_ВидыКомпетенций.Обязательный КАК Обязательный,
	|	ВТ_ВидыКомпетенций.ЭтоГруппа КАК ЭтоГруппа
	|ИЗ
	|	ВТ_ВидыКомпетенций КАК ВТ_ВидыКомпетенций
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭП_КомпетенцииСотрудников.СрезПоследних(
	|				,
	|				ВидКомпетенции В
	|						(ВЫБРАТЬ
	|							ВТ_ВидыКомпетенций.Ссылка КАК Ссылка
	|						ИЗ
	|							ВТ_ВидыКомпетенций КАК ВТ_ВидыКомпетенций)
	|					И Сотрудник = &Сотрудник) КАК ЭП_КомпетенцииСотрудниковСрезПоследних
	|		ПО ВТ_ВидыКомпетенций.Ссылка = ЭП_КомпетенцииСотрудниковСрезПоследних.ВидКомпетенции
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_ВидыКомпетенций.Ссылка ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	РезультатЗапроса = Запрос.Выполнить();
	Выгрузка = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ЗначениеВРеквизитФормы(Выгрузка ,"ДеревоКомпетенций");
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИзменения(Закрыть = Ложь)
	
	ЗаписатьНаСервере();		
	ЗаполнитьДеревоКомпетенций();
	
	Если Закрыть
		Тогда Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНаСервере()
 
	ДеревоЗначений = РеквизитФормыВЗначение("ДеревоКомпетенций", Тип("ДеревоЗначений"));
	СтрокиДерева = ДеревоЗначений.Строки.НайтиСтроки(Новый Структура("ЭтоГруппа", Ложь), Истина);
	Если Не ПроверитьОбязательноеЗаполнение(СтрокиДерева) Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка 
		ЗаписатьКомпетенции(СтрокиДерева);
		ЗаписатьСобытиеСотрудника();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение(ОписаниеОшибки());
	КонецПопытки;
	ЗафиксироватьТранзакцию();
	Модифицированность = Ложь;
 
КонецПроцедуры

      

&НаСервереБезКонтекста
Функция ПроверитьОбязательноеЗаполнение(СтрокиДерева) 
 
	Для Каждого Строка Из СтрокиДерева Цикл
		Если Строка.Обязательный
			И ТипЗнч(Строка.НовоеЗначение) <> Тип("Число") Тогда
			ОбщегоНазначения.СообщитьПользователю("Не заполнены обязательные виды компетенций!");
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции


&НаСервере
Процедура ЗаписатьКомпетенции(СтрокиДерева)

	НаборЗаписей = РегистрыСведений.ЭП_КомпетенцииСотрудников.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(ДатаВвода);
	НаборЗаписей.Отбор.Сотрудник.Установить(Сотрудник);

	Для Каждого Строка Из СтрокиДерева Цикл
		Если ТипЗнч(Строка.НовоеЗначение) <> Тип("Число") Тогда
			Продолжить;
		КонецЕсли;
		
		Запись = НаборЗаписей.Добавить();
		Запись.Период = ДатаВвода; 
		Запись.Сотрудник = Сотрудник;
		Запись.ВидКомпетенции = Строка.ВидКомпетенций;
		Запись.Значение = Строка.НовоеЗначение;
		
	КонецЦикла;
	
	НаборЗаписей.Записать();
 
КонецПроцедуры 



&НаСервере
Процедура ЗаписатьСобытиеСотрудника()
	
	РегЗапись = РегистрыСведений.ЭП_СобытияСотрудников.СоздатьМенеджерЗаписи();
	РегЗапись.Сотрудник = Сотрудник;
	РегЗапись.ВидСобытия = Справочники.ЭП_ВидыСобытийСотрудников.ОбновитьКомпетенцииСотрудника;
	РегЗапись.ДатаСобытия = СрокОбновления;
	РегЗапись.Записать();
 
КонецПроцедуры







