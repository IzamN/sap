#Область ОбработчикиСобытийФормы 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)  
	
	Элементы.ВидЗадачиПоУмолчанию.СписокВыбора.Добавить("Разработка","Разработка");
	Элементы.ВидЗадачиПоУмолчанию.СписокВыбора.Добавить("Анализ","Анализ");
	Элементы.СтатусПоУмолчанию.СписокВыбора.Добавить("В разработке","В разработке");
	Элементы.СтатусПоУмолчанию.СписокВыбора.Добавить("В анализе","В анализе");
	Элементы.НаборЗадачЗадача.СписокВыбора.Добавить("Разработка","Разработка");
	Элементы.НаборЗадачЗадача.СписокВыбора.Добавить("Анализ","Анализ");
	Элементы.НаборыСтатусовСтатус.СписокВыбора.Добавить("В разработке","В разработке");
	Элементы.НаборыСтатусовСтатус.СписокВыбора.Добавить("В анализе","В анализе"); 
	
	Элементы.КнопкаНазад.Видимость = Ложь; 
	
	Элементы.Переместить(Элементы.НаборыСтатусовДобавить, Элементы.НаборыСтатусов.КоманднаяПанель
		, Элементы.НаборыСтатусов.КоманднаяПанель.ПодчиненныеЭлементы[0]);
	Элементы.Переместить(Элементы.НаборЗадачДобавить, Элементы.НаборЗадач.КоманднаяПанель
		, Элементы.НаборЗадач.КоманднаяПанель.ПодчиненныеЭлементы[0]);  
	Элементы.Переместить(Элементы.ТегиПроектаДобавить, Элементы.ТегиПроекта.КоманднаяПанель
		, Элементы.ТегиПроекта.КоманднаяПанель.ПодчиненныеЭлементы[0]); 
	Элементы.Переместить(Элементы.ОценкаПЗКДобавить, Элементы.ОценкаПЗК.КоманднаяПанель
		, Элементы.ОценкаПЗК.КоманднаяПанель.ПодчиненныеЭлементы[0]);
	Элементы.Переместить(Элементы.тчКлючевыеСотрудникиДобавить, Элементы.тчКлючевыеСотрудники.КоманднаяПанель
		, Элементы.тчКлючевыеСотрудники.КоманднаяПанель.ПодчиненныеЭлементы[0]); 
	Элементы.Переместить(Элементы.СотрудникиФактДобавить, Элементы.СотрудникиФакт.КоманднаяПанель
		, Элементы.СотрудникиФакт.КоманднаяПанель.ПодчиненныеЭлементы[0]); 
	Элементы.Переместить(Элементы.СотрудникиПланДобавить, Элементы.СотрудникиПлан.КоманднаяПанель
		, Элементы.СотрудникиПлан.КоманднаяПанель.ПодчиненныеЭлементы[0]);	
		
	Если Параметры.Свойство("НастройкаПроекта") = Истина Тогда
		
		НастройкаПроекта = Параметры.НастройкаПроекта;  
		Элементы.КнопкаДалее.КнопкаПоУмолчанию = Ложь;
		Элементы.НастройкаСтатусов.Видимость = Истина;
		Элементы.Страницы.ТекущаяСтраница = Элементы.НастройкаСтатусов;
		Элементы.ОсновнаяСтраница.Видимость = Ложь;
		Элементы.ГруппаПереходов.Видимость = Истина;
		Элементы.КнопкаСохранить.Видимость = Истина;
		Элементы.КнопкаСтатусы.Видимость = Истина;
		Элементы.КнопкаСтатусы.Доступность = Ложь;
		Элементы.КнопкаТеги.Видимость = Истина;
		Элементы.КнопкаЗадачи.Видимость = Истина;
		Элементы.КнопкаОценка.Видимость = Истина;
		Элементы.КнопкаСотрудники.Видимость = Истина;
		Элементы.КнопкаКлючевыеСотрудники.Видимость = Истина;  
		Элементы.ВидыЗадачи.Видимость = Истина;
		Элементы.Теги.Видимость = Истина;
		
		РуководительРазработки = НастройкаПроекта.ЭП_РуководительРазработки;
		ЗаполнитьДанныеКлючевыеСотрудники();
		ЗаполнитьДанныеОценкаПЗК(); 
		ЗаполнитьТеги();
		ЗаполнитьЗадачи();
		ЗаполнитьСтатусы();
		ЗаполнитьДанныеСотрудникиФакт();
		ЗаполнитьПлан();
		
	Иначе
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.ОсновнаяСтраница;
		Элементы.КнопкаЗадачи.Видимость  = Ложь;
		Элементы.КнопкаСотрудники.Видимость = Ложь;
		//Элементы.КнопкаОценка.Видимость = Ложь;
		Элементы.КнопкаТеги.Видимость = Ложь;
		//Элементы.КнопкаКлючевыеСотрудники.Видимость = Ложь;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
  
&НаКлиенте
Процедура КнопкаДалее(Команда)

	ТекущаяСтраница = Элементы.Страницы.ТекущаяСтраница;
	Если ТекущаяСтраница = Элементы.ОсновнаяСтраница Тогда
		
		Если НЕ ЗначениеЗаполнено(Наименование) ИЛИ 
				ВидДеятельности.Пустая() ИЛИ
					НЕ ЗначениеЗаполнено(СтатусПоУмолчанию) ИЛИ 
					НЕ ЗначениеЗаполнено(ВидЗадачиПоУмолчанию) Тогда
		
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтрШаблон("Необходимо заполнить все обязательные поля проекта");
			Сообщение.Сообщить();
		    Возврат
			
		Иначе
			
			Если УникальностьНаименования(Наименование) Тогда
				
				ТекущаяСтраница = Элементы.НастройкаСтатусов;
				Элементы.КнопкаНазад.Видимость = Истина;
				Элементы.НастройкаСтатусов.Видимость = Истина;
				Элементы.ГруппаПереходов.Видимость = Истина;
				Элементы.КнопкаОбязательныеПоля.Видимость = Истина;
				Элементы.КнопкаОбязательныеПоля.Доступность = Истина;
				Элементы.КнопкаСтатусы.Видимость = Истина;
				Элементы.КнопкаСтатусы.Доступность = Ложь;
				
			Иначе
				
		    	Возврат 
				
			КонецЕсли;

		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.НастройкаСтатусов Тогда
		
		Если УникальностьСтатусов() Тогда
			
			Элементы.КнопкаСтатусы.Доступность = Истина;
			Элементы.КнопкаЗадачи.Видимость = Истина;
			Элементы.КнопкаЗадачи.Доступность = Ложь;
			ТекущаяСтраница = Элементы.ВидыЗадачи; 
			Элементы.ВидыЗадачи.Видимость = Истина; 
			Если ЗначениеЗаполнено(НастройкаПроекта) Тогда 
				
				Элементы.КнопкаНазад.Видимость = Истина;
				
			КонецЕсли;
				
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.ВидыЗадачи Тогда
		
		Если УникальностьЗадач() Тогда
			
			Элементы.КнопкаЗадачи.Доступность = Истина;
			Элементы.КнопкаТеги.Видимость = Истина;
			Элементы.КнопкаТеги.Доступность = Ложь;
			ТекущаяСтраница = Элементы.Теги; 
			Элементы.Теги.Видимость = Истина;
			Если НЕ ЗначениеЗаполнено(НастройкаПроекта) Тогда
				
				Элементы.КнопкаДалее.Видимость = Ложь;
				Элементы.КнопкаСоздать.Видимость = Истина;
				Элементы.КнопкаСоздать.КнопкаПоУмолчанию = Истина;

			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.Теги Тогда
		
		Если УникальностьТегов() Тогда
		
			Элементы.КнопкаТеги.Доступность = Истина;
			Элементы.КнопкаСотрудники.Доступность = Ложь;
			ТекущаяСтраница = Элементы.ЗагруженностьСотрудников; 
			Элементы.ЗагруженностьСотрудников.Видимость = Истина;
			
		КонецЕсли;
			
	ИначеЕсли ТекущаяСтраница = Элементы.ЗагруженностьСотрудников Тогда
		
		Если УникальностьСотрудников() И ПроверкаСотрудники() И ЗаполнениеПлана() Тогда
			
			Элементы.КнопкаСотрудники.Доступность = Истина;
			Элементы.КнопкаОценка.Доступность = Ложь;
			ТекущаяСтраница = Элементы.Оценка; 
			Элементы.Оценка.Видимость = Истина;
			
		КонецЕсли;
			
	ИначеЕсли ТекущаяСтраница = Элементы.Оценка Тогда
		
			Элементы.КнопкаОценка.Доступность = Истина;
			Элементы.КнопкаКлючевыеСотрудники.Доступность = Ложь;
			ТекущаяСтраница = Элементы.КлючевыеСотрудники; 
			Элементы.КлючевыеСотрудники.Видимость = Истина;
			Элементы.КнопкаДалее.Видимость = Ложь;
		
	КонецЕсли;
	
	Элементы.Страницы.ТекущаяСтраница = ТекущаяСтраница;
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаНазад(Команда)
	
	ТекущаяСтраница = Элементы.Страницы.ТекущаяСтраница; 
	
	Если ТекущаяСтраница = Элементы.НастройкаСтатусов Тогда
		
		Элементы.КнопкаОбязательныеПоля.Доступность = Ложь;
		Элементы.КнопкаСтатусы.Доступность = Истина;
		Элементы.КнопкаНазад.Видимость = Ложь;
		ТекущаяСтраница = Элементы.ОсновнаяСтраница;
		
	ИначеЕсли ТекущаяСтраница = Элементы.ВидыЗадачи Тогда 
		 

		Если НЕ ЗначениеЗаполнено(НастройкаПроекта) Тогда
					
			Элементы.КнопкаСтатусы.Доступность = Ложь;
			Элементы.КнопкаЗадачи.Доступность = Истина;
			ТекущаяСтраница = Элементы.НастройкаСтатусов;
			
		Иначе
			
			Если УникальностьЗадач() Тогда
				
				Элементы.КнопкаСтатусы.Доступность = Ложь;
				Элементы.КнопкаЗадачи.Доступность = Истина;
				ТекущаяСтраница = Элементы.НастройкаСтатусов;
				Элементы.КнопкаНазад.Видимость = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;			
		
	ИначеЕсли ТекущаяСтраница = Элементы.Теги Тогда
		
		Если НЕ ЗначениеЗаполнено(НастройкаПроекта) Тогда
			
			Элементы.КнопкаЗадачи.Доступность = Ложь;
			Элементы.КнопкаТеги.Доступность = Истина;
			ТекущаяСтраница = Элементы.ВидыЗадачи;
			Элементы.КнопкаДалее.Видимость = Истина;
			Элементы.КнопкаДалее.КнопкаПоУмолчанию = Истина;
			Элементы.КнопкаСоздать.Видимость = Ложь;
			
		Иначе 
			
			Элементы.КнопкаЗадачи.Доступность = Ложь;
			Элементы.КнопкаТеги.Доступность = Истина;
			ТекущаяСтраница = Элементы.ВидыЗадачи;
			
		КонецЕсли;
			
	ИначеЕсли ТекущаяСтраница = Элементы.ЗагруженностьСотрудников Тогда
		
		Если УникальностьСотрудников() и ПроверкаСотрудники() И ЗаполнениеПлана() Тогда
			
			Элементы.КнопкаСотрудники.Доступность = Истина;
			Элементы.КнопкаТеги.Доступность = Ложь;
			ТекущаяСтраница = Элементы.Теги;    
			
		КонецЕсли;
			
	ИначеЕсли ТекущаяСтраница = Элементы.Оценка Тогда
			
			Элементы.КнопкаСотрудники.Доступность = Ложь;
			Элементы.КнопкаОценка.Доступность = Истина;
			ТекущаяСтраница = Элементы.ЗагруженностьСотрудников;
			
	ИначеЕсли ТекущаяСтраница = Элементы.КлючевыеСотрудники Тогда
		
		Если УникальностьКлючСотрудников() Тогда
			
			Элементы.КнопкаКлючевыеСотрудники.Доступность = Истина;
			Элементы.КнопкаОценка.Доступность = Ложь;
			ТекущаяСтраница = Элементы.Оценка;
			Элементы.КнопкаДалее.Видимость = Истина;
			
		КонецЕсли;
			
	КонецЕсли;
			
	
	Элементы.Страницы.ТекущаяСтраница = ТекущаяСтраница;
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаСоздать(Команда)   
	
	Ссылка = КнопкаСоздатьНаСервере(); 
	
	Если ЗначениеЗаполнено(Ссылка) Тогда    
		
		ПараметрыФормы = Новый Структура("Ключ",Ссылка); 
		Модифицированность = Ложь;
		ЭтаФорма.Закрыть();  
		ОткрытьФорму("Справочник.Проекты.Форма.ФормаЭлемента",ПараметрыФормы); 
			
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция КнопкаСоздатьНаСервере() 
	
	Если НЕ УникальностьТегов() Тогда
		
		Возврат Справочники.Проекты.ПустаяСсылка();
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Наименование) ИЛИ 
		ВидДеятельности.Пустая() ИЛИ
		НЕ ЗначениеЗаполнено(СтатусПоУмолчанию) ИЛИ 
		НЕ ЗначениеЗаполнено(ВидЗадачиПоУмолчанию) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон("Необходимо заполнить все обязательные поля проекта");
		Сообщение.Сообщить();
		Возврат Справочники.Проекты.ПустаяСсылка();
		
	Иначе   
		
		Если НЕ УникальностьНаименования(Наименование) Тогда   
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтрШаблон("Уже существует проект с наименованием %1, измените наименование",Наименование);
			Сообщение.Сообщить();
			Возврат Справочники.Проекты.ПустаяСсылка(); 
			
		КонецЕсли;
		
	КонецЕсли;      
	
    НачатьТранзакцию();
	
	Попытка 
		
		НовыйПроект = Справочники.Проекты.СоздатьЭлемент();
		НовыйПроект.Наименование = Наименование;
		НовыйПроект.ВидДеятельности = ВидДеятельности;
		НовыйПроект.ЭП_КодBI = КодBI; 
		НовыйПроект.ЭП_Архивный  = Перечисления.ЭП_СтатусПроекта.Действующий;
		НовыйПроект.РежимРазработки = Перечисления.РежимРазработки.БезИзменений;
		НовыйПроект.ВариантНаправленияОшибокНаПроверку = Перечисления.ВариантыНаправленияОшибокНаПроверку.Зарегистрировавшему;
		НовыйПроект.Записать();
		
		НовыйСтатусПоУмолчанию = Справочники.ЭП_СтатусыЗадач.СоздатьЭлемент();
		НовыйСтатусПоУмолчанию.Владелец = НовыйПроект.Ссылка;
		Если ТипЗнч(СтатусПоУмолчанию) = Тип("Строка") Тогда
			
			НовыйСтатусПоУмолчанию.Наименование = СтатусПоУмолчанию;
			
		Иначе
			
			НовыйСтатусПоУмолчанию.Наименование = СтатусПоУмолчанию.Наименование;
			
		КонецЕсли;
		НовыйСтатусПоУмолчанию.Записать();
		
		НовыйВидЗадачПоУмолчанию = Справочники.ЭП_ВидыЗадачи.СоздатьЭлемент();
		НовыйВидЗадачПоУмолчанию.Владелец = НовыйПроект.Ссылка;
		Если ТипЗнч(ВидЗадачиПоУмолчанию) = Тип("Строка") Тогда
			
			НовыйВидЗадачПоУмолчанию.Наименование = ВидЗадачиПоУмолчанию;
			
		Иначе
			
			НовыйВидЗадачПоУмолчанию.Наименование = ВидЗадачиПоУмолчанию.Наименование;
			
		КонецЕсли; 
		
		НовыйВидЗадачПоУмолчанию.Записать();
		НовыйПроект.ЭП_СтатусЗадачи = НовыйСтатусПоУмолчанию.Ссылка;
		НовыйПроект.ЭП_ВидЗадачи = НовыйВидЗадачПоУмолчанию.Ссылка;
		НовыйПроект.Записать();
		
		Если ЭтотОбъект.ПроектБезДополнительныхНастроек = Ложь Тогда 
		
			//Добавляем в справочник ЭП_НаборыСтатусов новый элемент
			Если НЕ НаборыСтатусов.Количество() = 0 Тогда   
				
				//Создаём новый набор статусов и добавляем его в справочник ЭП_НаборыСтатусов
				НовыйНаборСтатусов = Справочники.ЭП_НаборыСтатусов.СоздатьЭлемент();
				НовыйНаборСтатусов.Владелец = НовыйПроект.Ссылка;
				НовыйНаборСтатусов.Наименование = СтрШаблон("Набор статусов по проекту:%1",Наименование);
				
				Для Каждого Набор из НаборыСтатусов Цикл  
					
					Если ЗначениеЗаполнено(Набор.Статус) Тогда
						
						//Создаём новый статус и добавляем его в справочник ЭП_СтатусыЗадач либо добавляем 
							//статус по умолчаниюв набор
							Если НЕ ?(ТипЗнч(Набор.Статус) = Тип("Строка"),Набор.Статус,Набор.Статус.Наименование) 
								= НовыйСтатусПоУмолчанию.Наименование Тогда 
							
							НовыйСтатус = Справочники.ЭП_СтатусыЗадач.СоздатьЭлемент();
							НовыйСтатус.Владелец = НовыйПроект.Ссылка; 
							
							Если ТипЗнч(Набор.Статус) = Тип("Строка") Тогда
								
								НовыйСтатус.Наименование = Набор.Статус; 
								
							Иначе
								
								НовыйСтатус.Наименование = Набор.Статус.Наименование;
								
							КонецЕсли; 
							
							НовыйСтатус.Записать(); 
							//Добавляем новый статус в набор
							НовыйНаборСтатусов.Статусы.Добавить().Статус = НовыйСтатус.Ссылка;
							
						Иначе 
							//Добавляем статус по умолчанию в набор
								
							НовыйНаборСтатусов.Статусы.Добавить().Статус = НовыйСтатусПоУмолчанию.Ссылка;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
				НовыйНаборСтатусов.Записать();
				ДопНаборСтатус = НовыйПроект.НаборыСтатусов.Добавить();
				ДопНаборСтатус.НаборСтатусов = НовыйНаборСтатусов;
				
			КонецЕсли;
			
			//Добавляем в справочник ЭП_НаборыВидовЗадач новый элемент
			Если НЕ НаборЗадач.Количество() = 0 Тогда
				
				//Создаём новый набор задача и добавляем его в справочник ЭП_НаборыВидовЗадач
				НовыйНаборЗадач = Справочники.ЭП_НаборыВидовЗадач.СоздатьЭлемент();
				НовыйНаборЗадач.Наименование = СтрШаблон("Набор видов задач по проекту:%1",Наименование); 
				НовыйНаборЗадач.Владелец = НовыйПроект.Ссылка;
				
				Для Каждого Набор из НаборЗадач Цикл
					
					Если ЗначениеЗаполнено(Набор.Задача) Тогда 
						
						//Создаём новый статус и добавляем его в справочник ЭП_ВидыЗадачи
							// либо добавляем Вид задачи по умолчаниюв набор
							Если НЕ ?(ТипЗнч(Набор.Задача) = Тип("Строка"),Набор.Задача,Набор.Задача.Наименование) 
								= НовыйВидЗадачПоУмолчанию.Наименование Тогда
							
							НовыйВидЗадачи = Справочники.ЭП_ВидыЗадачи.СоздатьЭлемент();
							НовыйВидЗадачи.Владелец = НовыйПроект.Ссылка;
							
							Если ТипЗнч(Набор.Задача) = Тип("Строка") Тогда
								
								НовыйВидЗадачи.Наименование = Набор.Задача; 
								
							Иначе
								
								НовыйВидЗадачи.Наименование = Набор.Задача.Наименование;
								
							КонецЕсли;
							
							НовыйВидЗадачи.Записать(); 
						    //Добавляем новый вид задачи в набор
							НовыйНаборЗадач.ВидыЗадач.Добавить().ВидЗадачи = НовыйВидЗадачи.Ссылка;
							
						Иначе
							
							//Добавлем вид задачи по умолчанию в набор
							
							НовыйНаборЗадач.ВидыЗадач.Добавить().ВидЗадачи = НовыйВидЗадачПоУмолчанию.Ссылка;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;  
				
				НовыйНаборЗадач.Записать();
				ДопНаборЗадач = НовыйПроект.ВидыЗадач.Добавить();
				ДопНаборЗадач.ВидЗадачи = НовыйНаборЗадач;
				
			КонецЕсли;
			
			
			//Добавляем в справочник ЭП_Теги новый элемент
			Если НЕ ТегиПроекта.Количество() = 0 Тогда 
				
				НомерСтроки = 0;
				
				Для Каждого ЭлементТег из ТегиПроекта Цикл 
					
					НомерСтроки = НомерСтроки + 1; 
					
					Если ЗначениеЗаполнено(ЭлементТег.Тег) и ЗначениеЗаполнено(ЭлементТег.Цвет) Тогда   
						
						НовыйТег = Справочники.ЭП_Теги.СоздатьЭлемент();
						НовыйТег.Наименование = ?(ТипЗнч(ЭлементТег.Тег) = Тип("Строка"), ЭлементТег.Тег, ЭлементТег.Тег.Наименование);
						НовыйТег.НазваниеЦвета = ЭлементТег.Цвет;
						НовыйТег.Владелец = НовыйПроект.Ссылка;
						НовыйТег.Записать();
						//ДопТег = НовыйПроект.Теги.Добавить();
						//ДопТег.Тег = НовыйТег; 
						
					Иначе
						
						Если НЕ ЗначениеЗаполнено(ЭлементТег.Тег) Тогда
							
							Сообщение = Новый СообщениеПользователю;
							Сообщение.Текст = СтрШаблон("В строке %1 не указан тег",НомерСтроки);
							Сообщение.Сообщить();
							
						КонецЕсли;
						
						Если НЕ ЗначениеЗаполнено(ЭлементТег.Цвет) Тогда
							
							Сообщение = Новый СообщениеПользователю;
							Сообщение.Текст = СтрШаблон("В строке %1 не указан цвет",НомерСтроки);
							Сообщение.Сообщить();
							
						КонецЕсли;
						
					КонецЕсли; 
					
				КонецЦикла;
				
			КонецЕсли; 
			
			НовыйПроект.Записать();
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		Возврат НовыйПроект.Ссылка;
			
	Исключение 
		
		Если ТранзакцияАктивна() Тогда 
			
			ОтменитьТранзакцию();
	   
		КонецЕсли;
		
		Описание = ОписаниеОшибки();
		Информация = ИнформацияОбОшибке();
		КраткоеПредставлениеОшибки(Информация);
		ПодробноеПредставлениеОшибки(Информация);
		
		ВызватьИсключение "Не удалось получить значение реквизита по причине: " + Описание;

	КонецПопытки;

КонецФункции

&НаКлиенте
Процедура Отмена(Команда)
	
	Если Модифицированность = Истина Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтотОбъект);	 
		ПоказатьВопрос(Оповещение,СтрШаблон("Вы действительно прервать создание проекта? В случае закрытия все выбранные вами настройки не сохранятся"), РежимДиалогаВопрос.ДаНет) ;     
		
	Иначе
		
		ЭтаФорма.Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Функция УникальностьТегов()
	
	ТаблицаТегов = РеквизитФормыВЗначение("ТегиПроекта");
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТегиПроекта.Тег КАК Тег
		|ПОМЕСТИТЬ ТегиТаблица
		|ИЗ
		|	&ТегиПроекта КАК ТегиПроекта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР 
		|	 КОГДА ТИПЗНАЧЕНиЯ(ТегиТаблица.Тег) = ТИП(Строка) 
		|	 ТОГДА ВЫРАЗИТЬ(ТегиТаблица.Тег КАК Строка(50))
		|	 ИНАЧЕ ТегиТаблица.Тег.Наименование
		|	КОНЕЦ КАК Тег,
		|	СУММА(1) КАК КоличествоСтрок
		|ИЗ
		|	ТегиТаблица КАК ТегиТаблица
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР 
		|	 КОГДА ТИПЗНАЧЕНиЯ(ТегиТаблица.Тег) = ТИП(Строка) 
		|	 ТОГДА ВЫРАЗИТЬ(ТегиТаблица.Тег КАК Строка(50))
		|	 ИНАЧЕ ТегиТаблица.Тег.Наименование
		|	КОНЕЦ
		|ИМЕЮЩИЕ
		|	СУММА(1) > 1";	
	Запрос.УстановитьПараметр("ТегиПроекта", ТаблицаТегов);
	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Истина;
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл 
			
			КоличествоДублей = Выборка.КоличествоСтрок - 1; 
			Номер = 0;
			
			Для Каждого Строка из ТегиПроекта Цикл
				
				СтрокаТаблицы = ""; 
				
				Если ТипЗнч(Строка.Тег) = Тип("Строка") Тогда
					
					СтрокаТаблицы = Строка.Тег; 
					
				Иначе 
					
					СтрокаТаблицы = Строка.Тег.Наименование;
					
				КонецЕсли;
				
				Если СтрокаТаблицы = Выборка.Тег Тогда
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтрШаблон("В таблице тегов обнаружены дубли по тегу: %1", Выборка.Тег);
					Сообщение.Поле = СтрШаблон("ТегиПроекта[%1].Тег",Номер);
					Сообщение.Сообщить();
					
					КоличествоДублей = КоличествоДублей - 1;
					
					Если КоличествоДублей = 0 Тогда
						
						Прервать;
						
					КонецЕсли;
					
				КонецЕсли;
		        Номер = Номер + 1;

			КонецЦикла;
		
		КонецЦикла;
		Возврат Ложь;
	 КонецЕсли;
	

КонецФункции

&НаСервере
Функция УникальностьСтатусов()
	
	ТаблицаСтатусов = РеквизитФормыВЗначение("НаборыСтатусов");
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НаборыСтатусов.Статус КАК Статус
		|ПОМЕСТИТЬ тчСтатус
		|ИЗ
		|	&НаборыСтатусов КАК НаборыСтатусов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР 
		|	 КОГДА ТИПЗНАЧЕНиЯ(тчСтатус.Статус) = ТИП(Строка) 
		|	 ТОГДА ВЫРАЗИТЬ(тчСтатус.Статус КАК Строка(130))
		|	 ИНАЧЕ тчСтатус.Статус.Наименование
		|	КОНЕЦ КАК Статус,
		|	СУММА(1) КАК КоличествоСтрок
		|ИЗ
		|	тчСтатус КАК тчСтатус
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР 
		|	 КОГДА ТИПЗНАЧЕНиЯ(тчСтатус.Статус) = ТИП(Строка) 
		|	 ТОГДА ВЫРАЗИТЬ(тчСтатус.Статус КАК Строка(130))
		|	 ИНАЧЕ тчСтатус.Статус.Наименование
		|	КОНЕЦ
		|ИМЕЮЩИЕ
		|	СУММА(1) > 1";
	
	Запрос.УстановитьПараметр("НаборыСтатусов", ТаблицаСтатусов);
	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Истина;
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			КоличествоДублей = Выборка.КоличествоСтрок - 1; 
			Номер = 0;
			Для Каждого Строка из НаборыСтатусов Цикл
				
				СтрокаТаблицы = ""; 
				
				Если ТипЗнч(Строка.Статус) = Тип("Строка") Тогда
					
					СтрокаТаблицы = Строка.Статус; 
					
				Иначе 
					
					СтрокаТаблицы = Строка.Статус.Наименование;
					
				КонецЕсли;
				
				Если СтрокаТаблицы = Выборка.Статус Тогда
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтрШаблон("В таблице статусов обнаружены дубли по статусу: %1",Выборка.Статус);
					Сообщение.Поле = СтрШаблон("НаборыСтатусов[%1].Статус",Номер);
					Сообщение.Сообщить();
					
					КоличествоДублей = КоличествоДублей - 1;
					
					Если КоличествоДублей = 0 Тогда
						
						Прервать;
						
					КонецЕсли;
					
				КонецЕсли;
		        Номер = Номер + 1;

			КонецЦикла;
		
		КонецЦикла;
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УникальностьЗадач()
	
	ТаблицаЗадач = РеквизитФормыВЗначение("НаборЗадач");
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НаборЗадач.Задача КАК Задача
		|ПОМЕСТИТЬ тчЗадача
		|ИЗ
		|	&НаборЗадач КАК НаборЗадач
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР 
		|	 КОГДА ТИПЗНАЧЕНиЯ(тчЗадача.Задача) = ТИП(Строка) 
		|	 ТОГДА ВЫРАЗИТЬ(тчЗадача.Задача КАК Строка(130))
		|	 ИНАЧЕ тчЗадача.Задача.Наименование
		|	КОНЕЦ КАК Задача,
		|	СУММА(1) КАК КоличествоСтрок
		|ИЗ
		|	тчЗадача КАК тчЗадача
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР 
		|	 КОГДА ТИПЗНАЧЕНиЯ(тчЗадача.Задача) = ТИП(Строка) 
		|	 ТОГДА ВЫРАЗИТЬ(тчЗадача.Задача КАК Строка(130))
		|	 ИНАЧЕ тчЗадача.Задача.Наименование
		|	КОНЕЦ 
		|ИМЕЮЩИЕ
		|	СУММА(1) > 1";
	
	Запрос.УстановитьПараметр("НаборЗадач", ТаблицаЗадач);
	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Истина;
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			КоличествоДублей = Выборка.КоличествоСтрок - 1; 
			Номер = 0;

			Для Каждого Строка из НаборЗадач Цикл
				
				СтрокаТаблицы = ""; 
					
				Если ТипЗнч(Строка.Задача) = Тип("Строка") Тогда
					
					СтрокаТаблицы = Строка.Задача; 
					
				Иначе 
					
					СтрокаТаблицы = Строка.Задача.Наименование;
					
				КонецЕсли;
				
				Если СтрокаТаблицы = Выборка.Задача Тогда
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтрШаблон("В таблице видов задач обнаружены дубли по задаче: %1",Выборка.Задача);
					Сообщение.Поле = СтрШаблон("НаборЗадач[%1].Задача",Номер);
					Сообщение.Сообщить();
					
					КоличествоДублей = КоличествоДублей - 1;
					
					Если КоличествоДублей = 0 Тогда
						
						Прервать;
						
					КонецЕсли;
					
				КонецЕсли;
		        Номер = Номер + 1;

			КонецЦикла;
		
		КонецЦикла;
		
		Возврат Ложь;

		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УникальностьСотрудников()
	
	ТаблицаСотрудников = РеквизитФормыВЗначение("СотрудникиФакт");
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СотрудникиФакт.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ тчСотрудники
		|ИЗ
		|	&СотрудникиФакт КАК СотрудникиФакт
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	тчСотрудники.Сотрудник КАК Сотрудник,
		|	СУММА(1) КАК КоличествоСтрок
		|ИЗ
		|	тчСотрудники КАК тчСотрудники
		|
		|СГРУППИРОВАТЬ ПО
		|	тчСотрудники.Сотрудник
		|ИМЕЮЩИЕ
		|	СУММА(1) > 1";
	
	Запрос.УстановитьПараметр("СотрудникиФакт", ТаблицаСотрудников);
	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Истина;
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			КоличествоДублей = Выборка.КоличествоСтрок - 1; 
			Номер = 0;

			Для Каждого Строка из СотрудникиФакт Цикл
				
				Если Строка.Сотрудник = Выборка.Сотрудник Тогда
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтрШаблон("В таблице сотрудников обнаружены дубли сотрудников: %1",Выборка.Сотрудник);
					Сообщение.Поле = СтрШаблон("СотрудникиФакт[%1].Сотрудник",Номер);
					Сообщение.Сообщить();
					
					КоличествоДублей = КоличествоДублей - 1;
					
					Если КоличествоДублей = 0 Тогда
						
						Прервать;
						
					КонецЕсли;
					
				КонецЕсли;
		        Номер = Номер + 1;

			КонецЦикла;
		
		КонецЦикла;
		
		Возврат Ложь;

		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ЗаполнениеПлана()
	
	Номер = 0;
	Исход = Истина;
	Для Каждого Строка из СотрудникиПлан Цикл
		
		Если НЕ ЗначениеЗаполнено(Строка.Этап) ИЛИ
			 НЕ ЗначениеЗаполнено(Строка.Департамент) ИЛИ
			 НЕ ЗначениеЗаполнено(Строка.СрокНахожденияВПроекте) ИЛИ
			 НЕ ЗначениеЗаполнено(Строка.РольСотрудника) ИЛИ
			 НЕ ЗначениеЗаполнено(Строка.ФункциональноеНаправление) ИЛИ
			 НЕ ЗначениеЗаполнено(Строка.ТипРесурса) Тогда  
			 
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтрШаблон("Вы не заполнили все обязательные поля в строке %1", Номер + 1);
			Сообщение.Поле = СтрШаблон("СотрудникиПлан[%1]",Номер);
			Сообщение.Сообщить(); 
			Исход = Ложь;
			
		КонецЕсли;
		Номер = Номер + 1;
	КонецЦикла; 
	
	Возврат Исход;
	
КонецФункции

&НаСервере
Функция УникальностьКлючСотрудников()

	ТаблицаСотрудников = РеквизитФормыВЗначение("ЭП_КлючСотрудник");
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭП_КлючСотрудник.КлючевойСотрудник КАК Сотрудник
		|ПОМЕСТИТЬ тчСотрудники
		|ИЗ
		|	&ЭП_КлючСотрудник КАК ЭП_КлючСотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	тчСотрудники.Сотрудник КАК Сотрудник,
		|	СУММА(1) КАК КоличествоСтрок
		|ИЗ
		|	тчСотрудники КАК тчСотрудники
		|
		|СГРУППИРОВАТЬ ПО
		|	тчСотрудники.Сотрудник
		|ИМЕЮЩИЕ
		|	СУММА(1) > 1";
	
	Запрос.УстановитьПараметр("ЭП_КлючСотрудник", ТаблицаСотрудников);
	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Истина;
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			КоличествоДублей = Выборка.КоличествоСтрок - 1; 
			Номер = 0;

			Для Каждого Строка из ЭП_КлючСотрудник Цикл
				
				Если Строка.КлючевойСотрудник = Выборка.Сотрудник Тогда
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтрШаблон("В таблице ключевых сотрудников обнаружены дубли сотрудников: %1",Выборка.Сотрудник);
					Сообщение.Поле = СтрШаблон("ЭП_КлючСотрудник[%1].КлючевойСотрудник",Номер);
					Сообщение.Сообщить();
					
					КоличествоДублей = КоличествоДублей - 1;
					
					Если КоличествоДублей = 0 Тогда
						
						Прервать;
						
					КонецЕсли;
					
				КонецЕсли;
		        Номер = Номер + 1;

			КонецЦикла;
		
		КонецЦикла;
		
		Возврат Ложь;

		
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция УникальностьНаименования(Наименование)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Проекты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Проекты КАК Проекты
		|ГДЕ
		|	Проекты.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Истина;
		
	Иначе
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон("Уже существует проект с наименованием %1, измените наименование",Наименование);
		Сообщение.Сообщить();
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Модифицированность = Ложь;
		ЭтаФорма.Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеИзмененияЗадач(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		НаборВидовЗадачиПриИзмененииНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриСохраненииФормы(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Исход = КнопкаСохранитьНаСервере();
		
		Если Исход Тогда 
			
			Оповестить("ОбработкаЭП_АРМПомощникСозданияПроекта",,ЭтаФорма.ВладелецФормы);
			Модифицированность = Ложь;
			ЭтаФорма.Закрыть();
				
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПослеИзмененияСтатусов(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		НаборСтатусовПриИзмененииНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтатус(Команда) 
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.Теги Тогда
		
		Если УникальностьТегов() Тогда
			
			Элементы.Страницы.ТекущаяСтраница = Элементы.НастройкаСтатусов;
			Элементы.КнопкаТеги.Доступность = Истина; 

			Если НЕ ЗначениеЗаполнено(НастройкаПроекта) Тогда
				
				Элементы.КнопкаДалее.Видимость = Истина;
				Элементы.КнопкаДалее.КнопкаПоУмолчанию = Истина;
				Элементы.КнопкаСоздать.Видимость = Ложь;
				
			КонецЕсли;
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.ВидыЗадачи Тогда
		
		Если УникальностьЗадач() Тогда
			
			Элементы.Страницы.ТекущаяСтраница = Элементы.НастройкаСтатусов; 
			Элементы.КнопкаЗадачи.Доступность = Истина;
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.ОсновнаяСтраница Тогда
		
		Если ЗаполненостьОбязПолей() и УникальностьНаименования(Наименование) Тогда
			
			Элементы.Страницы.ТекущаяСтраница = Элементы.НастройкаСтатусов;
			Элементы.КнопкаОбязательныеПоля.Доступность = Истина;
			Элементы.КнопкаНазад.Видимость = Истина;
						
		Иначе
			
			Возврат
			
		КонецЕсли;
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.ЗагруженностьСотрудников Тогда
		
		Если УникальностьСотрудников() и ПроверкаСотрудники() И ЗаполнениеПлана() Тогда

			Элементы.Страницы.ТекущаяСтраница = Элементы.НастройкаСтатусов;
			Элементы.КнопкаСотрудники.Доступность = Истина;         
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.Оценка Тогда
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.НастройкаСтатусов;
		Элементы.КнопкаОценка.Доступность = Истина;
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.КлючевыеСотрудники Тогда
		
		Если УникальностьКлючСотрудников() Тогда
			
			Элементы.Страницы.ТекущаяСтраница = Элементы.НастройкаСтатусов;
			Элементы.КнопкаКлючевыеСотрудники.Доступность = Истина;
			Элементы.КнопкаДалее.Видимость = Истина;  
			
		КонецЕсли;

		
	КонецЕсли;
	Элементы.КнопкаСтатусы.Доступность = Ложь;
	Элементы.КнопкаНазад.Видимость = Ложь;
		 
	
КонецПроцедуры

 &НаКлиенте
Процедура ОткрытьОбязПоля(Команда) 
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.Теги Тогда
		
		Если УникальностьТегов() Тогда
			
			Элементы.КнопкаДалее.Видимость = Истина;
			Элементы.КнопкаДалее.КнопкаПоУмолчанию = Истина;
			Элементы.КнопкаСоздать.Видимость = Ложь;
			Элементы.Страницы.ТекущаяСтраница = Элементы.ОсновнаяСтраница;
			Элементы.КнопкаТеги.Доступность = Истина;
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.ВидыЗадачи Тогда
		
		Если УникальностьЗадач() Тогда
			
			Элементы.Страницы.ТекущаяСтраница = Элементы.ОсновнаяСтраница;
			Элементы.КнопкаЗадачи.Доступность = Истина;
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.НастройкаСтатусов Тогда
		
		Если УникальностьСтатусов() Тогда
			
			Элементы.Страницы.ТекущаяСтраница = Элементы.ОсновнаяСтраница;
			Элементы.КнопкаСтатусы.Доступность = Истина;
			
		Иначе
			
			Возврат
			
		КонецЕсли;
		
	КонецЕсли;
	Элементы.КнопкаОбязательныеПоля.Доступность = Ложь;
	Элементы.КнопкаНазад.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗадачи(Команда)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.Теги Тогда
		
		Если УникальностьТегов() Тогда
			
			Элементы.Страницы.ТекущаяСтраница = Элементы.ВидыЗадачи;
			Элементы.КнопкаТеги.Доступность = Истина; 

			Если НЕ ЗначениеЗаполнено(НастройкаПроекта) Тогда
				
				Элементы.КнопкаДалее.Видимость = Истина;
				Элементы.КнопкаДалее.КнопкаПоУмолчанию = Истина;
				Элементы.КнопкаСоздать.Видимость = Ложь;
				
			КонецЕсли;
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.НастройкаСтатусов Тогда
		
		Если УникальностьСтатусов() Тогда
			
			Элементы.Страницы.ТекущаяСтраница = Элементы.ВидыЗадачи;
			Элементы.КнопкаСтатусы.Доступность = Истина;
			Элементы.КнопкаНазад.Видимость = Истина;
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.ОсновнаяСтраница Тогда
		
		Если ЗаполненостьОбязПолей() и УникальностьНаименования(Наименование) Тогда
			
			Элементы.Страницы.ТекущаяСтраница = Элементы.ВидыЗадачи;
			Элементы.КнопкаОбязательныеПоля.Доступность = Истина;
			Элементы.КнопкаНазад.Видимость = Истина;
			
		Иначе
			
			Возврат
			
		КонецЕсли;
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.ЗагруженностьСотрудников Тогда
		
		Если УникальностьСотрудников() и ПроверкаСотрудники() И ЗаполнениеПлана() Тогда

			Элементы.Страницы.ТекущаяСтраница = Элементы.ВидыЗадачи;
			Элементы.КнопкаСотрудники.Доступность = Истина;     
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.Оценка Тогда
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.ВидыЗадачи;
		Элементы.КнопкаОценка.Доступность = Истина;
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.КлючевыеСотрудники Тогда
		
		Если УникальностьКлючСотрудников() Тогда
			
			Элементы.Страницы.ТекущаяСтраница = Элементы.ВидыЗадачи;
			Элементы.КнопкаКлючевыеСотрудники.Доступность = Истина;
			Элементы.КнопкаДалее.Видимость = Истина;     
			
		КонецЕсли;

	КонецЕсли;
	Элементы.КнопкаЗадачи.Доступность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьТеги(Команда)   
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.НастройкаСтатусов Тогда
		
		Если УникальностьСтатусов() Тогда
			
			Элементы.Страницы.ТекущаяСтраница = Элементы.Теги;
			Элементы.КнопкаСтатусы.Доступность = Истина; 
			Элементы.КнопкаНазад.Видимость = Истина;
			
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.ВидыЗадачи Тогда
		
		Если УникальностьЗадач() Тогда
			
			Элементы.Страницы.ТекущаяСтраница = Элементы.Теги; 
			Элементы.КнопкаЗадачи.Доступность = Истина;
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.ОсновнаяСтраница Тогда
		
		Если ЗаполненостьОбязПолей() и УникальностьНаименования(Наименование) Тогда
			
			Элементы.Страницы.ТекущаяСтраница = Элементы.Теги;
			Элементы.КнопкаОбязательныеПоля.Доступность = Истина;
			Элементы.КнопкаНазад.Видимость = Истина;
			
		Иначе
			
			Возврат
			
		КонецЕсли;
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.ЗагруженностьСотрудников Тогда
		
		Если УникальностьСотрудников() и ПроверкаСотрудники() И ЗаполнениеПлана() Тогда

			Элементы.Страницы.ТекущаяСтраница = Элементы.Теги;
			Элементы.КнопкаСотрудники.Доступность = Истина;    
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.Оценка Тогда
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.Теги;
		Элементы.КнопкаОценка.Доступность = Истина;
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.КлючевыеСотрудники Тогда
		
		Если УникальностьКлючСотрудников() Тогда
			
			Элементы.Страницы.ТекущаяСтраница = Элементы.Теги;
			Элементы.КнопкаКлючевыеСотрудники.Доступность = Истина;
			Элементы.КнопкаДалее.Видимость = Истина;
			
		КонецЕсли;
		
	КонецЕсли; 
	
	Элементы.КнопкаТеги.Доступность = Ложь;
	
	Если НЕ ЗначениеЗаполнено(НастройкаПроекта) Тогда   
		
		Элементы.КнопкаДалее.Видимость = Ложь;
		Элементы.КнопкаСоздать.Видимость = Истина;
		Элементы.КнопкаСоздать.КнопкаПоУмолчанию = Истина;  
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОткрытьКлючСотрудники(Команда)
 	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.Теги Тогда
		
		Если УникальностьТегов() Тогда
			
			Элементы.Страницы.ТекущаяСтраница = Элементы.КлючевыеСотрудники;
			Элементы.КнопкаТеги.Доступность = Истина;
			
     	Иначе
			
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.ВидыЗадачи Тогда
		
		Если УникальностьЗадач() Тогда
			
			Элементы.Страницы.ТекущаяСтраница = Элементы.КлючевыеСотрудники;
			Элементы.КнопкаЗадачи.Доступность = Истина;

		Иначе
			
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.НастройкаСтатусов Тогда
		
		Если УникальностьСтатусов() Тогда
			
			Элементы.Страницы.ТекущаяСтраница = Элементы.КлючевыеСотрудники;
			Элементы.КнопкаСтатусы.Доступность = Истина; 
			Элементы.КнопкаНазад.Видимость = Истина;
			
		Иначе
			
			Возврат
			
		КонецЕсли;
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.ЗагруженностьСотрудников Тогда
		
		Если УникальностьСотрудников() и ПроверкаСотрудники() И ЗаполнениеПлана() Тогда

			Элементы.Страницы.ТекущаяСтраница = Элементы.КлючевыеСотрудники;
			Элементы.КнопкаСотрудники.Доступность = Истина;     
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.Оценка Тогда
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.КлючевыеСотрудники;
		Элементы.КнопкаОценка.Доступность = Истина;

		
	КонецЕсли;
	Элементы.КнопкаКлючевыеСотрудники.Доступность = Ложь;
	Элементы.КнопкаДалее.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСотрудники(Команда)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.Теги Тогда
		
		Если УникальностьТегов() Тогда
			
			Элементы.Страницы.ТекущаяСтраница = Элементы.ЗагруженностьСотрудников;
			Элементы.КнопкаТеги.Доступность = Истина;
			
     	Иначе
			
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.ВидыЗадачи Тогда
		
		Если УникальностьЗадач() Тогда
			
			Элементы.Страницы.ТекущаяСтраница = Элементы.ЗагруженностьСотрудников;
			Элементы.КнопкаЗадачи.Доступность = Истина;

		Иначе
			
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.НастройкаСтатусов Тогда
		
		Если УникальностьСтатусов() Тогда
			
			Элементы.Страницы.ТекущаяСтраница = Элементы.ЗагруженностьСотрудников;
			Элементы.КнопкаСтатусы.Доступность = Истина;
			Элементы.КнопкаНазад.Видимость = Истина;
			
		Иначе
			
			Возврат
			
		КонецЕсли;
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.КлючевыеСотрудники Тогда
		
		Если УникальностьКлючСотрудников() Тогда
			
			Элементы.Страницы.ТекущаяСтраница = Элементы.ЗагруженностьСотрудников;
			Элементы.КнопкаКлючевыеСотрудники.Доступность = Истина;
			Элементы.КнопкаДалее.Видимость = Истина;
			
		КонецЕсли;		
	
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.Оценка Тогда
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.ЗагруженностьСотрудников;
		Элементы.КнопкаОценка.Доступность = Истина;

		
	КонецЕсли;
	Элементы.КнопкаСотрудники.Доступность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОценкаПЗК(Команда)

	Если Элементы.Страницы.ТекущаяСтраница = Элементы.Теги Тогда
		
		Если УникальностьТегов() Тогда
			
			Элементы.Страницы.ТекущаяСтраница = Элементы.Оценка;
			Элементы.КнопкаТеги.Доступность = Истина;
			
     	Иначе
			
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.ВидыЗадачи Тогда
		
		Если УникальностьЗадач() Тогда
			
			Элементы.Страницы.ТекущаяСтраница = Элементы.Оценка;
			Элементы.КнопкаЗадачи.Доступность = Истина;

		Иначе
			
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.НастройкаСтатусов Тогда
		
		Если УникальностьСтатусов() Тогда
			
			Элементы.Страницы.ТекущаяСтраница = Элементы.Оценка;
			Элементы.КнопкаСтатусы.Доступность = Истина; 
			Элементы.КнопкаНазад.Видимость = Истина;
			
		Иначе
			
			Возврат
			
		КонецЕсли;
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.КлючевыеСотрудники Тогда 
		
		Если УникальностьКлючСотрудников() Тогда
			
			Элементы.Страницы.ТекущаяСтраница = Элементы.Оценка;
			Элементы.КнопкаКлючевыеСотрудники.Доступность = Истина;
			Элементы.КнопкаДалее.Видимость = Истина;  
			
		КонецЕсли;
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.ЗагруженностьСотрудников Тогда
		
		Если УникальностьСотрудников() и ПроверкаСотрудники() И ЗаполнениеПлана() Тогда

			Элементы.Страницы.ТекущаяСтраница = Элементы.Оценка;
			Элементы.КнопкаСотрудники.Доступность = Истина; 
			
		Иначе
			
			Возврат;
			
		КонецЕсли;

	КонецЕсли;         
	
	Элементы.КнопкаОценка.Доступность = Ложь;

КонецПроцедуры


&НаСервере
Функция ЗаполненостьОбязПолей() 
	
	Если НЕ ЗначениеЗаполнено(Наименование) ИЛИ 
		ВидДеятельности.Пустая() ИЛИ
		НЕ ЗначениеЗаполнено(СтатусПоУмолчанию) ИЛИ 
		НЕ ЗначениеЗаполнено(ВидЗадачиПоУмолчанию) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон("Необходимо заполнить все обязательные поля проекта");
		Сообщение.Сообщить();
		Возврат Ложь;
		
	Иначе
		
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеКлючевыеСотрудники()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПроектыЭП_КлючевыеСотрудники.Сотрудник КАК Сотрудник
		|ИЗ
		|	Справочник.Проекты.ЭП_КлючевыеСотрудники КАК ПроектыЭП_КлючевыеСотрудники
		|ГДЕ
		|	ПроектыЭП_КлючевыеСотрудники.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", НастройкаПроекта);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Строка = ЭП_КлючСотрудник.Добавить();
			Строка.КлючевойСотрудник = Выборка.Сотрудник;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеОценкаПЗК()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПроектыЭП_ТаблицаОценивания.Оценивает КАК Оценивает,
		|	ПроектыЭП_ТаблицаОценивания.РасчетныйПрофиль КАК РасчетныйПрофиль,
		|	ПроектыЭП_ТаблицаОценивания.Профиль КАК Профиль
		|ИЗ
		|	Справочник.Проекты.ЭП_ТаблицаОценивания КАК ПроектыЭП_ТаблицаОценивания
		|ГДЕ
		|	ПроектыЭП_ТаблицаОценивания.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", НастройкаПроекта);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
	Выборка = РезультатЗапроса.Выбрать();
	
		Пока Выборка.Следующий() Цикл
			
			Строка = ОценкаПЗК.Добавить();
			ЗаполнитьЗначенияСвойств(Строка,Выборка);

		КонецЦикла;
		
    КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусы() 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭП_СтатусыЗадач.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ЭП_СтатусыЗадач КАК ЭП_СтатусыЗадач
		|ГДЕ
		|	ЭП_СтатусыЗадач.Владелец = &Владелец
		|	И НЕ ЭП_СтатусыЗадач.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Владелец", НастройкаПроекта);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл

			Строка = НаборыСтатусов.Добавить();
			Строка.Статус = Выборка.Ссылка;
			
		КонецЦикла;      
		
	КонецЕсли;
	
КонецПроцедуры  

&НаСервере
Процедура ЗаполнитьЗадачи() 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭП_ВидыЗадачи.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ЭП_ВидыЗадачи КАК ЭП_ВидыЗадачи
		|ГДЕ
		|	ЭП_ВидыЗадачи.Владелец = &Владелец
		|	И НЕ ЭП_ВидыЗадачи.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Владелец", НастройкаПроекта);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл

			Строка = НаборЗадач.Добавить();
			Строка.Задача = Выборка.Ссылка;
			
		КонецЦикла;  
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТеги() 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭП_Теги.Ссылка КАК Ссылка,
		|	ЭП_Теги.НазваниеЦвета КАК Цвет
		|ИЗ
		|	Справочник.ЭП_Теги КАК ЭП_Теги
		|ГДЕ
		|	ЭП_Теги.Владелец = &Владелец
		|	И НЕ ЭП_Теги.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Владелец", НастройкаПроекта);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();

		Пока Выборка.Следующий() Цикл

			Строка = ТегиПроекта.Добавить();
			Строка.Тег = Выборка.Ссылка;
			Строка.Цвет = Выборка.Цвет;
			
		КонецЦикла;  
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеСотрудникиФакт()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭП_ЗагруженностьСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
		|	ЭП_ЗагруженностьСотрудниковСрезПоследних.ПроцентЗагрузки КАК ПроцентЗагрузки,
		|	ЭП_ЗагруженностьСотрудниковСрезПоследних.СрокНахожденияВПроекте КАК СрокНахожденияВПроекте,
		|	ЭП_ЗагруженностьСотрудниковСрезПоследних.Период КАК Период
		|ИЗ
		|	РегистрСведений.ЭП_ЗагруженностьСотрудников.СрезПоследних(&Период, ) КАК ЭП_ЗагруженностьСотрудниковСрезПоследних
		|ГДЕ
		|	ЭП_ЗагруженностьСотрудниковСрезПоследних.Проект = &Проект
		|	И НЕ ЭП_ЗагруженностьСотрудниковСрезПоследних.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Проект", НастройкаПроекта);
	Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
	
		Пока Выборка.Следующий() Цикл
			
			Строка = СотрудникиФакт.Добавить();
			ЗаполнитьЗначенияСвойств(Строка,Выборка);

		КонецЦикла;  
		
	КонецЕсли;
	
КонецПроцедуры   

&НаСервере
Процедура ЗаполнитьПлан()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭП_ПлановаяЗагруженностьСотрудниковСрезПоследних.Этап КАК Этап,
		|	ЭП_ПлановаяЗагруженностьСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
		|	ЭП_ПлановаяЗагруженностьСотрудниковСрезПоследних.РольСотрудника КАК РольСотрудника,
		|	ЭП_ПлановаяЗагруженностьСотрудниковСрезПоследних.ФункциональноеНаправление КАК ФункциональноеНаправление,
		|	ЭП_ПлановаяЗагруженностьСотрудниковСрезПоследних.ТипРесурса КАК ТипРесурса,
		|	ЭП_ПлановаяЗагруженностьСотрудниковСрезПоследних.Департамент КАК Департамент,
		|	ЭП_ПлановаяЗагруженностьСотрудниковСрезПоследних.СрокНахожденияВПроекте КАК СрокНахожденияВПроекте,
		|	ЭП_ПлановаяЗагруженностьСотрудниковСрезПоследних.ПлановыйПроцентЗагрузки КАК ПлановыйПроцентЗагрузки,
		|	ЭП_ПлановаяЗагруженностьСотрудниковСрезПоследних.Период КАК Период
		|ИЗ
		|	РегистрСведений.ЭП_ПлановаяЗагруженностьСотрудников.СрезПоследних(&Период, ) КАК ЭП_ПлановаяЗагруженностьСотрудниковСрезПоследних
		|ГДЕ
		|	ЭП_ПлановаяЗагруженностьСотрудниковСрезПоследних.Проект = &Проект
		|	И НЕ ЭП_ПлановаяЗагруженностьСотрудниковСрезПоследних.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Проект", НастройкаПроекта);
	Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Строка = СотрудникиПлан.Добавить();
			ЗаполнитьЗначенияСвойств(Строка,Выборка);

		КонецЦикла;
	
      КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастройкаСтатусов()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭП_СтатусыЗадач.Ссылка КАК Ссылка,
		|	ЭП_СтатусыЗадач.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ЭП_СтатусыЗадач КАК ЭП_СтатусыЗадач
		|ГДЕ
		|	ЭП_СтатусыЗадач.Владелец = &Владелец
		|	И НЕ ЭП_СтатусыЗадач.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Владелец", НастройкаПроекта);
	РезультатЗапроса = Запрос.Выполнить();
	
	ЗапросНабора = Новый Запрос;
	ЗапросНабора.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЭП_НаборыСтатусовСтатусы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ЭП_НаборыСтатусов.Статусы КАК ЭП_НаборыСтатусовСтатусы
		|ГДЕ
		|	ЭП_НаборыСтатусовСтатусы.Ссылка.Владелец = &Владелец
		|	И НЕ ЭП_НаборыСтатусовСтатусы.Ссылка.ПометкаУдаления"; 
	
	ЗапросНабора.УстановитьПараметр("Владелец", НастройкаПроекта);
	Набор = ЗапросНабора.Выполнить();
	СсылкаНаНабор = Справочники.ЭП_НаборыСтатусов.ПустаяСсылка();
	
	Если Набор.Пустой() Тогда
		
		НовыйНаборСтатусов = Справочники.ЭП_НаборыСтатусов.СоздатьЭлемент();
		НовыйНаборСтатусов.Владелец = НастройкаПроекта;
		НовыйНаборСтатусов.Наименование = СтрШаблон("Набор статусов по проекту:%1",НастройкаПроекта.Наименование);
		НовыйНаборСтатусов.Записать();
		СсылкаНаНабор = НовыйНаборСтатусов.Ссылка;
		
	Иначе
		
		СсылкаНаНабор = Набор.Выгрузить()[0].Ссылка;		
		
	КонецЕсли;
		
	Если НЕ РезультатЗапроса.Пустой() Тогда 
		
		ТаблицаЗапроса = РезультатЗапроса.Выгрузить();
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
							
			Если НЕ ЗначениеЗаполнено(НаборыСтатусов.НайтиСтроки(Новый Структура("Статус",Выборка.Ссылка))) И 
				НЕ ЗначениеЗаполнено(НаборыСтатусов.НайтиСтроки(Новый Структура("Статус",Выборка.Наименование))) Тогда
				
				СсылкаСтатуса = Выборка.Ссылка;
				Статус = СсылкаСтатуса.ПолучитьОбъект();
				Статус.ПометкаУдаления = Истина;
				Статус.Записать();  
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого Набор из НаборыСтатусов Цикл  
				
			СтрокаСсылка = ТаблицаЗапроса.НайтиСтроки(Новый Структура("Ссылка",Набор.Статус));
			СтрокаНаименование = ТаблицаЗапроса.НайтиСтроки(Новый Структура("Наименование",Набор.Статус));
			
			Если НЕ ЗначениеЗаполнено(СтрокаСсылка) И НЕ ЗначениеЗаполнено(СтрокаНаименование) Тогда
				 
				Статус = Справочники.ЭП_СтатусыЗадач.СоздатьЭлемент();
				Статус.Владелец = НастройкаПроекта;
				Статус.Наименование = ?(ТипЗнч(Набор.Статус) = Тип("Строка"), Набор.Статус, Набор.Статус.Наименование);
				Статус.Записать(); 
				
				НаборДляСтатусов = СсылкаНаНабор.ПолучитьОбъект();
				НаборДляСтатусов.Статусы.Добавить().Статус = Статус.Ссылка;
				НаборДляСтатусов.Записать();  
				
			КонецЕсли; 
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого Набор из НаборыСтатусов Цикл       
			
				Статус = Справочники.ЭП_СтатусыЗадач.СоздатьЭлемент();
				Статус.Владелец = НастройкаПроекта;
				Статус.Наименование = ?(ТипЗнч(Набор.Статус) = Тип("Строка"), Набор.Статус, Набор.Статус.Наименование);
				Статус.Записать(); 
				
				НаборДляСтатусов = СсылкаНаНабор.ПолучитьОбъект();
				НаборДляСтатусов.Статусы.Добавить().Статус = Статус.Ссылка;
				НаборДляСтатусов.Записать();
			
		КонецЦикла;
		
	КонецЕсли;	
		
КонецПроцедуры

&НаСервере
Процедура ОчисткаСтатусов()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭП_НаборыСтатусовСтатусы.Ссылка КАК Ссылка,
		|	ЭП_НаборыСтатусовСтатусы.Статус КАК Статус,
		|	ЭП_НаборыСтатусовСтатусы.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	Справочник.ЭП_НаборыСтатусов.Статусы КАК ЭП_НаборыСтатусовСтатусы
		|ГДЕ
		|	ЭП_НаборыСтатусовСтатусы.Статус.ПометкаУдаления
		|	И ЭП_НаборыСтатусовСтатусы.Ссылка.Владелец = &Владелец
		|ИТОГИ ПО
		|	Ссылка";
	
	Запрос.УстановитьПараметр("Владелец", НастройкаПроекта);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда	
		
		Выборка= РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

		Пока Выборка.Следующий() Цикл
			СсылкаНаНабор = Выборка.Ссылка;
			Набор = СсылкаНаНабор.ПолучитьОбъект(); 
			ВыборкаСтатусов = Выборка.Выбрать();
			Пока ВыборкаСтатусов.Следующий() Цикл
				
				НомерСтроки = Набор.Статусы.Найти(ВыборкаСтатусов.Статус,"Статус").НомерСтроки;
				Набор.Статусы.Удалить(НомерСтроки - 1);
				
			КонецЦикла;
			
			Набор.Записать();
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура НастройкаВидовЗадач()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭП_ВидыЗадачи.Ссылка КАК Ссылка,
		|	ЭП_ВидыЗадачи.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ЭП_ВидыЗадачи КАК ЭП_ВидыЗадачи
		|ГДЕ
		|	ЭП_ВидыЗадачи.Владелец = &Владелец
		|	И НЕ ЭП_ВидыЗадачи.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Владелец", НастройкаПроекта);
	РезультатЗапроса = Запрос.Выполнить();
	
	ЗапросНабора = Новый Запрос;
	ЗапросНабора.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЭП_НаборыВидовЗадачВидыЗадач.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ЭП_НаборыВидовЗадач.ВидыЗадач КАК ЭП_НаборыВидовЗадачВидыЗадач
		|ГДЕ
		|	ЭП_НаборыВидовЗадачВидыЗадач.Ссылка.Владелец = &Владелец
		|	И НЕ ЭП_НаборыВидовЗадачВидыЗадач.Ссылка.ПометкаУдаления"; 
	
	ЗапросНабора.УстановитьПараметр("Владелец", НастройкаПроекта);
	Набор = ЗапросНабора.Выполнить();
	СсылкаНаНабор = Справочники.ЭП_НаборыВидовЗадач.ПустаяСсылка(); 
	
	Если Набор.Пустой() Тогда
		
		НовыйНаборЗадач = Справочники.ЭП_НаборыВидовЗадач.СоздатьЭлемент();
		НовыйНаборЗадач.Владелец = НастройкаПроекта;
		НовыйНаборЗадач.Наименование = СтрШаблон("Набор видов задач по проекту:%1",НастройкаПроекта.Наименование);
		НовыйНаборЗадач.Записать();
		СсылкаНаНабор = НовыйНаборЗадач.Ссылка;
		
	Иначе
		
		СсылкаНаНабор = Набор.Выгрузить()[0].Ссылка;		
		
	КонецЕсли;
		
	Если НЕ РезультатЗапроса.Пустой() Тогда 
		
		ТаблицаЗапроса = РезультатЗапроса.Выгрузить();
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если НЕ ЗначениеЗаполнено(НаборЗадач.НайтиСтроки(Новый Структура("Задача",Выборка.Ссылка))) И 
				НЕ ЗначениеЗаполнено(НаборЗадач.НайтиСтроки(Новый Структура("Задача",Выборка.Наименование))) Тогда
				
				СсылкаЗадачи = Выборка.Ссылка;
				Задача = СсылкаЗадачи.ПолучитьОбъект();
				Задача.ПометкаУдаления = Истина;
				Задача.Записать();
				
			КонецЕсли;

		КонецЦикла;
		
		Для Каждого Набор из НаборЗадач Цикл
			
			СтрокаСсылка = ТаблицаЗапроса.НайтиСтроки(Новый Структура("Ссылка",Набор.Задача));
			СтрокаНаименование = ТаблицаЗапроса.НайтиСтроки(Новый Структура("Наименование",Набор.Задача));
			
			Если НЕ ЗначениеЗаполнено(СтрокаСсылка) И НЕ ЗначениеЗаполнено(СтрокаНаименование) Тогда
				 
				ВидЗадачи = Справочники.ЭП_ВидыЗадачи.СоздатьЭлемент();
				ВидЗадачи.Владелец = НастройкаПроекта;
				ВидЗадачи.Наименование = ?(ТипЗнч(Набор.Задача) = Тип("Строка"), Набор.Задача, Набор.Задача.Наименование);
				ВидЗадачи.Записать(); 
				
				НаборДляЗадач = СсылкаНаНабор.ПолучитьОбъект();
				НаборДляЗадач.ВидыЗадач.Добавить().ВидЗадачи = ВидЗадачи.Ссылка;
				НаборДляЗадач.Записать();
				
			КонецЕсли; 
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого Набор из НаборЗадач Цикл       
			
				ВидЗадачи = Справочники.ЭП_ВидыЗадачи.СоздатьЭлемент();
				ВидЗадачи.Владелец = НастройкаПроекта;
				ВидЗадачи.Наименование = ?(ТипЗнч(Набор.Задача) = Тип("Строка"), Набор.Задача, Набор.Задача.Наименование);
				ВидЗадачи.Записать(); 
				
				НаборДляЗадач = СсылкаНаНабор.ПолучитьОбъект();
				НаборДляЗадач.ВидыЗадач.Добавить().ВидЗадачи = ВидЗадачи.Ссылка;
				НаборДляЗадач.Записать();

		КонецЦикла;
		
	КонецЕсли;	
		
КонецПроцедуры

&НаСервере
Процедура ОчисткаВидовЗадач()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭП_НаборыВидовЗадачВидыЗадач.Ссылка КАК Ссылка,
		|	ЭП_НаборыВидовЗадачВидыЗадач.ВидЗадачи КАК ВидЗадачи
		|ИЗ
		|	Справочник.ЭП_НаборыВидовЗадач.ВидыЗадач КАК ЭП_НаборыВидовЗадачВидыЗадач
		|ГДЕ
		|	ЭП_НаборыВидовЗадачВидыЗадач.ВидЗадачи.ПометкаУдаления
		|	И ЭП_НаборыВидовЗадачВидыЗадач.Ссылка.Владелец = &Владелец
		|ИТОГИ ПО
		|	Ссылка";
	
	Запрос.УстановитьПараметр("Владелец", НастройкаПроекта);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока Выборка.Следующий() Цикл         
			
			СсылкаНаНабор = Выборка.Ссылка;
			Набор = СсылкаНаНабор.ПолучитьОбъект(); 
			ВыборкаЗадач = Выборка.Выбрать();
			
			Пока ВыборкаЗадач.Следующий() Цикл
				
				НомерСтроки = Набор.ВидыЗадач.Найти(ВыборкаЗадач.ВидЗадачи,"ВидЗадачи").НомерСтроки;
				Набор.ВидыЗадач.Удалить(НомерСтроки - 1);
				
			КонецЦикла;
			
			Набор.Записать();
			
		КонецЦикла;    
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура НастройкаТегов()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭП_Теги.Ссылка КАК Ссылка,
		|	ЭП_Теги.Наименование КАК Наименование,
		|	ЭП_Теги.ПометкаУдаления КАК ПометкаУдаления
		|ИЗ
		|	Справочник.ЭП_Теги КАК ЭП_Теги
		|ГДЕ
		|	ЭП_Теги.Владелец = &Владелец
		|	И НЕ ЭП_Теги.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Владелец", НастройкаПроекта);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда 
		
		ТаблицаЗапроса = РезультатЗапроса.Выгрузить();
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий()  Цикл
			
			Если (НЕ ЗначениеЗаполнено(ТегиПроекта.НайтиСтроки(Новый Структура("Тег",Выборка.Ссылка))) И 
				НЕ ЗначениеЗаполнено(ТегиПроекта.НайтиСтроки(Новый Структура("Тег",Выборка.Наименование)))) И 
				Выборка.ПометкаУдаления = Ложь Тогда
				
				СсылкаТега = Выборка.Ссылка;
				Тег = СсылкаТега.ПолучитьОбъект();
				Тег.ПометкаУдаления = Истина;
				Тег.Записать();
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого Набор из ТегиПроекта Цикл
			
			СтрокаТег = ТаблицаЗапроса.НайтиСтроки(Новый Структура("Ссылка",Набор.Тег));
			СтрокаНаименования = ТаблицаЗапроса.НайтиСтроки(Новый Структура("Наименование",Набор.Тег));			
			
			Если НЕ ЗначениеЗаполнено(СтрокаТег) и НЕ ЗначениеЗаполнено(СтрокаНаименования) Тогда
					
				НовыйТег = Справочники.ЭП_Теги.СоздатьЭлемент();
				НовыйТег.Владелец = НастройкаПроекта;
				НовыйТег.Наименование = ?(ТипЗнч(Набор.Тег) = Тип("Строка"), Набор.Тег, Набор.Тег.Наименование);
				НовыйТег.НазваниеЦвета = Набор.Цвет;
				НовыйТег.ОбменДанными.Загрузка = Истина;
				НовыйТег.УстановитьНовыйКод();
				НовыйТег.Записать();
				
			КонецЕсли; 
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого Набор из ТегиПроекта Цикл       
			
				НовыйТег = Справочники.ЭП_Теги.СоздатьЭлемент();
				НовыйТег.Владелец = НастройкаПроекта;
				НовыйТег.Наименование = ?(ТипЗнч(Набор.Тег) = Тип("Строка"), Набор.Тег, Набор.Тег.Наименование);
				НовыйТег.Записать(); 
				
		КонецЦикла;
		
	КонецЕсли;	
		
КонецПроцедуры

&НаСервере
Процедура НастройкаТабЧастиПроекта()
	
	  Проект = НастройкаПроекта.ПолучитьОбъект(); 
	  ТаблицаСотрудников = Проект.ЭП_КлючевыеСотрудники;
	  ТаблицаСотрудников.Очистить();
	  
	  Для Каждого Сотрудник из ЭП_КлючСотрудник Цикл
		  
		  Если ЗначениеЗаполнено(Сотрудник.КлючевойСотрудник) Тогда
			  
			  ТаблицаСотрудников.Добавить().Сотрудник = Сотрудник.КлючевойСотрудник;
			  
		  КонецЕсли;
		
	  КонецЦикла; 
	  
	  ТаблицаОценки = Проект.ЭП_ТаблицаОценивания;
	  ТаблицаОценки.Очистить();  
	  
	  Для Каждого Оценка из ОценкаПЗК Цикл        
		  
		  Если ЗначениеЗаполнено(Оценка.Оценивает) И ЗначениеЗаполнено(Оценка.РасчетныйПрофиль) И ЗначениеЗаполнено(Оценка.Профиль) Тогда
			  
			  НоваяТаблица = ТаблицаОценки.Добавить();
			  НоваяТаблица.Оценивает = Оценка.Оценивает;
			  НоваяТаблица.РасчетныйПрофиль = Оценка.РасчетныйПрофиль;
			  НоваяТаблица.Профиль = Оценка.Профиль;  
			  
		  КонецЕсли;
		  
	  КонецЦикла; 
	  
	  Проект.ЭП_РуководительРазработки = РуководительРазработки;
	  Проект.Записать();
	  
 КонецПроцедуры 
  
&НаСервере
Процедура НастройкаСотрудникиФакт()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭП_ЗагруженностьСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
		|	ЭП_ЗагруженностьСотрудниковСрезПоследних.Проект КАК Проект,
		|	ЭП_ЗагруженностьСотрудниковСрезПоследних.ПроцентЗагрузки КАК ПроцентЗагрузки,
		|	ЭП_ЗагруженностьСотрудниковСрезПоследних.СрокНахожденияВПроекте КАК СрокНахожденияВПроекте,
		|	ЭП_ЗагруженностьСотрудниковСрезПоследних.Период КАК Период
		|ИЗ
		|	РегистрСведений.ЭП_ЗагруженностьСотрудников.СрезПоследних(&Период, ) КАК ЭП_ЗагруженностьСотрудниковСрезПоследних
		|ГДЕ
		|	НЕ ЭП_ЗагруженностьСотрудниковСрезПоследних.ПометкаУдаления
		|	И ЭП_ЗагруженностьСотрудниковСрезПоследних.Проект = &Проект";
	
	Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Проект", НастройкаПроекта);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл

			Если НЕ ЗначениеЗаполнено(СотрудникиФакт.НайтиСтроки(Новый Структура("Сотрудник",Выборка.Сотрудник))) Тогда 
				
				МенеджерЗаписи = РегистрыСведений.ЭП_ЗагруженностьСотрудников.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Период = Выборка.Период;
				МенеджерЗаписи.Сотрудник = Выборка.Сотрудник;
				МенеджерЗаписи.Проект = Выборка.Проект;
				МенеджерЗаписи.ПометкаУдаления = Истина;
				МенеджерЗаписи.Записать();
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого Строка из СотрудникиФакт Цикл
			
			Если ЗначениеЗаполнено(Строка.Сотрудник) Тогда
				
				Запись = РегистрыСведений.ЭП_ЗагруженностьСотрудников.СоздатьМенеджерЗаписи();
				Запись.Проект = НастройкаПроекта;
				ЗаполнитьЗначенияСвойств(Запись,Строка);  
				Запись.ПроцентЗагрузки = ?(ЗначениеЗаполнено(Строка.ПроцентЗагрузки),Строка.ПроцентЗагрузки,100);			
				Запись.Период = ТекущаяДатаСеанса();
				Запись.Записать();        
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе     
		
	  	Для Каждого Строка из СотрудникиФакт Цикл
		
			Если ЗначениеЗаполнено(Строка.Сотрудник) Тогда
			
				Запись = РегистрыСведений.ЭП_ЗагруженностьСотрудников.СоздатьМенеджерЗаписи();
				Запись.Проект = НастройкаПроекта;
				ЗаполнитьЗначенияСвойств(Запись,Строка);  
				Запись.ПроцентЗагрузки = ?(ЗначениеЗаполнено(Строка.ПроцентЗагрузки),Строка.ПроцентЗагрузки,100);			
				Запись.Период = ТекущаяДатаСеанса();
				Запись.Записать();        
				
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастройкаСотрудникиПлан()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭП_ПлановаяЗагруженностьСотрудниковСрезПоследних.Период КАК Период,
		|	ЭП_ПлановаяЗагруженностьСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
		|	ЭП_ПлановаяЗагруженностьСотрудниковСрезПоследних.Проект КАК Проект,
		|	ЭП_ПлановаяЗагруженностьСотрудниковСрезПоследних.Этап КАК Этап,
		|	ЭП_ПлановаяЗагруженностьСотрудниковСрезПоследних.РольСотрудника КАК РольСотрудника,
		|	ЭП_ПлановаяЗагруженностьСотрудниковСрезПоследних.ФункциональноеНаправление КАК ФункциональноеНаправление,
		|	ЭП_ПлановаяЗагруженностьСотрудниковСрезПоследних.ТипРесурса КАК ТипРесурса,
		|	ЭП_ПлановаяЗагруженностьСотрудниковСрезПоследних.Департамент КАК Департамент,
		|	ЭП_ПлановаяЗагруженностьСотрудниковСрезПоследних.ПлановыйПроцентЗагрузки КАК ПлановыйПроцентЗагрузки,
		|	ЭП_ПлановаяЗагруженностьСотрудниковСрезПоследних.СрокНахожденияВПроекте КАК СрокНахожденияВПроекте
		|ИЗ
		|	РегистрСведений.ЭП_ПлановаяЗагруженностьСотрудников.СрезПоследних(&Период, ) КАК ЭП_ПлановаяЗагруженностьСотрудниковСрезПоследних
		|ГДЕ
		|	НЕ ЭП_ПлановаяЗагруженностьСотрудниковСрезПоследних.ПометкаУдаления
		|	И ЭП_ПлановаяЗагруженностьСотрудниковСрезПоследних.Проект = &Проект";
	
	Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Проект", НастройкаПроекта);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Таблица = РезультатЗапроса.Выгрузить();
		
		Пока Выборка.Следующий() Цикл

			Если НЕ ЗначениеЗаполнено(СотрудникиПлан.НайтиСтроки(Новый Структура("Сотрудник",Выборка.Сотрудник))) Тогда 
				
				//ПараметрыОтбора = Новый Структура("Проект, Сотрудник", Выборка.Сотрудник, Выборка.Проект);
				
				МенеджерЗаписи = РегистрыСведений.ЭП_ПлановаяЗагруженностьСотрудников.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
				МенеджерЗаписи.Удалить();
				
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого Строка из СотрудникиПлан Цикл
			
			Если НЕ ЗначениеЗаполнено(Таблица.НайтиСтроки(Новый Структура("Сотрудник, Проект, Этап, РольСотрудника, 
				|ФункциональноеНаправление, Департамент, ТипРесурса",Строка.Сотрудник, НастройкаПроекта, Строка.Этап,
				 Строка.РольСотрудника, Строка.ФункциональноеНаправление, Строка.Департамент, Строка.ТипРесурса))) Тогда
				 
				Запись = РегистрыСведений.ЭП_ПлановаяЗагруженностьСотрудников.СоздатьМенеджерЗаписи();
				Запись.Проект = НастройкаПроекта;
				ЗаполнитьЗначенияСвойств(Запись,Строка);
				Запись.ПлановыйПроцентЗагрузки = ?(ЗначениеЗаполнено(Строка.ПлановыйПроцентЗагрузки),Строка.ПлановыйПроцентЗагрузки,100);
				Запись.Период = ТекущаяДатаСеанса(); 
				Запись.Записать();  
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого Строка из СотрудникиПлан Цикл
			
			Запись = РегистрыСведений.ЭП_ПлановаяЗагруженностьСотрудников.СоздатьМенеджерЗаписи();
			Запись.Проект = НастройкаПроекта;       
			Запись.ПлановыйПроцентЗагрузки = ?(ЗначениеЗаполнено(Строка.ПлановыйПроцентЗагрузки),Строка.ПлановыйПроцентЗагрузки,100);
			ЗаполнитьЗначенияСвойств(Запись,Строка);
			Запись.Период = ТекущаяДатаСеанса(); 
			Запись.Записать(); 
				
		КонецЦикла;
				
	КонецЕсли;
		
	
КонецПроцедуры

&НаСервере
Функция ПроверкаСотрудники()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭП_ЗагруженностьСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
		|	СУММА(ЭП_ЗагруженностьСотрудниковСрезПоследних.ПроцентЗагрузки) КАК ПроцентЗагрузки
		|ИЗ
		|	РегистрСведений.ЭП_ЗагруженностьСотрудников.СрезПоследних(&Период, ) КАК ЭП_ЗагруженностьСотрудниковСрезПоследних
		|ГДЕ
		|	НЕ ЭП_ЗагруженностьСотрудниковСрезПоследних.Проект = &Проект
		|
		|СГРУППИРОВАТЬ ПО
		|	ЭП_ЗагруженностьСотрудниковСрезПоследних.Сотрудник";
	
	Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Проект", НастройкаПроекта);
	
	РезультатЗапроса = Запрос.Выполнить(); 
	
	// ГлинскийАА, 20.03.2025 {
	Исход = Истина; 
	// ГлинскийАА, 20.03.2025 }

	Если НЕ РезультатЗапроса.Пустой() Тогда 
		
		ТаблицаЗапроса = РезультатЗапроса.Выгрузить();
	    
		НомерСтроки = 0;
		
		Для Каждого Строка из СотрудникиФакт Цикл
				
			Выборка = ТаблицаЗапроса.НайтиСтроки(Новый Структура("Сотрудник", Строка.Сотрудник)); 
			Если ЗначениеЗаполнено(Выборка) Тогда;
				
				Если Строка.ПроцентЗагрузки + Выборка[0].ПроцентЗагрузки > 100 Тогда
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтрШаблон("Процент загрузки сотрудника %1 превышает 100 процентов", Строка.Сотрудник);
					Сообщение.Поле = СтрШаблон("СотрудникФакт[%1].ПроцентЗагрузки",НомерСтроки);
					Сообщение.Сообщить(); 
					
					Исход = Ложь;
					
				КонецЕсли;
				
			КонецЕсли;
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Исход;	
	
КонецФункции

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура ПроектБезДополнительныхНастроекПриИзменении(Элемент)

   Элементы.КнопкаСоздать.Видимость = ЭтотОбъект.ПроектБезДополнительныхНастроек;
   Элементы.КнопкаСоздать.КнопкаПоУмолчанию = ЭтотОбъект.ПроектБезДополнительныхНастроек; 
   Элементы.КнопкаДалее.Видимость = НЕ(ЭтотОбъект.ПроектБезДополнительныхНастроек);
   Элементы.КнопкаДалее.КнопкаПоУмолчанию = НЕ(ЭтотОбъект.ПроектБезДополнительныхНастроек);	
   
КонецПроцедуры

&НаСервере
Процедура НаборВидовЗадачиПриИзмененииНаСервере()
	
	СписокЗадач = НаборВидовЗадачи.ВидыЗадач.Выгрузить();
	
	Если СписокЗадач.Количество() = 0 Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон("В наборе %1 нет задач",НаборВидовЗадачи);
		Сообщение.Сообщить();
		
	Иначе
		
		НаборЗадач.Очистить();      
		
		Для Каждого ЗадачаНабора из СписокЗадач Цикл
			
			Стр = НаборЗадач.Добавить();
			Стр.Задача = ЗадачаНабора.ВидЗадачи;
			
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура НаборВидовЗадачиПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(НаборВидовЗадачи) Тогда
		
		Если НаборЗадач.Количество() > 0 Тогда
				
			Оповещение = Новый ОписаниеОповещения("ПослеИзмененияЗадач", ЭтотОбъект);	 
			ПоказатьВопрос(Оповещение,СтрШаблон("При изменение набора задачи будут очищены. Продолжить?")
				, РежимДиалогаВопрос.ДаНет);
			
		Иначе
			
			НаборВидовЗадачиПриИзмененииНаСервере();  
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НаборСтатусовПриИзмененииНаСервере()
	
	СписокСтатусов = НаборСтатусов.Статусы.Выгрузить();
	
	Если СписокСтатусов.Количество() = 0 Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон("В наборе статусов %1 нет статусов",НаборСтатусов);
		Сообщение.Сообщить();
		
	Иначе
		
		НаборыСтатусов.Очистить();
		
		Для Каждого СтатусНабора из СписокСтатусов Цикл
			
			Стр = НаборыСтатусов.Добавить();
			Стр.Статус = СтатусНабора.Статус;
			
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура НаборСтатусовПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(НаборСтатусов) Тогда
		
		Если НаборыСтатусов.Количество() > 0 Тогда
				
			Оповещение = Новый ОписаниеОповещения("ПослеИзмененияСтатусов", ЭтотОбъект);	 
			ПоказатьВопрос(Оповещение,СтрШаблон("При изменение набора статусы будут очищены. Продолжить?")
				, РежимДиалогаВопрос.ДаНет);
			
		Иначе
			
			НаборСтатусовПриИзмененииНаСервере();  
			
		КонецЕсли;
		
	КонецЕсли;
  
	
КонецПроцедуры

&НаСервере
Функция КнопкаСохранитьНаСервере()
	
	НачатьТранзакцию();  
	
	Попытка 
		
		Если УникальностьСтатусов() Тогда  
			
			НастройкаСтатусов();
			ОчисткаСтатусов();
			
		Иначе 
			
			Возврат Ложь;
			
		КонецЕсли; 
		
		Если УникальностьЗадач() Тогда
			
			НастройкаВидовЗадач();
			ОчисткаВидовЗадач();
			
		Иначе 
			
			Возврат Ложь;

		КонецЕсли;
		
		Если УникальностьТегов() Тогда
			
			НастройкаТегов();
			
		Иначе 
			
			Возврат Ложь;

		КонецЕсли;
		
		Если УникальностьКлючСотрудников() Тогда
			
			НастройкаТабЧастиПроекта(); 
			
		Иначе
			
			Возврат Ложь;
			
		КонецЕсли;
		
		Если УникальностьСотрудников() Тогда
			
			Если ПроверкаСотрудники() Тогда
				
				НастройкаСотрудникиФакт();
				
			Иначе 
				
				Возврат Ложь
				
			КонецЕсли;
			
		Иначе 
			
			Возврат Ложь;
			
		КонецЕсли;	
		
		Если ЗаполнениеПлана() Тогда
			
			НастройкаСотрудникиПлан(); 
			
		Иначе
			
			Возврат Ложь;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	    Возврат Истина;

	Исключение 
		
		Если ТранзакцияАктивна() Тогда 
			
			ОтменитьТранзакцию();
	   
		КонецЕсли;
		
		Описание = ОписаниеОшибки();
		Информация = ИнформацияОбОшибке();
		КраткоеПредставлениеОшибки(Информация);
		ПодробноеПредставлениеОшибки(Информация);
		
		ВызватьИсключение "Не удалось получить значение реквизита по причине: " + Описание;

	КонецПопытки;
	
КонецФункции

&НаКлиенте
Процедура КнопкаСохранить(Команда)
	
	Если Модифицированность = Истина Тогда   
		
		Оповещение = Новый ОписаниеОповещения("ПриСохраненииФормы", ЭтотОбъект);	 
		ПоказатьВопрос(Оповещение,СтрШаблон("Данные были изменены. Сохранить изменения?"), РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ЭтаФорма.Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриЗакрытииФормы(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Модифицированность = Ложь;
		ЭтаФорма.Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность = Истина Тогда   
		
		Отказ = Истина;
		Оповещение = Новый ОписаниеОповещения("ПриЗакрытииФормы", ЭтотОбъект);	 
		ПоказатьВопрос(Оповещение,СтрШаблон("Вы действительно прервать редактирование проекта? В случае закрытия все выбранные вами настройки не сохранятся"),
			РежимДиалогаВопрос.ДаНет);  
		
	КонецЕсли;                                           
	

КонецПроцедуры

#КонецОбласти

             
