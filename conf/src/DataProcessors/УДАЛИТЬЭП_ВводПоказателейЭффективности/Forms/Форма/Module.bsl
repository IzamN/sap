
#Область СобытияФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СвойстваПоказателей = Новый Структура;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Период оценивания
	ПериодОценивания = ДобавитьМесяц(НачалоМесяца(ТекущаяДата()), -1);
    СформироватьСписокВыбораМесяца(Год(ПериодОценивания));
	Месяц = Формат(ПериодОценивания, "ДФ = ""ММММ гггг""");
		
	// Ответственный
	Если Не ЗначениеЗаполнено(Ответственный) Тогда
		Ответственный = ПользователиКлиент.ТекущийПользователь();
	КонецЕсли;
	
	УправлениеВидимостью();
	ПриИзмененииНастроекВвода();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если Модифицированность Тогда
		Отказ = Истина; 
		Если ЗавершениеРаботы Тогда
			ТекстПредупреждения = "Изменения не сохранены и будут потеряны!
			|Продолжить?";
			Возврат;
		Иначе
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПодтвержденияЗакрытия", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, "Сохранить изменения показателеей?", РежимДиалогаВопрос.ДаНетОтмена);
			Возврат;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодтвержденияЗакрытия(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаписатьДанные();
		Закрыть();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область КомандыФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	ЗаписатьДанные();
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	ЗаписатьДанные();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДанные()
	Если РежимВводаСписком Тогда
		ЗаписатьТаблицуОценивания();
	Иначе
		ЗаписатьТаблицуПоСотруднику();
	КонецЕсли;
	Модифицированность = Ложь;
КонецПроцедуры


&НаКлиенте
Процедура ПеречитатьДанные(Команда)
	Если РежимВводаСписком Тогда
		ЗаполнитьТаблицуОценивания();
	Иначе
		ЗаполнитьТаблицуПоСотруднику();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПрошломуМесяцу(Команда)

	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоПрошломуМесяцуПродолжение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, "Выбранные строки будут заполнены по прошлому месяцу.
	|Продолжить?", РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПрошломуМесяцуПродолжение(Результат, ДопПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимВводаСписком Тогда
		ВыделенныеСтроки = Элементы.ТаблицаОценивания.ВыделенныеСтроки;
		ЗаполнитьТаблицуОцениванияПоПрошломуМесяцу(ВыделенныеСтроки);
	Иначе
		ВыделенныеСтроки = Элементы.ТаблицаПоСотруднику.ВыделенныеСтроки;
		ЗаполнитьТаблицуПоСотрудникуПоПрошломуМесяцу(ВыделенныеСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РежимВводаСписком(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("РежимВводаСпискомПродолжение", ЭтотОбъект);
	Если Модифицированность Тогда
		ПоказатьВопрос(ОписаниеОповещения, "Сохранить изменения показателеей?", РежимДиалогаВопрос.ДаНетОтмена);
		Возврат;
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Нет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РежимВводаСпискомПродолжение(Результат, ДопПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаписатьДанные();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
	Иначе
		Возврат;
	КонецЕсли;
	
	РежимВводаСписком = Не РежимВводаСписком;
	УправлениеВидимостью();
	ПриИзмененииНастроекВвода("РежимВвода");

КонецПроцедуры



#КонецОбласти


#Область ПроцедурыВыбораМесяца

&НаКлиенте
Процедура МесяцПриИзменении(Элемент)
	ПриИзмененииМесяца();
КонецПроцедуры

&НаКлиенте
Процедура МесяцДополнительныйВыбор (Результат, Параметры) Экспорт
	
	Если Результат = Неопределено ТОгда
	    Возврат;
	КонецЕсли;
	
    Месяц = Результат.Значение;
	ПриИзмененииМесяца();

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииМесяца()
	
    Если СтрДлина(Месяц) = 4 Тогда // Выбран год, показать выбор месяца 
        СформироватьСписокВыбораМесяца(Число(Месяц));
    	Оповещение = Новый ОписаниеОповещения("МесяцДополнительныйВыбор", ЭтаФорма);
    	ЭтаФорма.ПоказатьВыборИзМеню(Оповещение, Элементы.Месяц.СписокВыбора, Элементы.Месяц);
		Возврат;
	КонецЕсли;
	
	// Выбран месяц
	ПизицияМесяца = Найти("янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек",Нрег(Лев(Месяц,3))); //1,5,9...
	Если ПизицияМесяца = 0 Тогда
		// Что-то недопустимое, очистить период
		Месяц = "";
		ПериодОценивания = Дата(1, 1, 1);
	Иначе
		НомерМесяца = (ПизицияМесяца - 1)/4 + 1;
		ГодЧислом = Число(Прав(Месяц, 4));
		ПериодОценивания = Дата(ГодЧислом, НомерМесяца, 1);
	КонецЕсли;
	
	ПриИзмененииНастроекВвода("Месяц");

КонецПроцедуры

&НаКлиенте
Процедура СформироватьСписокВыбораМесяца(Год)
    
    Элементы.Месяц.СписокВыбора.Очистить();
	
	Элементы.Месяц.СписокВыбора.Добавить(Формат(Год-1, "ЧГ=0")); // Предыдущий год
	Для ТекМесяц = 1 По 12  Цикл
        ТекДата = Дата(Год, ТекМесяц, 1);
        Значение = Формат(ТекДата, "ДФ = ""ММММ гггг""");
        Элементы.Месяц.СписокВыбора.Добавить(Значение);    
    КонецЦикла; 
    Элементы.Месяц.СписокВыбора.Добавить(Формат(Год+1, "ЧГ=0")); // Следующий год
	
КонецПроцедуры     

#КонецОбласти


#Область СобытияПрочихЭлементов

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	ПриИзмененииНастроекВвода("Ответственный");
КонецПроцедуры

&НаКлиенте
Процедура ПроектПриИзменении(Элемент)
	ПриИзмененииНастроекВвода("Проект");
КонецПроцедуры

&НаКлиенте
Процедура ПрофильОцениванияПриИзменении(Элемент)  
	ПриИзмененииНастроекВвода("ПрофильОценивания");
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	ПриИзмененииНастроекВвода("Сотрудник");
КонецПроцедуры


#КонецОбласти


#Область ЗаполнениеСписковВыбора

&НаКлиенте
Процедура ПриИзмененииНастроекВвода(ТекущийЭлемент = Неопределено)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриИзмененииНастроекВводаПродолжение", ЭтотОбъект, ТекущийЭлемент);

	Если Модифицированность Тогда
		ПоказатьВопрос(ОписаниеОповещения, "Сохранить изменения показателеей?", РежимДиалогаВопрос.ДаНетОтмена);
		Возврат;
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Нет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииНастроекВводаПродолжение(Результат, ТекущийЭлемент) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаписатьДанные();
		ЗаполнитьСпискиВыбора(ТекущийЭлемент);
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		ЗаполнитьСпискиВыбора(ТекущийЭлемент);
	Иначе
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, КэшРеквизитов);
	    СформироватьСписокВыбораМесяца(Год(ПериодОценивания));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСпискиВыбора(ТекущийЭлемент)

	// Порядок заполнения в зависимости от исходного реквизита
	ПорядокЗаполнения = Новый Структура;
	ПорядокЗаполнения.Вставить("Месяц", 1);
	ПорядокЗаполнения.Вставить("Проект", 2); 
	ПорядокЗаполнения.Вставить("РасчетныйПрофиль", 3);
	ПорядокЗаполнения.Вставить("ПрофильОценивания", 4);
	ПорядокЗаполнения.Вставить("РежимВвода", 4);
	ПорядокЗаполнения.Вставить("Сотрудник", 5);
	
	Если ТекущийЭлемент = Неопределено Тогда
		ТекущийПорядок = 1;
	Иначе
		ТекущийПорядок = ПорядокЗаполнения[ТекущийЭлемент];
	КонецЕсли;
	
	// Заполнение списков по порядку
	Если ТекущийПорядок = 1 Тогда
		ЗаполнитьСписокВыбора("Проект");
	КонецЕсли;
	
	Если ТекущийПорядок <= 3 Тогда
	
		ЗаполнитьСписокВыбора("РасчетныйПрофиль");		
	
	КонецЕсли;
	
	Если ТекущийПорядок <= 3 Тогда
		ЗаполнитьСписокВыбора("ПрофильОценивания");
	КонецЕсли;

	Если ТекущийПорядок <= 4 Тогда
		Если Не РежимВводаСписком Тогда
			ЗаполнитьСписокВыбора("Сотрудник");
		Иначе 
			ЗаполнитьТаблицуОценивания();
		КонецЕсли;
	КонецЕсли;
		
	Если ТекущийПорядок <= 5 Тогда
		Если Не РежимВводаСписком Тогда
			ЗаполнитьТаблицуПоСотруднику();
		КонецЕсли;
	КонецЕсли;
	
	КэшРеквизитов = Новый Структура("Месяц, ПериодОценивания, Проект, ПрофильОценивания, РежимВводаСписком, Сотрудник");
	ЗаполнитьЗначенияСвойств(КэшРеквизитов, ЭтотОбъект);
	
		
КонецПроцедуры 

&НаКлиенте
Процедура ЗаполнитьСписокВыбора(ИмяЭлемента) 
	
	СписокВыбора = Элементы[ИмяЭлемента].СписокВыбора;
	СписокВыбора.ЗагрузитьЗначения(ПолучитьМассивВыбора(ИмяЭлемента));
	Если СписокВыбора.Количество() = 1 Тогда
		ЭтотОбъект[ИмяЭлемента] = СписокВыбора[0].Значение;
	ИначеЕсли СписокВыбора.НайтиПоЗначению(ЭтотОбъект[ИмяЭлемента]) = Неопределено Тогда
		ЭтотОбъект[ИмяЭлемента] = Неопределено;
	КонецЕсли;
	
КонецПроцедуры 


&НаСервере
Функция ПолучитьМассивВыбора(ИмяЭлемента)
	 
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ответственный", Ответственный);

	Если ИмяЭлемента = "Проект" Тогда	
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЭП_ОтветственныеЗаОценкуЭффективности.Проект КАК Проект
		|ИЗ
		|	РегистрСведений.ЭП_ОтветственныеЗаОценкуЭффективности КАК ЭП_ОтветственныеЗаОценкуЭффективности
		|ГДЕ
		|	ЭП_ОтветственныеЗаОценкуЭффективности.Ответственный = &Ответственный
		|	И НЕ ЭП_ОтветственныеЗаОценкуЭффективности.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Проект
		|АВТОУПОРЯДОЧИВАНИЕ";
		
		Запрос.УстановитьПараметр("ПериодОценивания", ПериодОценивания);
		
	ИначеЕсли ИмяЭлемента = "РасчетныйПрофиль" Тогда
		
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ЭП_ОтветственныеЗаОценкуЭффективности.РасчетныйПрофиль КАК РасчетныйПрофиль
		               |ИЗ
		               |	РегистрСведений.ЭП_ОтветственныеЗаОценкуЭффективности КАК ЭП_ОтветственныеЗаОценкуЭффективности
		               |ГДЕ
		               |	ЭП_ОтветственныеЗаОценкуЭффективности.Ответственный = &Ответственный
		               |	И ЭП_ОтветственныеЗаОценкуЭффективности.Проект = &Проект
		               |	И НЕ ЭП_ОтветственныеЗаОценкуЭффективности.ПометкаУдаления
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	РасчетныйПрофиль
		               |АВТОУПОРЯДОЧИВАНИЕ";
		Запрос.УстановитьПараметр("Проект", Проект);
		
	ИначеЕсли ИмяЭлемента = "ПрофильОценивания" Тогда	

		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЭП_ОтветственныеЗаОценкуЭффективности.ПрофильОценивания КАК ПрофильОценивания
		|ИЗ
		|	РегистрСведений.ЭП_ОтветственныеЗаОценкуЭффективности КАК ЭП_ОтветственныеЗаОценкуЭффективности
		|ГДЕ
		|	ЭП_ОтветственныеЗаОценкуЭффективности.Ответственный = &Ответственный
		|	И ЭП_ОтветственныеЗаОценкуЭффективности.Проект = &Проект
		|	И НЕ ЭП_ОтветственныеЗаОценкуЭффективности.ПометкаУдаления
		|	И ЭП_ОтветственныеЗаОценкуЭффективности.РасчетныйПрофиль = &РасчетныйПрофиль
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПрофильОценивания
		|АВТОУПОРЯДОЧИВАНИЕ";
		
		Запрос.УстановитьПараметр("ПериодОценивания", ПериодОценивания);
		Запрос.УстановитьПараметр("Проект", Проект); 
		Запрос.УстановитьПараметр("РасчетныйПрофиль", РасчетныйПрофиль);
		
	ИначеЕсли ИмяЭлемента = "Сотрудник" Тогда	

		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЭП_ОтветственныеЗаОценкуЭффективности.Сотрудник КАК Сотрудник
		|ИЗ
		|	РегистрСведений.ЭП_ОтветственныеЗаОценкуЭффективности КАК ЭП_ОтветственныеЗаОценкуЭффективности
		|ГДЕ
		|	ЭП_ОтветственныеЗаОценкуЭффективности.Ответственный = &Ответственный
		|	И ЭП_ОтветственныеЗаОценкуЭффективности.Проект = &Проект
		|	И ЭП_ОтветственныеЗаОценкуЭффективности.ПрофильОценивания = &ПрофильОценивания
		|	И НЕ ЭП_ОтветственныеЗаОценкуЭффективности.ПометкаУдаления
		|	И ЭП_ОтветственныеЗаОценкуЭффективности.РасчетныйПрофиль = &РасчетныйПрофиль
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник
		|АВТОУПОРЯДОЧИВАНИЕ";
		
		Запрос.УстановитьПараметр("Проект", Проект);
		Запрос.УстановитьПараметр("ПрофильОценивания", ПрофильОценивания);
		Запрос.УстановитьПараметр("РасчетныйПрофиль", РасчетныйПрофиль);

	КонецЕсли;
	
	
	МассивРезультатов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(ИмяЭлемента);
	Возврат МассивРезультатов;
	
КонецФункции


#КонецОбласти


#Область СобытияТаблицыОценивания

&НаКлиенте
Процедура ТаблицаОцениванияПриАктивизацииПоля(Элемент)
		
	СвойстваПоказателя = Неопределено;
	
	ТекущаяКолонка = Элементы.ТаблицаОценивания.ТекущийЭлемент;
	Если ТекущаяКолонка = Неопределено
		Или Не СвойстваПоказателей.Свойство(ТекущаяКолонка.Имя, СвойстваПоказателя) Тогда
		ТекущийПоказатель = Неопределено;
		ОписаниеПоказателя = Неопределено;
	Иначе
		ТекущийПоказатель = СвойстваПоказателя.Показатель;
		ОписаниеПоказателя = СвойстваПоказателя.Комментарий;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОцениванияПриАктивизацииЯчейки(Элемент)

	АдресКомментария = ТаблицаОцениванияАдресКомментария();
	Если АдресКомментария = Неопределено Тогда
		КомментарийКОценке = "";
		Возврат;
	КонецЕсли;

	КомментарийКОценке = АдресКомментария.Строка[АдресКомментария.Колонка];

КонецПроцедуры

&НаКлиенте
Процедура КомментарийКОценкеПриИзменении(Элемент)
	
	АдресКомментария = ТаблицаОцениванияАдресКомментария();
	Если АдресКомментария = Неопределено Тогда
		Возврат;
	КонецЕсли;

	АдресКомментария.Строка[АдресКомментария.Колонка] = КомментарийКОценке;

КонецПроцедуры

&НаКлиенте
Функция ТаблицаОцениванияАдресКомментария()
	
	ТекущиеДанные = Элементы.ТаблицаОценивания.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СвойстваПоказателя = Неопределено;
	ТекущаяКолонка = Элементы.ТаблицаОценивания.ТекущийЭлемент;
	Если ТекущаяКолонка = Неопределено
		Или Не СвойстваПоказателей.Свойство(ТекущаяКолонка.Имя, СвойстваПоказателя) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	
	Возврат Новый Структура("Строка, Колонка", ТекущиеДанные, СвойстваПоказателя.КолонкаКомментарий);
	
КонецФункции

#КонецОбласти


#Область ТаблицаОценивания

&НаСервере
Процедура ЗаполнитьТаблицуОценивания()
	
	ЗаполнитьКолонкиТаблицыОценивания();
	ЗаполнитьСтрокиТаблицыОценивания();
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКолонкиТаблицыОценивания()
    ИмяТаблицы = "ТаблицаОценивания";
	
	// Массив колонок для удаления
	КолонкиДляУдаления = Новый Массив;
	Для Каждого КлючЗначение Из СвойстваПоказателей Цикл
		
		СвойстваПоказателя = КлючЗначение.Значение;
		
		КолонкиДляУдаления.Добавить(ИмяТаблицы + "." + СвойстваПоказателя.КолонкаЗначение);
		КолонкиДляУдаления.Добавить(ИмяТаблицы + "." + СвойстваПоказателя.КолонкаКомментарий);
		
		// Сразу удалить элемент формы
		КолонкаЭлемент = Элементы.Найти(СвойстваПоказателя.КолонкаЗначение);
		Если КолонкаЭлемент <> Неопределено Тогда
			Элементы.Удалить(КолонкаЭлемент);
		КонецЕсли;
	КонецЦикла;
	
	// Массив колонок для добавления		
	СвойстваПоказателей = Новый Структура;
	КолонкиДляДобавления = Новый Массив;
	ОписаниеТиповСтрока = ОбщегоНазначения.ОписаниеТипаСтрока(0);
	Если ЗначениеЗаполнено(ПрофильОценивания) Тогда 
		НомерКолонки = 0;
		Для Каждого СтрокаПоказатели Из ПрофильОценивания.Показатели Цикл   
			НомерКолонки = НомерКолонки + 1;
			
			СвойстваПоказателя = Новый Структура;
			СвойстваПоказателя.Вставить("Показатель", СтрокаПоказатели.Показатель);
			СвойстваПоказателя.Вставить("Комментарий", СтрокаПоказатели.Показатель.Комментарий);
			СвойстваПоказателя.Вставить("КолонкаЗначение", "Показатель" + НомерКолонки);
			СвойстваПоказателя.Вставить("КолонкаКомментарий", "Комментарий" + НомерКолонки);
			
			СвойстваПоказателей.Вставить(СвойстваПоказателя.КолонкаЗначение, СвойстваПоказателя);
			
			НовыйРеквизит = Новый РеквизитФормы(СвойстваПоказателя.КолонкаЗначение, СтрокаПоказатели.Показатель.ТипЗначения, ИмяТаблицы, СтрокаПоказатели.Показатель.Аббревиатура); 
			КолонкиДляДобавления.Добавить(НовыйРеквизит);
			
			НовыйРеквизит = Новый РеквизитФормы(СвойстваПоказателя.КолонкаКомментарий, ОписаниеТиповСтрока, ИмяТаблицы, "Комментарий"); 
			КолонкиДляДобавления.Добавить(НовыйРеквизит);

		КонецЦикла;
	КонецЕсли;
	
	// Изменение реквизитов	
	ИзменитьРеквизиты(КолонкиДляДобавления, КолонкиДляУдаления);
	
	// ДобавлениеЭлементов
	НомерКолонки = 0;
	Для Каждого СтрокаПоказатели Из ПрофильОценивания.Показатели Цикл   
		НомерКолонки = НомерКолонки + 1;
		ИмяКолонки = "Показатель" + НомерКолонки;
			
		НовыйЭлемент = Элементы.Добавить(ИмяКолонки, Тип("ПолеФормы"), Элементы.ТаблицаОценивания); 
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным = ИмяТаблицы + "." + ИмяКолонки;
		НовыйЭлемент.МинимальноеЗначение = СтрокаПоказатели.Показатель.МинЗначение;
		НовыйЭлемент.МаксимальноеЗначение = СтрокаПоказатели.Показатель.МаксЗначение;
		НовыйЭлемент.КнопкаРегулирования = Истина;

	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокиТаблицыОценивания()
	
	ТаблицаОценивания.Очистить();
	МассивСотрудников = ПолучитьМассивВыбора("Сотрудник");
	ВыборкаПоказателей = ПолучитьВыборкуПоказателей(МассивСотрудников);
	
	Для Каждого ТекСотрудник Из МассивСотрудников Цикл
		НоваяСтрока = ТаблицаОценивания.Добавить();
		НоваяСтрока.Сотрудник = ТекСотрудник;
		
		Для Каждого КлючЗначение Из СвойстваПоказателей Цикл
			СвойстваПоказателя = КлючЗначение.Значение;
			Если ВыборкаПоказателей.НайтиСледующий(Новый Структура("Сотрудник, Показатель", ТекСотрудник, СвойстваПоказателя.Показатель)) Тогда
				НоваяСтрока[СвойстваПоказателя.КолонкаЗначение] = ВыборкаПоказателей.Значение;
				НоваяСтрока[СвойстваПоказателя.КолонкаКомментарий] = ВыборкаПоказателей.Комментарий;
				ВыборкаПоказателей.Сбросить();
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуОцениванияПоПрошломуМесяцу(ВыделенныеСтроки)
	
	Период = ДобавитьМесяц(ПериодОценивания, -1);
	МассивСотрудников = ТаблицаОценивания.Выгрузить().ВыгрузитьКолонку("Сотрудник");
	ВыборкаПоказателей = ПолучитьВыборкуПоказателей(МассивСотрудников, Период);
	
	Для Каждого ИдСтроки Из ВыделенныеСтроки Цикл
		СтрокаТаблицы = ТаблицаОценивания.НайтиПоИдентификатору(ИдСтроки);
		Для Каждого КлючЗначение Из СвойстваПоказателей Цикл
			СвойстваПоказателя = КлючЗначение.Значение;
			Если ВыборкаПоказателей.НайтиСледующий(Новый Структура("Сотрудник, Показатель", СтрокаТаблицы.Сотрудник, СвойстваПоказателя.Показатель)) Тогда
				СтрокаТаблицы[СвойстваПоказателя.КолонкаЗначение] = ВыборкаПоказателей.Значение;
				СтрокаТаблицы[СвойстваПоказателя.КолонкаКомментарий] = ВыборкаПоказателей.Комментарий;
				ВыборкаПоказателей.Сбросить();
			Иначе
				СтрокаТаблицы[СвойстваПоказателя.КолонкаЗначение] = Неопределено;
				СтрокаТаблицы[СвойстваПоказателя.КолонкаКомментарий] = Неопределено;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Модифицированность = Истина;
	
КонецПроцедуры


&НаСервере
Функция ПолучитьВыборкуПоказателей(МассивСотрудников, Период = Неопределено)
	
	Если Период = Неопределено Тогда
		Период = ПериодОценивания;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭП_ЭффективностьСотрудников.Сотрудник КАК Сотрудник,
	|	ЭП_ЭффективностьСотрудников.Показатель КАК Показатель,
	|	ЭП_ЭффективностьСотрудников.Значение КАК Значение,
	|	ЭП_ЭффективностьСотрудников.Комментарий КАК Комментарий
	|ИЗ
	|	РегистрСведений.ЭП_ЭффективностьСотрудников КАК ЭП_ЭффективностьСотрудников
	|ГДЕ
	|	ЭП_ЭффективностьСотрудников.ПериодОценивания = &ПериодОценивания
	|	И ЭП_ЭффективностьСотрудников.Ответственный = &Ответственный
	|	И ЭП_ЭффективностьСотрудников.Проект = &Проект
	|	И ЭП_ЭффективностьСотрудников.Показатель В(&МассивПоказателей)
	|	И ЭП_ЭффективностьСотрудников.Сотрудник.Ссылка В(&МассивСотрудников)
	|	И ЭП_ЭффективностьСотрудников.ПрофильРасчета = &ПрофильРасчета";
	
	Запрос.УстановитьПараметр("ПериодОценивания", Период);
	Запрос.УстановитьПараметр("Ответственный", Ответственный);
	Запрос.УстановитьПараметр("Проект", Проект);
	Запрос.УстановитьПараметр("ПрофильРасчета", РасчетныйПрофиль);
	Запрос.УстановитьПараметр("МассивПоказателей", ПрофильОценивания.Показатели.ВыгрузитьКолонку("Показатель"));
	Запрос.УстановитьПараметр("МассивСотрудников", МассивСотрудников);

	Выборка = Запрос.Выполнить().Выбрать();
	Возврат Выборка;
	
КонецФункции

&НаСервере
Процедура ЗаписатьТаблицуОценивания()
	
	Для Каждого СтрокТаблицы Из ТаблицаОценивания Цикл
		Для Каждого КлючЗначение Из СвойстваПоказателей Цикл
			СвойстваПоказателя = КлючЗначение.Значение;
			ЗаписатьПоказательЭффективности(СтрокТаблицы.Сотрудник, СвойстваПоказателя.Показатель, СтрокТаблицы[СвойстваПоказателя.КолонкаЗначение], СтрокТаблицы[СвойстваПоказателя.КолонкаКомментарий]);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


#Область ТаблицаПоСотруднику

&НаКлиенте
Процедура ТаблицаПоСотрудникуПриАктивизацииСтроки(Элемент)
	
	Если РежимВводаСписком Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ТаблицаПоСотруднику.ТекущиеДанные;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПоСотрудникуЗначениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаПоСотруднику.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТекущиеДанные.Значение > ТекущиеДанные.МаксЗначение Тогда
		ТекущиеДанные.Значение = ТекущиеДанные.МаксЗначение;
	КонецЕсли;

КонецПроцедуры


&НаСервере
Процедура ЗаполнитьТаблицуПоСотруднику()
	
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		ТаблицаПоСотруднику.Очистить();
		Возврат;
	КонецЕсли;
	
	Запрос = ЗапросПоказателейПоСотруднику(ПериодОценивания);	
	ТаблицаПоСотруднику.Загрузить(Запрос.Выполнить().Выгрузить());
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПоСотрудникуПоПрошломуМесяцу(ВыделенныеСтроки);
	
	Запрос = ЗапросПоказателейПоСотруднику(ДобавитьМесяц(ПериодОценивания, -1));	
	ВыборкаПоказателей = Запрос.Выполнить().Выбрать();
	
	Для Каждого ИдСтроки Из ВыделенныеСтроки Цикл
		СтрокаТаблицы = ТаблицаПоСотруднику.НайтиПоИдентификатору(ИдСтроки);
		Если ВыборкаПоказателей.НайтиСледующий(Новый Структура("Показатель", СтрокаТаблицы.Показатель)) Тогда
			СтрокаТаблицы.Значение = ВыборкаПоказателей.Значение;
			СтрокаТаблицы.Комментарий = ВыборкаПоказателей.Комментарий;
			ВыборкаПоказателей.Сбросить();
		Иначе
			СтрокаТаблицы.Значение = Неопределено;
			СтрокаТаблицы.Комментарий = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ЗапросПоказателейПоСотруднику(Период)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭП_ПрофилиОцениванияПоказатели.Показатель КАК Показатель,
	|	ЭП_ЭффективностьСотрудников.Значение КАК Значение,
	|	ЭП_ЭффективностьСотрудников.Комментарий КАК Комментарий,
	|	ЭП_ПрофилиОцениванияПоказатели.Показатель.ТипЗначения КАК ТипЗначения,
	|	ЭП_ПрофилиОцениванияПоказатели.Показатель.МинЗначение КАК МинЗначение,
	|	ЭП_ПрофилиОцениванияПоказатели.Показатель.МаксЗначение КАК МаксЗначение,
	|	ЭП_ПрофилиОцениванияПоказатели.Показатель.Комментарий КАК ОписаниеПоказателя
	|ИЗ
	|	Справочник.ЭП_ПрофилиОценивания.Показатели КАК ЭП_ПрофилиОцениванияПоказатели
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭП_ЭффективностьСотрудников КАК ЭП_ЭффективностьСотрудников
	|		ПО ЭП_ПрофилиОцениванияПоказатели.Показатель = ЭП_ЭффективностьСотрудников.Показатель
	|			И (ЭП_ЭффективностьСотрудников.ПериодОценивания = &ПериодОценивания)
	|			И (ЭП_ЭффективностьСотрудников.Ответственный = &Ответственный)
	|			И (ЭП_ЭффективностьСотрудников.Проект = &Проект)
	|			И ЭП_ПрофилиОцениванияПоказатели.Ссылка.Владелец = ЭП_ЭффективностьСотрудников.ПрофильРасчета
	|			И (ЭП_ЭффективностьСотрудников.Сотрудник = &Сотрудник)
	|ГДЕ
	|	ЭП_ПрофилиОцениванияПоказатели.Ссылка = &ПрофильОценивания
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭП_ПрофилиОцениванияПоказатели.НомерСтроки";
	
	Запрос.УстановитьПараметр("ПрофильОценивания", ПрофильОценивания);
	Запрос.УстановитьПараметр("ПериодОценивания", Период);
	Запрос.УстановитьПараметр("Ответственный", Ответственный);
	Запрос.УстановитьПараметр("Проект", Проект);
	Запрос.УстановитьПараметр("ПрофильРасчета", РасчетныйПрофиль);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	
	Возврат Запрос;

КонецФункции


&НаСервере
Процедура ЗаписатьТаблицуПоСотруднику()

	Для Каждого СтрокТаблицы Из ТаблицаПоСотруднику Цикл
		// Реквизиты берем из кэша, т.к. может быть запись при изменении реквизита
		ЗаписатьПоказательЭффективности(КэшРеквизитов.Сотрудник, СтрокТаблицы.Показатель, СтрокТаблицы.Значение, СтрокТаблицы.Комментарий);
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти


#Область Служебные

&НаСервере
Функция ПолучитьЗначениеРеквизита(ВладелецРеквизита, ИмяРеквизита)
	
	СтруктураРеквизита = Новый Структура(ИмяРеквизита);
	ЗаполнитьЗначенияСвойств(СтруктураРеквизита, ВладелецРеквизита);
	Возврат СтруктураРеквизита[ИмяРеквизита];
	
КонецФункции
	
&НаКлиенте
Процедура УправлениеВидимостью()
	
	Элементы.ФормаРежимВводаСписком.Пометка = РежимВводаСписком;
	
	Если Не РежимВводаСписком Тогда
		Элементы.Сотрудник.Видимость = Истина;
		Элементы.ГруппаСотрудник.Видимость = Истина;
		Элементы.ГруппаСписок.Видимость = Ложь;
		ТаблицаОценивания.Очистить();
	Иначе
		Элементы.Сотрудник.Видимость = Ложь;
		Элементы.ГруппаСотрудник.Видимость = Ложь;
		Элементы.ГруппаСписок.Видимость = Истина;
		ТаблицаПоСотруднику.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПоказательЭффективности(ТекСотрудник, Показатель, Значение, Комментарий)
	
	РегЗапись = РегистрыСведений.ЭП_ЭффективностьСотрудников.СоздатьМенеджерЗаписи();
	РегЗапись.Ответственный = Ответственный;
	
	// Используется кэш реквизитов, т.к. запись может происходить при изменении реквизита
	РегЗапись.ПериодОценивания = КэшРеквизитов.ПериодОценивания;
	РегЗапись.Проект = КэшРеквизитов.Проект;
	РегЗапись.ПрофильРасчета = РасчетныйПрофиль;
	
	РегЗапись.Сотрудник = ТекСотрудник;
	РегЗапись.Показатель = Показатель;
	РегЗапись.Значение = Значение;
	РегЗапись.Комментарий = Комментарий;
	РегЗапись.Записать(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетныйПрофильПриИзменении(Элемент)
	ПриИзмененииНастроекВвода("РасчетныйПрофиль");
КонецПроцедуры

#КонецОбласти






