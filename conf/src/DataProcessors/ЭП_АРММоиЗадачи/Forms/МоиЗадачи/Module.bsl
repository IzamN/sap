
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	УстановитьНастройкиСписков();  
	
	ЭтотОбъект.СписокНаправлены.Поля.Найти("СписокТегов").ТипЗначения = Новый ОписаниеТипов("Строка");
	ЭтотОбъект.СписокКонтролирующий.Поля.Найти("СписокТегов").ТипЗначения = Новый ОписаниеТипов("Строка");
		
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)														  
	
								  

КонецПроцедуры                                                     	

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ЗадачаПроцесса"
		Или ИмяСобытия = "Запись_Приоритет" Тогда
		
		ИначеЕсли Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаНаправлены Тогда
			Элементы.СписокНаправлены.Обновить();
		ИначеЕсли Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаКонтролирующий Тогда
			Элементы.СписокКонтролирующий.Обновить();
		КонецЕсли;
		
	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборСтатусЗадачиНаправленаПриИзменении(Элемент)
	
	УстановитьОтборыВСписках("Направлены");
	УстановитьОтборыВСписках("Контролирующий");  
	
КонецПроцедуры 

&НаКлиенте
Процедура ОтборСтатусЗадачиКонтролирующийПриИзменении(Элемент)
	
	УстановитьОтборыВСписках("Направлены");  
	УстановитьОтборыВСписках("Контролирующий");  
	
КонецПроцедуры  

&НаКлиенте
Процедура ОтборАвторНаправленаПриИзменении(Элемент)
	
		УстановитьОтборыВСписках("Направлены"); 
		УстановитьОтборыВСписках("Контролирующий");

		
КонецПроцедуры

&НаКлиенте
Процедура ОтборАвторКонтролирующийПриИзменении(Элемент)
	
		УстановитьОтборыВСписках("Направлены"); 
		УстановитьОтборыВСписках("Контролирующий");

КонецПроцедуры

&НаКлиенте
Процедура ОтборДатаПорученияПоЗадачеКонтролирующийПриИзменении(Элемент)
	
	УстановитьОтборыВСписках("Направлены"); 
	УстановитьОтборыВСписках("Контролирующий");

КонецПроцедуры 

&НаКлиенте
Процедура ОтборДатаПорученияПоЗадачеНаправленаПриИзменении(Элемент)
	
		УстановитьОтборыВСписках("Направлены");
		УстановитьОтборыВСписках("Контролирующий");
		
КонецПроцедуры

&НаКлиенте
Процедура ОтборИсполнительНаправленыПриИзменении(Элемент)
	
		 УстановитьОтборыВСписках("Направлены");
		 УстановитьОтборыВСписках("Контролирующий");

		 
КонецПроцедуры

&НаКлиенте
Процедура ОтборИсполнительКонтролирующийПриИзменении(Элемент)
	
		УстановитьОтборыВСписках("Направлены");
		УстановитьОтборыВСписках("Контролирующий");

КонецПроцедуры

&НаКлиенте
Процедура ОтборПроектНаправленаПриИзменении(Элемент)
	
	УстановитьОтборыВСписках("Направлены");
	УстановитьОтборыВСписках("Контролирующий");

КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначениеОтбораПроектПоУмолчанию()
	
	Окна = ПолучитьОкна();
	
	Для каждого ОткрытоеОкно из Окна Цикл
		
		Если ОткрытоеОкно.НачальнаяСтраница Тогда
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОткрытоеОкно.Содержимое[1], "ТекущийПроект") Тогда
				ПроектОтбор = ОткрытоеОкно.Содержимое[1].ТекущийПроект;	
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;	
	
	УстановитьОтборыВСписках("Направлены");
	УстановитьОтборыВСписках("Контролирующий");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПроектКонтролирующийПриИзменении(Элемент)
	
	УстановитьОтборыВСписках("Направлены");
	УстановитьОтборыВСписках("Контролирующий");

КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

&НаКлиенте
Процедура СписокНаправленыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры


&НаКлиенте
Процедура СписокКонтролирующийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры
  
#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ИзменитьВидРесурсаПоКоторомуОтображаетсяХодСогласования(Команда)
	
	ИзменитьВидРесурсаПоКоторомуОтображаетсяХодСогласования(Команда.Имя);
	
КонецПроцедуры

// ОбъектыНаКонтроле
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПостановкиНаКонтроль(Команда)
	
	ОбъектыНаКонтролеКлиент.ВыполнитьКомандуПостановкиНаКонтрольИзФормыСписка(ЭтотОбъект, Команда);
	
КонецПроцедуры
// Конец ОбъектыНаКонтроле

// Приоритеты
&НаКлиенте
Процедура Подключаемый_УстановитьПриоритет(Команда)
	
	ПриоритетыОчередиРаботыКлиент.ВыполнитьКомандуИзмененияПриоритетаИзФормыСписка(ЭтотОбъект, Команда);
	
КонецПроцедуры
// Конец Приоритеты

#КонецОбласти

#Область СписокНаправлены

&НаКлиенте
Процедура ВыполнитьЗадачуНаправлены(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка("ВыполнитьЗадачу", Элементы.СписокНаправлены);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапланироватьНаправлены(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка("Запланировать", Элементы.СписокНаправлены);
	
КонецПроцедуры

&НаКлиенте
Процедура НаправитьНаПроверкуНаправлены(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка("НаправитьНаПроверку", Элементы.СписокНаправлены);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветитьНаправлены(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка("Ответить", Элементы.СписокНаправлены);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренаправитьНаправлены(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка("Перенаправить", Элементы.СписокНаправлены);
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьКВыполнениюНаправлены(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка("ПринятьКВыполнению", Элементы.СписокНаправлены);
	
КонецПроцедуры

&НаКлиенте
Процедура СогласоватьНаправлены(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка("Согласовать",
	                                             Элементы.СписокНаправлены,
	                                             ЗадачиПроцессовКлиент.ПараметрыКомандыСписка(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура НеСогласоватьНаправлены(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка("НеСогласовать",
	                                             Элементы.СписокНаправлены,
	                                             ЗадачиПроцессовКлиент.ПараметрыКомандыСписка(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ЧастичноСогласоватьНаправлены(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка("ЧастичноСогласовать",
	                                             Элементы.СписокНаправлены,
	                                             ЗадачиПроцессовКлиент.ПараметрыКомандыСписка(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура НаправитьНаСогласованиеНаправлены(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка("НаправитьНаСогласование",
	                                             Элементы.СписокНаправлены,
	                                             ЗадачиПроцессовКлиент.ПараметрыКомандыСписка(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИсполнителяНаправлены(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка("ИзменитьИсполнителя", Элементы.СписокНаправлены);
	
КонецПроцедуры

&НаКлиенте
Процедура Ознакомиться(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка(Команда.Имя, Элементы.СписокНаправлены);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВыделенныеНаправлены(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.СписокНаправлены);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьУсловноеОформлениеМоиЗадачи(Команда) 
	
	ОткрытьФорму("Обработка.ЭП_АРММоиЗадачи.Форма.УсловноеОформлениеМоиЗадачи",,ЭтаФорма,,,,Новый ОписаниеОповещения("ПослеЗакрытияФормы",ЭтаФорма),РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
КонецПроцедуры
                                                                       	
&НаКлиенте
Процедура ПослеЗакрытияФормы(ПараметрЗакрытия, ДополнительныеПараметры) Экспорт   
	
	Если НЕ ПараметрЗакрытия = Неопределено Тогда
		
		Если ЗначениеЗаполнено(ПараметрЗакрытия.БулевоПросрочено) Тогда 
			
			БулевоПросрочено = ПараметрЗакрытия.БулевоПросрочено;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрЗакрытия.ДнейДоЗавершения) Тогда
			
			ДнейДоЗавершения = ПараметрЗакрытия.ДнейДоЗавершения;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрЗакрытия.БулевоДнейДоЗавершения) Тогда
			
			БулевоДнейДоЗавершения = ПараметрЗакрытия.БулевоДнейДоЗавершения;
			
		КонецЕсли;
		
		УстановитьУсловноеОформление();
		
	КонецЕсли;
	
КонецПроцедуры              

#КонецОбласти



#Область СписокКонтролирующий

&НаКлиенте
Процедура ВыполнитьЗадачуКонтролирующий(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка("ВыполнитьЗадачу", Элементы.СписокКонтролирующий);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапланироватьКонтролирующий(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка("Запланировать", Элементы.СписокКонтролирующий);
	
КонецПроцедуры

&НаКлиенте
Процедура НаправитьНаПроверкуКонтролирующий(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка("НаправитьНаПроверку", Элементы.СписокКонтролирующий);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветитьКонтролирующий(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка("Ответить", Элементы.СписокКонтролирующий);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренаправитьКонтролирующий(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка("Перенаправить", Элементы.СписокКонтролирующий);
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьКВыполнениюКонтролирующий(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка("ПринятьКВыполнению", Элементы.СписокКонтролирующий);
	
КонецПроцедуры

&НаКлиенте
Процедура СогласоватьКонтролирующий(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка("Согласовать", 
	                                             Элементы.СписокКонтролирующий, 
	                                             ЗадачиПроцессовКлиент.ПараметрыКомандыСписка(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура НеСогласоватьКонтролирующий(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка("НеСогласовать",
	                                             Элементы.СписокКонтролирующий,
                                                 ЗадачиПроцессовКлиент.ПараметрыКомандыСписка(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ЧастичноСогласоватьКонтролирующий(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка("ЧастичноСогласовать",
	                                             Элементы.СписокКонтролирующий,
	                                             ЗадачиПроцессовКлиент.ПараметрыКомандыСписка(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура НаправитьНаСогласованиеКонтролирующий(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка("НаправитьНаСогласование", 
	                                             Элементы.СписокКонтролирующий, 
	                                             ЗадачиПроцессовКлиент.ПараметрыКомандыСписка(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура НаправитьИсполнителямЗадачи(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка(Команда.Имя, Элементы.СписокКонтролирующий);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИсполнителяКонтролирующий(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка("ИзменитьИсполнителя", Элементы.СписокКонтролирующий);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВыделенныеКонтролирующий(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.СписокКонтролирующий);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	МассивИменСписков = МассивИменСписков();
	
	Для Каждого ИмяСписка Из МассивИменСписков Цикл
		
		СписокУсловноеОформление = ЭтотОбъект[ИмяСписка].КомпоновщикНастроек.Настройки.УсловноеОформление;
		СписокУсловноеОформление.Элементы.Очистить();
		
		Если РольДоступна("ЭП_ТестированиеДоработкиЗадачиПРоцесса") Тогда
			ЗадачиПроцессов.УстановитьУсловноеОформлениеПоляСостояниеВСписках(СписокУсловноеОформление); 
		КонецЕсли;  
		
	Если БулевоПросрочено = Истина Тогда
							
			Элемент = СписокУсловноеОформление.Элементы.Добавить();  
			
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КрайняяДатаОкончания");
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
			ОтборЭлемента.ПравоеЗначение = НачалоДня(ТекущаяДатаСеанса());
			
			ОтборЭлемента.Использование =  Истина;
			
			Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.ТусклоРозовый);    
		
	КонецЕсли;
	
	Если БулевоДнейДоЗавершения = Истина  Тогда   
		
		Элемент = СписокУсловноеОформление.Элементы.Добавить();

		ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
        ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
        
        Отбор = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
   		Отбор.ЛевоеЗначение = ДнейДоЗавершения; 
		Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		Отбор.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ЭП_ОсталосьДней");
		  
        
        Отбор = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
        Отбор.Использование = Истина;
        Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭП_ОсталосьДней");
        Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
        Отбор.ПравоеЗначение = 0;
       		
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Лимонный);
		
	КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьВидРесурсаПоКоторомуОтображаетсяХодСогласования(ИмяКоманды)

	МассиИменСписков = МассивИменСписков();
	ЗадачиПроцессов.ИзменитьВидРесурсаПоКоторомуОтображаетсяХодСогласования(ЭтотОбъект, ИмяКоманды, МассиИменСписков);
	ЗадачиПроцессов.УправлениеВидимостьюКомандСписка(ЭтотОбъект, ПараметрыВидимостиКомандСписка());

КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкиСписков()

	СтруктураБыстрогоОтбора = Неопределено;
	Параметры.Свойство("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	МассивИменСписков = МассивИменСписков();
	
	ЗадачиПроцессов.СформироватьПодменюПоВидуРесурса(ЭтотОбъект);
	
	Для Каждого ИмяСписка Из МассивИменСписков Цикл
		
		ЗадачиПроцессов.УстановитьПараметрыДинамическогоСпискаЗадач(ЭтотОбъект[ИмяСписка], ВидСогласуемогоРесурсаДляВывода);
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект[ИмяСписка],
		                                                                   "ТекущийПользователь",
		                                                                   ТекущийПользователь,
		                                                                   Истина);
		
	КонецЦикла;
	
	Если СтруктураБыстрогоОтбора <> Неопределено
		И СтруктураБыстрогоОтбора.Свойство("РольВЗадаче") Тогда
		
		Если СтруктураБыстрогоОтбора.РольВЗадаче = "НаправленоПоручение" Тогда
			Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаНаправлены;
		ИначеЕсли СтруктураБыстрогоОтбора.РольВЗадаче = "Контролирующий" Тогда
			Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаКонтролирующий;
		
		КонецЕсли;
		
	КонецЕсли;
	
		

	
	ЗадачиПроцессов.ЗагрузитьНастройкуПоВидуРесурса(ЭтотОбъект,  МассивИменСписков);
	ЗадачиПроцессов.УправлениеВидимостьюКомандСписка(ЭтотОбъект, ПараметрыВидимостиКомандСписка());
	
	// ОбъектыНаКонтроле
	СпискиДляВыводаКомандКонтроля = Новый Массив;
	СпискиДляВыводаКомандКонтроля.Добавить(
		ОбъектыНаКонтроле.ДанныеСпискаДляВыводаКомандКонтроля(
		"СписокНаправлены", "СписокНаправленыГруппаКонтроль", "СписокНаправленыКонтекстноеМенюГруппаКонтроль"));
	СпискиДляВыводаКомандКонтроля.Добавить(		ОбъектыНаКонтроле.ДанныеСпискаДляВыводаКомандКонтроля(
		"СписокКонтролирующий", "СписокКонтролирующийГруппаКонтроль", "СписокКонтролирующийКонтекстноеМенюГруппаКонтроль"));
		ОбъектыНаКонтроле.НастроитьЭлементыПоставитьНаКонтрольВФормеСписка(ЭтотОбъект, СпискиДляВыводаКомандКонтроля);
	// Конец ОбъектыНаКонтроле
	
	// Приоритеты
	СпискиДляВыводаКомандПриоритета = Новый Массив;
	СпискиДляВыводаКомандПриоритета.Добавить(
		ПриоритетыОчередиРабот.ДанныеСпискаДляВыводаКомандПриоритета(
		"СписокНаправлены", "СписокНаправленыГруппаКонтроль", "СписокНаправленыКонтекстноеМенюГруппаКонтроль", "СписокНаправленыПриоритет"));
	СпискиДляВыводаКомандПриоритета.Добавить(ПриоритетыОчередиРабот.ДанныеСпискаДляВыводаКомандПриоритета(
		"СписокКонтролирующий", "СписокКонтролирующийГруппаКонтроль", "СписокКонтролирующийКонтекстноеМенюГруппаКонтроль", "СписокКонтролирующийПриоритет"));

	ПриоритетыОчередиРабот.НастроитьЭлементыПриоритетыВФормеСписка(ЭтотОбъект, 
	                                                               СпискиДляВыводаКомандПриоритета, 
	                                                               Справочники.ЗадачиПроцесса.ПустаяСсылка());
	// Конец Приоритеты
	
	
КонецПроцедуры

&НаСервере
Функция МассивИменСписков()
	
	МассивИменСписков = Новый Массив;
	МассивИменСписков.Добавить("СписокНаправлены");
	МассивИменСписков.Добавить("СписокКонтролирующий");
	
	
	Возврат МассивИменСписков;
	
КонецФункции

&НаСервере
Процедура УстановитьОтборыВСписках(ПостфиксСписка)
	
	ИмяСписка = "Список" + ПостфиксСписка;
	
	ЭтотОбъект[ИмяСписка].Отбор.Элементы.Очистить();
	
	Если ЗначениеЗаполнено(ПроектОтбор) Тогда
		
		ЭлементОтбора = ЭтотОбъект[ИмяСписка].Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭП_Проект");
		ЭлементОтбора. ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = ПроектОтбор;	        
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтатусЗадачиОтбор) Тогда
		
		ЭлементОтбора = ЭтотОбъект[ИмяСписка].Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭП_СтатусЗадачи");
		ЭлементОтбора. ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементОтбора.ПравоеЗначение = СтатусЗадачиОтбор;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИсполнительОтбор) Тогда
		
		ЭлементОтбора = ЭтотОбъект[ИмяСписка].Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Исполнитель");
		ЭлементОтбора. ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = ИсполнительОтбор;	
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АвторОтбор) Тогда
		
		ЭлементОтбора = ЭтотОбъект[ИмяСписка].Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭП_Автор");
		ЭлементОтбора. ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = АвторОтбор;	
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаПорученияПоЗадачеОтбор) Тогда
		
		ЭлементОтбора = ЭтотОбъект[ИмяСписка].Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")) ;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаПорученияПоЗадаче");
		ЭлементОтбора. ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = ДатаПорученияПоЗадачеОтбор;
		
	КонецЕсли; 

	Если ЗначениеЗаполнено(ВидЗадачиОтбор) Тогда
		
		ЭлементОтбора = ЭтотОбъект[ИмяСписка].Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭП_ВидЗадачи");
		ЭлементОтбора. ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементОтбора.ПравоеЗначение = ВидЗадачиОтбор;
		
	КонецЕсли;

	
КонецПроцедуры 

&НаСервере
Процедура УстановитьОтборСтатусЗадачи(ПостфиксСписка)
	
	ИмяСписка = "Список" + ПостфиксСписка;
	
	ЭтотОбъект[ИмяСписка].Отбор.Элементы.Очистить();
	
	Если ЗначениеЗаполнено(СтатусЗадачиОтбор) Тогда

	ЭлементОтбора = ЭтотОбъект[ИмяСписка].Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных") ) ;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭП_СтатусЗадачи");
	ЭлементОтбора. ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = СтатусЗадачиОтбор;
	
	КонецЕсли;
																			

КонецПроцедуры  

&НаСервере
Процедура УстановитьОтборАвтор(ПостфиксСписка)
	
	ИмяСписка = "Список" + ПостфиксСписка;
	
	ЭтотОбъект[ИмяСписка].Отбор.Элементы.Очистить();
	
	Если ЗначениеЗаполнено(АвторОтбор) Тогда

	ЭлементОтбора = ЭтотОбъект[ИмяСписка].Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных") ) ;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭП_Автор");
	ЭлементОтбора. ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = АвторОтбор;	
																		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборИсполнитель(ПостфиксСписка)
	
	ИмяСписка = "Список" + ПостфиксСписка;
	
	ЭтотОбъект[ИмяСписка].Отбор.Элементы.Очистить();

	Если ЗначениеЗаполнено(ИсполнительОтбор) Тогда
		
		ЭлементОтбора = ЭтотОбъект[ИмяСписка].Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных") ) ;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Исполнитель");
		ЭлементОтбора. ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = ИсполнительОтбор;	
		
	КонецЕсли;
	
КонецПроцедуры
																		
&НаСервере
Процедура УстановитьОтборДатаПорученияПоЗадаче(ПостфиксСписка)
	
	ИмяСписка = "Список" + ПостфиксСписка;
	ИмяОтбора = "ДатаПорученияПоЗадачеСписок" + ПостфиксСписка;
	
	ЭтотОбъект[ИмяСписка].Отбор.Элементы.Очистить();

	Если ЗначениеЗаполнено(ЭтотОбъект[ИмяОтбора]) Тогда
																					
	ЭлементОтбора = ЭтотОбъект[ИмяСписка].Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных") ) ;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаПорученияПоЗадаче");
	ЭлементОтбора. ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = ДатаПорученияПоЗадачеОтбор;
	
    КонецЕсли;  
КонецПроцедуры
																																				
&НаСервере
Процедура УстановитьОтборПроект(ПостфиксСписка)
	
	ИмяСписка = "Список" + ПостфиксСписка;
	
	АйдиПроект = ЭтотОбъект[ИмяСписка].Отбор.Элементы;
	
	Если ЗначениеЗаполнено(ПроектОтбор) Тогда
		
	ЭлементОтбора = ЭтотОбъект[ИмяСписка].Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных") ) ;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭП_Проект");
	ЭлементОтбора. ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = ПроектОтбор;	        
	
	КонецЕсли;
	
КонецПроцедуры    

&НаСервере
Функция ПараметрыВидимостиКомандСписка()
	
	ПараметрыВидимости = Новый Структура;
	
	МассивИменКомандСогласования = Новый Массив;
	
	МассивИменКомандСогласования.Добавить("СписокНаправленыКонтекстноеМенюНаправитьНаСогласование");
	МассивИменКомандСогласования.Добавить("СписокНаправленыКонтекстноеМенюСогласовать");
	МассивИменКомандСогласования.Добавить("СписокНаправленыКонтекстноеМенюНеСогласовать");
	МассивИменКомандСогласования.Добавить("СписокНаправленыКонтекстноеМенюЧастичноСогласовать");
	МассивИменКомандСогласования.Добавить("СписокНаправленыНаправитьНаСогласование");
	МассивИменКомандСогласования.Добавить("СписокНаправленыСогласовать");
	МассивИменКомандСогласования.Добавить("СписокНаправленыНеСогласовать");
	МассивИменКомандСогласования.Добавить("СписокНаправленыЧастичноСогласовать");
	
	
	МассивИменКомандСогласования.Добавить("СписокКонтролирующийКонтекстноеМенюНаправитьНаСогласование");
	МассивИменКомандСогласования.Добавить("СписокКонтролирующийКонтекстноеМенюСогласовать");
	МассивИменКомандСогласования.Добавить("СписокКонтролирующийКонтекстноеМенюНеСогласовать");
	МассивИменКомандСогласования.Добавить("СписокКонтролирующийКонтекстноеМенюЧастичноСогласовать");
	МассивИменКомандСогласования.Добавить("СписокКонтролирующийНаправитьНаСогласование");
	МассивИменКомандСогласования.Добавить("СписокКонтролирующийСогласовать");
	МассивИменКомандСогласования.Добавить("СписокКонтролирующийНеСогласовать");
	МассивИменКомандСогласования.Добавить("СписокКонтролирующийЧастичноСогласовать");
	
	
	ПараметрыВидимости.Вставить("ЗависящиеОтВыбораХодаСогласования", МассивИменКомандСогласования);
	
	МассивИменКомандИзменения = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивИменКомандИзменения, МассивИменКомандСогласования);
	
	МассивИменКомандИзменения.Добавить("СписокНаправленыПеренаправить");
	МассивИменКомандИзменения.Добавить("СписокНаправленыОтветить");
	МассивИменКомандИзменения.Добавить("СписокНаправленыНаправитьНаПроверку");
	МассивИменКомандИзменения.Добавить("СписокНаправленыЗапланировать");
	МассивИменКомандИзменения.Добавить("СписокНаправленыПринятьКВыполнению");
	МассивИменКомандИзменения.Добавить("СписокНаправленыВыполнить");
	МассивИменКомандИзменения.Добавить("СписокНаправленыКонтекстноеМенюПеренаправить");
	МассивИменКомандИзменения.Добавить("СписокНаправленыКонтекстноеМенюОтветить");
	МассивИменКомандИзменения.Добавить("СписокНаправленыНаправитьНаПроверку");
	МассивИменКомандИзменения.Добавить("СписокНаправленыКонтекстноеМенюЗапланировать");
	МассивИменКомандИзменения.Добавить("СписокНаправленыКонтекстноеМенюПринятьКВыполнению");
	МассивИменКомандИзменения.Добавить("СписокНаправленыКонтекстноеМенюВыполнить");
	
	
	МассивИменКомандИзменения.Добавить("СписокКонтролирующийПеренаправить");
	МассивИменКомандИзменения.Добавить("СписокКонтролирующийОтветить");
	МассивИменКомандИзменения.Добавить("СписокКонтролирующийНаправитьНаПроверку");
	МассивИменКомандИзменения.Добавить("СписокКонтролирующийЗапланировать");
	МассивИменКомандИзменения.Добавить("СписокКонтролирующийПринятьКВыполнению");
	МассивИменКомандИзменения.Добавить("СписокКонтролирующийВыполнить");
	МассивИменКомандИзменения.Добавить("СписокКонтролирующийКонтекстноеМенюПеренаправить");
	МассивИменКомандИзменения.Добавить("СписокКонтролирующийКонтекстноеМенюОтветить");
	МассивИменКомандИзменения.Добавить("СписокКонтролирующийНаправитьНаПроверку");
	МассивИменКомандИзменения.Добавить("СписокКонтролирующийКонтекстноеМенюЗапланировать");
	МассивИменКомандИзменения.Добавить("СписокКонтролирующийКонтекстноеМенюПринятьКВыполнению");
	МассивИменКомандИзменения.Добавить("СписокКонтролирующийКонтекстноеМенюВыполнить");
	
	ПараметрыВидимости.Вставить("ЗависящиеОтПраваНаИзменение", МассивИменКомандИзменения);
	
	МассивИменКолонокСписка = Новый Массив;
	МассивИменКолонокСписка.Добавить("СогласованоНаправлены");
	МассивИменКолонокСписка.Добавить("СогласованоВТекущейНаправлены");
	МассивИменКолонокСписка.Добавить("СогласованоВДочернихНаправлены");
	МассивИменКолонокСписка.Добавить("НаСогласованииНаправлены");
	МассивИменКолонокСписка.Добавить("НаСогласованииВТекущейНаправлены");
	МассивИменКолонокСписка.Добавить("НаСогласованииВДочернихНаправлены");
	МассивИменКолонокСписка.Добавить("СогласованоПроцентВыполненияНаправлены");
	МассивИменКолонокСписка.Добавить("ВыполняетсяСогласованиеНаправлены"); 
	
	
	
	
	МассивИменКолонокСписка.Добавить("СписокКонтролирующийСогласовано");
	МассивИменКолонокСписка.Добавить("СписокКонтролирующийСогласованоВТекущей");
	МассивИменКолонокСписка.Добавить("СписокКонтролирующийСогласованоВДочерних");
	МассивИменКолонокСписка.Добавить("СписокКонтролирующийНаСогласовании");
	МассивИменКолонокСписка.Добавить("СписокКонтролирующийНаСогласованииВТекущей");
	МассивИменКолонокСписка.Добавить("СписокКонтролирующийНаСогласованииВДочерних");
	МассивИменКолонокСписка.Добавить("СогласованоПроцентВыполненияКонтролирующий");
	
	ПараметрыВидимости.Вставить("КолонкиСогласовавние", МассивИменКолонокСписка);
	
	Возврат ПараметрыВидимости;
	
КонецФункции

&НаКлиенте
Процедура ПеренестиЗадачу(Направление)

	Если ТипЗнч(Элементы.СписокОчередьВыполнения.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПереносимойСтроки = Элементы.СписокОчередьВыполнения.ТекущиеДанные;
	
	Если ДанныеПереносимойСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьПереносРаботыПоКомандеНаСервере(ДанныеПереносимойСтроки, Направление);
	
	Элементы.СписокОчередьВыполнения.Обновить();

КонецПроцедуры

&НаСервере
Процедура ОбработатьПеретаскиваниеСтрокиНаСервере(ДанныеПереносимойСтроки, ДанныеСтрокиНазначения)
	
	ПриоритетыОчередиРабот.ОбработатьПеретаскиваниеСтроки(ТекущийПользователь, ДанныеПереносимойСтроки, ДанныеСтрокиНазначения);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПереносРаботыПоКомандеНаСервере(ДанныеПереносимойСтроки, ВариантПереноса)
	
	ПриоритетыОчередиРабот.ПеренестиЗадачуВОчередиПоКомандеИзСписка(ТекущийПользователь, ДанныеПереносимойСтроки, ВариантПереноса);
	
КонецПроцедуры

&НаКлиенте
Процедура БулевоПросроченоПриИзменении(Элемент) Экспорт
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура БулевоДнейДоЗавершенияПриИзменении(Элемент) 
	
	УстановитьУсловноеОформление(); 
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокНаправленыПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиПроцесса.ЭП_Проект КАК ЭП_Проект,
	|	ЭП_ТегиПоЗадачамПроцесса.Тег КАК Тег
	|ИЗ
	|	РегистрСведений.ЭП_ТегиПоЗадачамПроцесса КАК ЭП_ТегиПоЗадачамПроцесса
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО ЭП_ТегиПоЗадачамПроцесса.ЗадачаПроцесса = ЗадачиПроцесса.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗадачиПроцесса.ЭП_Проект,
	|	ЭП_ТегиПоЗадачамПроцесса.Тег";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Для Каждого СтрокаДанных из Строки Цикл 
			
			СтрокаТЧ = СтрокаДанных.Значение.Данные.СписокТегов;
			
			Если Выборка.ЭП_Проект = СтрокаДанных.Значение.Данные.ЭП_Проект Тогда
				
				СтрокаТЧ = СтрокаТЧ + Выборка.Тег + " " + Символы.ПС;
				
			КонецЕсли; 
			
			СтрокаДанных.Значение.Данные.СписокТегов = СтрокаТЧ;
			
		КонецЦикла; 
		
	КонецЦикла;
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокКонтролирующийПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиПроцесса.ЭП_Проект КАК ЭП_Проект,
	|	ЭП_ТегиПоЗадачамПроцесса.Тег КАК Тег
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭП_ТегиПоЗадачамПроцесса КАК ЭП_ТегиПоЗадачамПроцесса
	|		ПО (ЭП_ТегиПоЗадачамПроцесса.ЗадачаПроцесса = ЗадачиПроцесса.Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗадачиПроцесса.ЭП_Проект,
	|	ЭП_ТегиПоЗадачамПроцесса.Тег";
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Для Каждого СтрокаДанных из Строки Цикл 
			
			СтрокаТЧ = СтрокаДанных.Значение.Данные.СписокТегов;
			
			Если Выборка.ЭП_Проект = СтрокаДанных.Значение.Данные.ЭП_Проект Тогда	
				
				СтрокаТЧ = СтрокаТЧ + Выборка.Тег + " " + Символы.ПС;
				
			КонецЕсли;  
			
			СтрокаДанных.Значение.Данные.СписокТегов = СтрокаТЧ;
			
		КонецЦикла; 
		
	КонецЦикла;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЗадачиОтборПриИзменении(Элемент)
	УстановитьОтборыВСписках("Направлены");
	УстановитьОтборыВСписках("Контролирующий"); 
КонецПроцедуры

#КонецОбласти     
