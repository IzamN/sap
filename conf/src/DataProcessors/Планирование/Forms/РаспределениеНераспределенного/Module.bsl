#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбработатьПереданныеПараметры(Отказ);
	ЗаполнитьТаблицуСортировки();
	
	УстановитьУсловноеОформление();
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТаблицыРаспределения()
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапки

&НаКлиенте
Процедура ДекорацияДляКогоОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПерейтиПоНавигационнойСсылке(НавигационнаяСсылкаФорматированнойСтроки)
	
КонецПроцедуры

#КонецОбласти

#Область КомандыФормы

&НаКлиенте
Процедура Распределить(Команда)
	
	Закрыть(СтруктураВозврата());
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбработатьПереданныеПараметры(Отказ)
	
	Если Не ЗначениеЗаполнено(Параметры.Сотрудник) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указан пользователь для которого будет выполняться распределение.'"),,,, Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.ДатаНачалаПериода) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указана дата начала периода планирования.'"),,,, Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.ВидПлана) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указан вид плана.'"),,,, Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.ВидСогласуемогоРесурсаПлановыхРабот) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указан вид планируемого ресурса.'"),,,, Отказ);
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(Параметры.ДатыНачинаяС) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указаны возможные периоды начала распределения.'"),,,, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Сотрудник                                     = Параметры.Сотрудник;
	ДатаНачалаПериода                             = Параметры.ДатаНачалаПериода;
	ВидПлана                                      = Параметры.ВидПлана;
	ПороговоеЗначениеОтображениеЭтапПланЗанятости = Параметры.ПороговоеЗначениеОтображениеЭтапПланЗанятости;
	ВидСогласуемогоРесурсаПлановыхРабот           = Параметры.ВидСогласуемогоРесурсаПлановыхРабот;
	НормативПланируемогоВремени                   = Параметры.НормативПланируемогоВремени;
	
	Для Каждого ЭлементСписка Из Параметры.ДатыНачинаяС Цикл
		Элементы.РаспределятьНачинаяС.СписокВыбора.Добавить(ЭлементСписка.Значение, Формат(ЭлементСписка.Значение, "ДЛФ=D"));
	КонецЦикла;
	РаспределятьНачинаяС = Элементы.РаспределятьНачинаяС.СписокВыбора[0].Значение;
	
	СтрокаДляКого = СтроковыеФункции.ФорматированнаяСтрока(НСтр("ru = '<a href=""%1"">%2</a>'"),
	                                                       ПолучитьНавигационнуюСсылку(Сотрудник),
	                                                       СтрШаблон(НСтр("ru = 'Для %1'"),Строка(Сотрудник)));
	
	Элементы.ДекорацияДляКого.Заголовок = СтрокаДляКого;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицыРаспределения()

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаписиПлана.Сотрудник КАК Сотрудник,
	|	ЗаписиПлана.Работа    КАК Работа 
	|ПОМЕСТИТЬ ЭтапыПоКоторымЕстьЗаписи
	|ИЗ
	|	РегистрСведений.ЗаписиПлана КАК ЗаписиПлана
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Планы КАК Планы
	|		ПО (ЗаписиПлана.ИдентификаторПлана = Планы.ИдентификаторПлана
	|				И Планы.ВидПлана = &ВидПлана
	|				И Планы.НачалоПериода >= &ДатаНачалаПериода)
	|	ГДЕ ЗаписиПлана.Сотрудник = &Сотрудник 
	|;
	| 
	|////////////////////////////////////////////////////////////////////////////////1
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиПроцесса.Исполнитель           КАК Исполнитель,
	|	ЗадачиПроцесса.Ссылка                КАК Задача,
	|	ИерархияЗадачПроцесса.Родитель       КАК Родитель
	|ПОМЕСТИТЬ НевыполненныеЗадачиЭтапов
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИерархияЗадачПроцесса КАК ИерархияЗадачПроцесса
	|		ПО ЗадачиПроцесса.Ссылка = ИерархияЗадачПроцесса.ЗадачаПроцесса
	|			И ИерархияЗадачПроцесса.Уровень = 0
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТехническиеПроекты КАК ТехническиеПроекты
	|		ПО ЗадачиПроцесса.Предмет = ТехническиеПроекты.Ссылка
	|		И НЕ ТехническиеПроекты.ПометкаУдаления
	|		И ТехническиеПроекты.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыТехническихПроектов.Запланирован), ЗНАЧЕНИЕ(Перечисление.СтатусыТехническихПроектов.Активен))
	|ГДЕ
	|	ЗадачиПроцесса.Исполнитель = &Сотрудник
	|	И ЗадачиПроцесса.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Запланирована), ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.ПринятаКВыполнению))
	|	И НЕ ЗадачиПроцесса.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////2
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НевыполненныеЗадачиЭтапов.Исполнитель                            КАК Исполнитель,
	|	НевыполненныеЗадачиЭтапов.Родитель                               КАК Родитель,
	|	СУММА(ЕСТЬNULL(ИтогиСогласованияЗадачРесурсов.Запланировано, 0)) КАК Запланировано,
	|	СУММА(ЕСТЬNULL(УчетВремени.Длительность, 0))                     КАК УчетВремениСекунды
	|ПОМЕСТИТЬ ЭтапыСотрудникаЗапланированоУчетВремени
	|ИЗ
	|	НевыполненныеЗадачиЭтапов КАК НевыполненныеЗадачиЭтапов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИтогиСогласованияЗадачРесурсов КАК ИтогиСогласованияЗадачРесурсов
	|		ПО (ИтогиСогласованияЗадачРесурсов.ЗадачаПроцесса = НевыполненныеЗадачиЭтапов.Задача)
	|			И (ИтогиСогласованияЗадачРесурсов.ВидРесурса = &ВидСогласуемогоРесурсаПлановыхРабот)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УчетВремени КАК УчетВремени
	|		ПО (УчетВремени.Задача = НевыполненныеЗадачиЭтапов.Задача)
	|			И (УчетВремени.Пользователь = НевыполненныеЗадачиЭтапов.Исполнитель)
	|			И (УчетВремени.Период < &ДатаНачалаПериода)
	|
	|СГРУППИРОВАТЬ ПО
	|	НевыполненныеЗадачиЭтапов.Родитель,
	|	НевыполненныеЗадачиЭтапов.Исполнитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////3
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭтапыСотрудникаЗапланированоУчетВремени.Исполнитель                КАК Сотрудник,
	|	ВЫБОР 
	|		КОГДА ЗадачиПроцесса.ЗадачаШаблона = ЗНАЧЕНИЕ(Справочник.ЗадачиШаблонаПроцесса.ПустаяСсылка) 
	|			ТОГДА ЗадачиПроцесса.Предмет 
	|			ИНАЧЕ ЭтапыСотрудникаЗапланированоУчетВремени.Родитель
	|	КОНЕЦ                                                              КАК Этап,
	|	СУММА(ЭтапыСотрудникаЗапланированоУчетВремени.Запланировано)       КАК Запланировано,
	|	СУММА(ЭтапыСотрудникаЗапланированоУчетВремени.УчетВремениСекунды)  КАК УчетВремениСекунды
	|ПОМЕСТИТЬ ЭтапыСотрудникаДляОтображенияВПланах
	|ИЗ
	|	ЭтапыСотрудникаЗапланированоУчетВремени КАК ЭтапыСотрудникаЗапланированоУчетВремени
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО (ЭтапыСотрудникаЗапланированоУчетВремени.Родитель = ЗадачиПроцесса.Ссылка) 
	|ГДЕ
	|	ЭтапыСотрудникаЗапланированоУчетВремени.Запланировано > &ПороговоеЗначениеДляЭтапаПоЗапланировано
	|	ИЛИ ЭтапыСотрудникаЗапланированоУчетВремени.УчетВремениСекунды > &ПороговоеЗначениеДляЭтапаПоФакт
	|СГРУППИРОВАТЬ ПО
	|	ЭтапыСотрудникаЗапланированоУчетВремени.Исполнитель,
	|	ВЫБОР 
	|		КОГДА ЗадачиПроцесса.ЗадачаШаблона = ЗНАЧЕНИЕ(Справочник.ЗадачиШаблонаПроцесса.ПустаяСсылка) 
	|			ТОГДА ЗадачиПроцесса.Предмет 
	|			ИНАЧЕ ЭтапыСотрудникаЗапланированоУчетВремени.Родитель
	|	 КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////4
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭтапыСотрудникаДляОтображенияВПланах.Сотрудник КАК Сотрудник,
	|	ЭтапыСотрудникаДляОтображенияВПланах.Этап      КАК Этап,
	|	ЗадачиПроцесса.Ссылка                          КАК Задача,
	|	ЗадачиПроцесса.Исполнитель                     КАК ИсполнительЗадачи
	|ПОМЕСТИТЬ ЗадачиЭтапов
	|ИЗ
	|	ЭтапыСотрудникаДляОтображенияВПланах КАК ЭтапыСотрудникаДляОтображенияВПланах
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИерархияЗадачПроцесса КАК ИерархияЗадачПроцесса
	|		ПО ЭтапыСотрудникаДляОтображенияВПланах.Этап = ИерархияЗадачПроцесса.Родитель
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО (ИерархияЗадачПроцесса.ЗадачаПроцесса = ЗадачиПроцесса.Ссылка)
	|ГДЕ
	|	ЭтапыСотрудникаДляОтображенияВПланах.Этап ССЫЛКА Справочник.ЗадачиПроцесса
	|	И ЗадачиПроцесса.Исполнитель = &Сотрудник
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭтапыСотрудникаДляОтображенияВПланах.Сотрудник КАК Сотрудник,
	|	ЭтапыСотрудникаДляОтображенияВПланах.Этап      КАК Этап,
	|	ЗадачиПроцесса.Ссылка                          КАК Задача,
	|	ЗадачиПроцесса.Исполнитель                     КАК ИсполнительЗадачи
	|ИЗ
	|	ЭтапыСотрудникаДляОтображенияВПланах КАК ЭтапыСотрудникаДляОтображенияВПланах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцессаЭтапы
	|			ПО (ЭтапыСотрудникаДляОтображенияВПланах.Этап = ЗадачиПроцессаЭтапы.Предмет) 
	|			И ЗадачиПроцессаЭтапы.ЗадачаШаблона = ЗНАЧЕНИЕ(Справочник.ЗадачиШаблонаПроцесса.ПустаяСсылка)
	|				И ЗадачиПроцессаЭтапы.Родитель = ЗНАЧЕНИЕ(Справочник.ЗадачиПроцесса.ПустаяСсылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИерархияЗадачПроцесса КАК ИерархияЗадачПроцесса
	|		ПО ЗадачиПроцессаЭтапы.Ссылка = ИерархияЗадачПроцесса.Родитель
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО (ИерархияЗадачПроцесса.ЗадачаПроцесса = ЗадачиПроцесса.Ссылка)
	|ГДЕ
	|	ЭтапыСотрудникаДляОтображенияВПланах.Этап ССЫЛКА Справочник.ТехническиеПроекты
	|	И ЗадачиПроцесса.Исполнитель = &Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////5
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиЭтапов.Сотрудник                                    КАК Сотрудник,
	|	ЗадачиЭтапов.Этап                                         КАК Этап,
	|	ЗадачиЭтапов.Задача                                       КАК Задача,
	|	ЕСТЬNULL(ИтогиСогласованияЗадачРесурсов.Запланировано, 0) КАК Запланировано
	|ПОМЕСТИТЬ ЗапланированоПоЗадачам
	|ИЗ
	|	ЗадачиЭтапов КАК ЗадачиЭтапов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО ЗадачиЭтапов.Задача = ЗадачиПроцесса.Ссылка
	|			И (НЕ ЗадачиПроцесса.ПометкаУдаления)
	|			И (ЗадачиПроцесса.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Отменена))
	|			И (ВЫБОР
	|				КОГДА ЗадачиПроцесса.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Выполнена)
	|					ТОГДА ВЫБОР
	|							КОГДА ЗадачиПроцесса.ФактическаяДатаОкончания < &ДатаНачалаПериода
	|								ТОГДА ЛОЖЬ
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|			И ЗадачиЭтапов.Сотрудник = ЗадачиПроцесса.Исполнитель
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИтогиСогласованияЗадачРесурсов КАК ИтогиСогласованияЗадачРесурсов
	|		ПО ЗадачиЭтапов.Задача = ИтогиСогласованияЗадачРесурсов.ЗадачаПроцесса
	|			И (ИтогиСогласованияЗадачРесурсов.ВидРесурса = &ВидСогласуемогоРесурсаПлановыхРабот)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////6
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиЭтапов.Сотрудник                       КАК Сотрудник,
	|	ЗадачиЭтапов.Этап                            КАК Этап,
	|	ЗадачиЭтапов.Задача                          КАК Задача,
	|	СУММА(ЕСТЬNULL(УчетВремени.Длительность, 0)) КАК Длительность
	|ПОМЕСТИТЬ ПотраченоПоЗадачам
	|ИЗ
	|	ЗадачиЭтапов КАК ЗадачиЭтапов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО ЗадачиЭтапов.Задача = ЗадачиПроцесса.Ссылка
	|			И (НЕ ЗадачиПроцесса.ПометкаУдаления)
	|			И (ЗадачиПроцесса.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Отменена))
	|			И (ВЫБОР
	|				КОГДА ЗадачиПроцесса.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Выполнена)
	|					ТОГДА ВЫБОР
	|							КОГДА ЗадачиПроцесса.ФактическаяДатаОкончания < &ДатаНачалаПериода
	|								ТОГДА ЛОЖЬ
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|			И ЗадачиЭтапов.Сотрудник = ЗадачиПроцесса.Исполнитель
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УчетВремени КАК УчетВремени
	|		ПО ЗадачиЭтапов.Задача = УчетВремени.Задача
	|		И УчетВремени.Период < &ДатаНачалаПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗадачиЭтапов.Сотрудник,
	|	ЗадачиЭтапов.Этап,
	|	ЗадачиЭтапов.Задача
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////7
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗапланированоПоЗадачам.Сотрудник КАК Сотрудник,
	|	ЗапланированоПоЗадачам.Этап      КАК Этап,
	|	СУММА(ВЫБОР
	|			КОГДА ЗапланированоПоЗадачам.Запланировано * 3600 > ПотраченоПоЗадачам.Длительность
	|				ТОГДА ЗапланированоПоЗадачам.Запланировано * 3600 - ПотраченоПоЗадачам.Длительность
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Остаток
	|ПОМЕСТИТЬ ОстатокКРаспределению
	|ИЗ
	|	ЗапланированоПоЗадачам КАК ЗапланированоПоЗадачам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПотраченоПоЗадачам КАК ПотраченоПоЗадачам
	|		ПО ЗапланированоПоЗадачам.Сотрудник = ПотраченоПоЗадачам.Сотрудник
	|			И ЗапланированоПоЗадачам.Этап = ПотраченоПоЗадачам.Этап
	|			И ЗапланированоПоЗадачам.Задача = ПотраченоПоЗадачам.Задача
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапланированоПоЗадачам.Сотрудник,
	|	ЗапланированоПоЗадачам.Этап
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Этап
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////8
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(Планы.КонецПериода)  КАК ПланируемыеТрудозатраты	
	|ИЗ
	|	РегистрСведений.ЗаписиПлана КАК ЗаписиПлана
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Планы КАК Планы
	|		ПО (Планы.ИдентификаторПлана = ЗаписиПлана.ИдентификаторПлана)
	|			И (Планы.ВидПлана = &ВидПлана)
	|			И (Планы.НачалоПериода >= &ДатаНачалаПериода)
	|ГДЕ
	|	ЗаписиПлана.Сотрудник = &Сотрудник
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////9
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	МИНИМУМ(Планы.НачалоПериода)               КАК НачалоПериода,
	|	СУММА(ЗаписиПлана.ПланируемыеТрудозатраты) КАК ПланируемыеТрудозатраты,
	|	ЭтапыСотрудникаДляОтображенияВПланах.Этап  КАК Этап
	|ПОМЕСТИТЬ ЗапланированоПланыЗанятости
	|ИЗ
	|	ЭтапыСотрудникаДляОтображенияВПланах КАК ЭтапыСотрудникаДляОтображенияВПланах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаписиПлана КАК ЗаписиПлана
	|		ПО ЭтапыСотрудникаДляОтображенияВПланах.Этап = ЗаписиПлана.Работа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Планы КАК Планы
	|		ПО (Планы.ИдентификаторПлана = ЗаписиПлана.ИдентификаторПлана)
	|			И (Планы.ВидПлана = &ВидПлана)
	|			И (Планы.НачалоПериода >= &ДатаНачалаПериода)
	|ГДЕ
	|	ЗаписиПлана.Сотрудник = &Сотрудник
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭтапыСотрудникаДляОтображенияВПланах.Этап
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////10
	|ВЫБРАТЬ
	|	ОстатокКРаспределению.Этап                                                                              КАК Этап,
	|	ОстатокКРаспределению.Остаток - ЕСТЬNULL(ЗапланированоПланыЗанятости.ПланируемыеТрудозатраты * 3600, 0) КАК Нераспределено
	|ПОМЕСТИТЬ НераспределенныеЭтапы
	|ИЗ
	|	ОстатокКРаспределению КАК ОстатокКРаспределению
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗапланированоПланыЗанятости КАК ЗапланированоПланыЗанятости
	|		ПО ОстатокКРаспределению.Этап = ЗапланированоПланыЗанятости.Этап
	|ГДЕ
	|	ОстатокКРаспределению.Остаток - ЕСТЬNULL(ЗапланированоПланыЗанятости.ПланируемыеТрудозатраты * 3600, 0) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////11
	|ВЫБРАТЬ
	|	ЭтапыСотрудникаДляОтображенияВПланах.Этап                                                  КАК Этап,
	|	ЕСТЬNULL(ЗадачиПроцесса.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.ПустаяСсылка)) КАК Статус,
	|	ЕСТЬNULL(ЗадачиПроцесса.ПлановаяДатаНачала, &ПустаяДата)                                   КАК ПлановаяДатаНачалаЗадача,
	|	ЕСТЬNULL(ЗадачиПроцесса.КрайняяДатаОкончания, &ПустаяДата)                                 КАК КрайняяДатаОкончанияЗадача,
	|	ЕСТЬNULL(ЗапланированоПланыЗанятости.НачалоПериода, &ДатаНепланировавшихсяЭтапов)          КАК ПерваяДатаПланаПоЭтапу,
	|	ЕСТЬNULL(ЗапланированоПланыЗанятости.ПланируемыеТрудозатраты, 0)                           КАК ПланируемыеТрудозатраты,
	|	ЕСТЬNULL(НераспределенныеЭтапы.Нераспределено, 0)                                          КАК Нераспределено,
	|	ВЫБОР
	|		КОГДА ЭтапыСотрудникаДляОтображенияВПланах.Этап ССЫЛКА Справочник.ЗадачиПроцесса
	|		ТОГДА ЕСТЬNULL(ТехническиеПроекты.Ссылка, ЗНАЧЕНИЕ(Справочник.ТехническиеПроекты.ПустаяСсылка))
	|		ИНАЧЕ ТехническиеПроектыЭтапыБезШаблона.Ссылка
	|	КОНЕЦ                                                                                      КАК ТехПроект,
	|	ВЫБОР
	|			КОГДА ЭтапыСотрудникаДляОтображенияВПланах.Этап ССЫЛКА Справочник.ЗадачиПроцесса
	|				ТОГДА ЕСТЬNULL(ТехническиеПроекты.Версия, ЗНАЧЕНИЕ(Справочник.ВерсииПроекта.ПустаяСсылка))
	|			ИНАЧЕ ТехническиеПроектыЭтапыБезШаблона.Версия
	|	КОНЕЦ                                                                                      КАК Версия,
	|	ВЫБОР
	|			КОГДА ЭтапыСотрудникаДляОтображенияВПланах.Этап ССЫЛКА Справочник.ЗадачиПроцесса
	|				ТОГДА ЕСТЬNULL(ТехническиеПроекты.ПлановаяДатаОкончания, &ПустаяДата)
	|			ИНАЧЕ ТехническиеПроектыЭтапыБезШаблона.ПлановаяДатаОкончания
	|	КОНЕЦ                                                                                      КАК ПлановаяДатаОкончанияТехПроект,
	|	ВЫБОР
	|			КОГДА ЭтапыСотрудникаДляОтображенияВПланах.Этап ССЫЛКА Справочник.ЗадачиПроцесса
	|				ТОГДА ЕСТЬNULL(ТехническиеПроекты.ПлановаяДатаНачала, &ПустаяДата)
	|			ИНАЧЕ ТехническиеПроектыЭтапыБезШаблона.ПлановаяДатаНачала
	|	КОНЕЦ                                                                                       КАК ПлановаяДатаНачалаТехПроект,
	|	ЕСТЬNULL(СостоянияЗадачПроцессов.ЗначениеУпорядочивания, 0)                                 КАК ЗначениеУпорядочивания
	|ИЗ
	|		ЭтапыСотрудникаДляОтображенияВПланах КАК ЭтапыСотрудникаДляОтображенияВПланах
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|			ПО ЭтапыСотрудникаДляОтображенияВПланах.Этап = ЗадачиПроцесса.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТехническиеПроекты КАК ТехническиеПроекты
	|			ПО (ЗадачиПроцесса.Предмет = ТехническиеПроекты.Ссылка)
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТехническиеПроекты КАК ТехническиеПроектыЭтапыБезШаблона
	|			ПО (ЭтапыСотрудникаДляОтображенияВПланах.Этап = ТехническиеПроектыЭтапыБезШаблона.Ссылка)
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗадачПроцессов КАК СостоянияЗадачПроцессов
	|			ПО ЭтапыСотрудникаДляОтображенияВПланах.Этап = СостоянияЗадачПроцессов.ЗадачаПроцесса
	|			ЛЕВОЕ СОЕДИНЕНИЕ ЗапланированоПланыЗанятости КАК ЗапланированоПланыЗанятости
	|			ПО ЭтапыСотрудникаДляОтображенияВПланах.Этап = ЗапланированоПланыЗанятости.Этап
	|			ЛЕВОЕ СОЕДИНЕНИЕ НераспределенныеЭтапы КАК НераспределенныеЭтапы
	|			ПО ЭтапыСотрудникаДляОтображенияВПланах.Этап = НераспределенныеЭтапы.Этап
	|УПОРЯДОЧИТЬ ПО
	|	ПерваяДатаПланаПоЭтапу,
	|	ПланируемыеТрудозатраты,
	|	ЗначениеУпорядочивания"; 
	
	Запрос.УстановитьПараметр("ВидПлана",                                 ВидПлана);
	Запрос.УстановитьПараметр("ПустаяДата",                               Дата(1,1,1));
	Запрос.УстановитьПараметр("ДатаНачалаПериода",                        ДатаНачалаПериода);
	Запрос.УстановитьПараметр("ДатаНепланировавшихсяЭтапов",              ДатаНепланировавшихсяЭтапов());
	Запрос.УстановитьПараметр("Сотрудник",                                Сотрудник);
	Запрос.УстановитьПараметр("ПороговоеЗначениеДляЭтапаПоЗапланировано", ПороговоеЗначениеОтображениеЭтапПланЗанятости);
	Запрос.УстановитьПараметр("ПороговоеЗначениеДляЭтапаПоФакт",          ПороговоеЗначениеОтображениеЭтапПланЗанятости);
	Запрос.УстановитьПараметр("ВидСогласуемогоРесурсаПлановыхРабот",      ВидСогласуемогоРесурсаПлановыхРабот);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ЗадачиПроцессов.ПоказатьВременнуюТаблицу(Запрос, "ЗапланированоПланыЗанятости");
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ТаблицаКРаспределению.Добавить();
		
		НоваяСтрока.Этап              = ?(ТипЗнч(Выборка.Этап) = Тип("СправочникСсылка.ТехническиеПроекты"), Справочники.ЗадачиПроцесса.ПустаяСсылка(), Выборка.Этап);
		НоваяСтрока.ТехническийПроект = Выборка.ТехПроект;
		НоваяСтрока.Версия            = Выборка.Версия;
		НоваяСтрока.Статус            = Выборка.Статус;
		НоваяСтрока.ДатаНачала        = ?(ТипЗнч(Выборка.Этап) = Тип("СправочникСсылка.ТехническиеПроекты"), Выборка.ПлановаяДатаНачалаТехПроект, Выборка.ПлановаяДатаНачалаЗадача);
		НоваяСтрока.ДатаОкончания     = ?(ТипЗнч(Выборка.Этап) = Тип("СправочникСсылка.ТехническиеПроекты"), Выборка.ПлановаяДатаОкончанияТехПроект, Выборка.КрайняяДатаОкончанияЗадача) ;
		НоваяСтрока.Нераспределено    = ПланированиеКлиентСервер.ЧасыПоДлительностиВСекундах(Выборка.Нераспределено);
		НоваяСтрока.Запланировано     = Выборка.ПланируемыеТрудозатраты;
		НоваяСтрока.ВПланахС          = Выборка.ПерваяДатаПланаПоЭтапу;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция СтруктураВозврата()
	
	Результат = Новый Структура;
	Результат.Вставить("Этапы",                       Новый Массив);
	Результат.Вставить("ВидПлана",                    ВидПлана);
	Результат.Вставить("ДатаНачалаПериода",           ДатаНачалаПериода);
	Результат.Вставить("Сотрудник",                   Сотрудник);
	Результат.Вставить("РаспределятьНачинаяС",        РаспределятьНачинаяС);
	Результат.Вставить("НормативПланируемогоВремени", НормативПланируемогоВремени);
	
	Для Каждого СтрокаТаблицы Из ТаблицаКРаспределению Цикл
		
		ДанныеЭтапа = Новый Структура;
		ДанныеЭтапа.Вставить("Этап", ?(ЗначениеЗаполнено(СтрокаТаблицы.Этап), СтрокаТаблицы.Этап, СтрокаТаблицы.ТехническийПроект));
		ДанныеЭтапа.Вставить("Нераспределено", СтрокаТаблицы.Нераспределено);
		
		Результат.Этапы.Добавить(ДанныеЭтапа);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ДатаНепланировавшихсяЭтапов = ДатаНепланировавшихсяЭтапов();
	
	//Этап не заполнен, это этапы верхнего уровня по проекту
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаКРаспределениюЭтап.Имя);
	
	ЭлементОтбора =  Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаКРаспределению.Этап");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Задачи не по шаблону>'"));
	
	//Нераспределено больше 0
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаКРаспределениюНераспределено.Имя);
	
	ЭлементОтбора =  Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаКРаспределению.Нераспределено");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Больше;
	ЭлементОтбора.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗонаЗадачиКрасный); 
	
	//Нераспределено больше 0
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаКРаспределениюВПланахС.Имя);
	
	ЭлементОтбора =  Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаКРаспределению.ВПланахС");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = ДатаНепланировавшихсяЭтапов;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не планировалось>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаВыполненнойЗадачи);


КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуСортировки()
	
	ДобавитьСтрокуТаблицыСортировки("ВПланахС",                  НСтр("ru = 'В планах с'"),              "Возр", Истина);
	ДобавитьСтрокуТаблицыСортировки("Версия",                    НСтр("ru = 'Версия'"),                  "Возр", Истина);
	ДобавитьСтрокуТаблицыСортировки("Запланировано",             НСтр("ru = 'Уже запланировано'"),       "Убыв", Ложь);
	ДобавитьСтрокуТаблицыСортировки("Нераспределено",            НСтр("ru = 'Нераспределено'") ,         "Убыв", Ложь);
	ДобавитьСтрокуТаблицыСортировки("ДатаНачала",                НСтр("ru = 'Плановая дата начала'"),    "Возр", Ложь);
	ДобавитьСтрокуТаблицыСортировки("ДатаОкончания",             НСтр("ru = 'Плановая дата окончания'"), "Возр", Ложь);
	
	ОтобразитьКартинкиСортировкиКолонкахТаблицы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуТаблицыСортировки(ПолеСортировки, ПредставлениеПоляСортировки, НаправлениеСортировки, Используется)
	
	НоваяСтрока = НастройкаСортировки.Добавить();
	НоваяСтрока.ПолеСортировки              = ПолеСортировки;
	НоваяСтрока.ПредставлениеПоляСортировки = ПредставлениеПоляСортировки;
	НоваяСтрока.НаправлениеСортировки       = НаправлениеСортировки;
	НоваяСтрока.ИспользуетсяПриСортировке   = Используется;
	
КонецПроцедуры

&НаСервере
Функция ДатаНепланировавшихсяЭтапов()

	Возврат ДобавитьМесяц(ДатаНачалаПериода, 36);

КонецФункции

&НаКлиенте
Процедура ПрименитьНастройкиСортировки(Команда)
	
	СтрокаСортировки = "";
	Для Каждого СтрокаТаблицыНастроек Из НастройкаСортировки Цикл
		
		Если СтрокаТаблицыНастроек.ИспользуетсяПриСортировке Тогда
			
			Если Не ПустаяСтрока(СтрокаСортировки) Тогда
				СтрокаСортировки = СтрокаСортировки + ",";
			КонецЕсли;
			
			СтрокаСортировки = СтрокаСортировки +СтрокаТаблицыНастроек.ПолеСортировки + " " + СтрокаТаблицыНастроек.НаправлениеСортировки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ПустаяСтрока(СтрокаСортировки) Тогда 
		ТаблицаКРаспределению.Сортировать(СтрокаСортировки);
	КонецЕсли; 
	
	ТекущийЭлемент = Элементы.ТаблицаКРаспределению;
	
	ОтобразитьКартинкиСортировкиКолонкахТаблицы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьКартинкиСортировкиКолонкахТаблицы(Форма)
	
	Для Каждого СтрокаТаблицыСортировки Из Форма.НастройкаСортировки Цикл
		
		Если СтрокаТаблицыСортировки.ИспользуетсяПриСортировке Тогда
			
			Если СтрокаТаблицыСортировки.НаправлениеСортировки = "Возр" Тогда
				КартинкаШапки = БиблиотекаКартинок.СтрелкаВверх;
			Иначе
				КартинкаШапки = БиблиотекаКартинок.СтрелкаВниз;
			КонецЕсли;
			
		Иначе
			
			КартинкаШапки = Новый Картинка(); 
			
		КонецЕсли;
		
		Форма.Элементы["ТаблицаКРаспределению" + СтрокаТаблицыСортировки.ПолеСортировки].КартинкаШапки = КартинкаШапки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти