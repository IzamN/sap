
Функция UpdateSotrinformPOST(Запрос)
	Ответ = Новый HTTPСервисОтвет(200);
	Попытка
	
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Запрос.ПолучитьТелоКакСтроку());
	 
	НоменклатураМассив = ПрочитатьJSON(ЧтениеJSON);    
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаДанныхПоСотрудникам = ПреобразоватьМассивВТаблицуЗначений(НоменклатураМассив);
	ДостижениеИспытательныйСрок = Справочники.ЭП_ВидыДостиженийСотрудников.ИспытательныйСрок;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаСотрудники.ФИО КАК ФИО,
	|	ТаблицаСотрудники.Фамилия КАК Фамилия,
	|	ТаблицаСотрудники.Имя КАК Имя,
	|	ТаблицаСотрудники.Отчество КАК Отчество,
	|	ТаблицаСотрудники.Пол КАК Пол,
	|	ТаблицаСотрудники.ТабельныйНомер КАК ТабельныйНомер,
	|	ТаблицаСотрудники.ДатаУвольнения КАК ДатаУвольнения,
	|	ТаблицаСотрудники.ДатаПриёма КАК ДатаПриёма,
	|	ТаблицаСотрудники.ДатаРождения КАК ДатаРождения,
	|	ТаблицаСотрудники.ДолжностьСсылка КАК ДолжностьСсылка,
	|	ТаблицаСотрудники.ОрганизацияСсылка КАК ОрганизацияСсылка,
	|	ТаблицаСотрудники.ПодразделениеСсылка КАК ПодразделениеСсылка,
	|	ТаблицаСотрудники.СсылкаСотрудник КАК СсылкаНаСотрудника,
	|	ТаблицаСотрудники.АдресЭП КАК АдресЭП,
	|	ТаблицаСотрудники.НомерТелефона КАК НомерТелефона,
	|	ТаблицаСотрудники.ИспытательныйСрок КАК ИспытательныйСрок,
	|	ТаблицаСотрудники.Оклад КАК Оклад,
	|	ТаблицаСотрудники.ГрафикРаботыСсылка КАК ГрафикРаботыСсылка,
	|	ТаблицаСотрудники.ОсновноеМестоРаботы КАК ОсновноеМестоРаботы
	|ПОМЕСТИТЬ ВТ_ДанныеИзЗУП
	|ИЗ
	|	&ТаблицаСотрудники КАК ТаблицаСотрудники
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДанныеИзЗУП.СсылкаНаСотрудника КАК СсылкаНаСотрудника,
	|	ВТ_ДанныеИзЗУП.ИспытательныйСрок КАК ДатаПлан
	|ПОМЕСТИТЬ ВТ_СотрудникиБезИспытательногоСрока
	|ИЗ
	|	ВТ_ДанныеИзЗУП КАК ВТ_ДанныеИзЗУП
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭП_Сотрудники.Достижения КАК ЭП_СотрудникиДостижения
	|		ПО ВТ_ДанныеИзЗУП.СсылкаНаСотрудника = ЭП_СотрудникиДостижения.Ссылка
	|			И (ЭП_СотрудникиДостижения.ВидДостижения = &ВидДостижения)
	|ГДЕ
	|	ЭП_СотрудникиДостижения.ДатаПлан ЕСТЬ NULL
	|	И НЕ ВТ_ДанныеИзЗУП.ИспытательныйСрок = ДАТАВРЕМЯ(1, 1, 1)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДанныеИзЗУП.СсылкаНаСотрудника КАК СсылкаНаСотрудника,
	|	СУММА(ВТ_ДанныеИзЗУП.Оклад) КАК Оклад
	|ПОМЕСТИТЬ ВТ_СуммаПоСотруднику
	|ИЗ
	|	ВТ_ДанныеИзЗУП КАК ВТ_ДанныеИзЗУП
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ДанныеИзЗУП.СсылкаНаСотрудника
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СуммаПоСотруднику.СсылкаНаСотрудника КАК СсылкаНаСотрудника,
	|	ВТ_СуммаПоСотруднику.Оклад КАК Оклад,
	|	ЭП_ОкладыСотрудниковСрезПоследних.Оклад КАК ОкладСтарый
	|ИЗ
	|	ВТ_СуммаПоСотруднику КАК ВТ_СуммаПоСотруднику
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭП_ОкладыСотрудников.СрезПоследних(
	|				,
	|				Сотрудник В
	|					(ВЫБРАТЬ
	|						ВТ_ДанныеИзЗУП.СсылкаНаСотрудника КАК СсылкаНаСотрудника
	|					ИЗ
	|						ВТ_ДанныеИзЗУП КАК ВТ_ДанныеИзЗУП)) КАК ЭП_ОкладыСотрудниковСрезПоследних
	|		ПО ВТ_СуммаПоСотруднику.СсылкаНаСотрудника = ЭП_ОкладыСотрудниковСрезПоследних.Сотрудник
	|ГДЕ
	|	НЕ ЕСТЬNULL(ЭП_ОкладыСотрудниковСрезПоследних.Оклад, 0) = ВТ_СуммаПоСотруднику.Оклад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДанныеИзЗУП.ФИО КАК ФИО,
	|	ВТ_ДанныеИзЗУП.Фамилия КАК Фамилия,
	|	ВТ_ДанныеИзЗУП.Имя КАК Имя,
	|	ВТ_ДанныеИзЗУП.Отчество КАК Отчество,
	|	ВТ_ДанныеИзЗУП.Пол КАК Пол,
	|	ВТ_ДанныеИзЗУП.ТабельныйНомер КАК ТабельныйНомер,
	|	ВТ_ДанныеИзЗУП.ДатаУвольнения КАК ДатаУвольнения,
	|	ВТ_ДанныеИзЗУП.ДатаПриёма КАК ДатаПринятия,
	|	ВТ_ДанныеИзЗУП.ДатаРождения КАК ДатаРождения,
	|	ВТ_ДанныеИзЗУП.ДолжностьСсылка КАК Должность,
	|	ВТ_ДанныеИзЗУП.ОрганизацияСсылка КАК Организация,
	|	ВТ_ДанныеИзЗУП.ПодразделениеСсылка КАК Подразделение,
	|	ВТ_ДанныеИзЗУП.СсылкаНаСотрудника КАК СсылкаНаСотрудника,
	|	ВТ_ДанныеИзЗУП.АдресЭП КАК АдресЭП,
	|	ВТ_ДанныеИзЗУП.НомерТелефона КАК НомерТелефона,
	|	ВТ_ДанныеИзЗУП.ИспытательныйСрок КАК ИспытательныйСрок,
	|	ЕСТЬNULL(ВТ_СотрудникиБезИспытательногоСрока.ДатаПлан, ДАТАВРЕМЯ(1, 1, 1)) КАК ИспытательныйСрокТекущий,
	|	ВТ_ДанныеИзЗУП.ГрафикРаботыСсылка КАК ГрафикРаботыИзЗУП,
	|	ВТ_ДанныеИзЗУП.ФИО КАК Наименование
	|ИЗ
	|	ВТ_ДанныеИзЗУП КАК ВТ_ДанныеИзЗУП
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭП_Сотрудники КАК ЭП_Сотрудники
	|		ПО ВТ_ДанныеИзЗУП.СсылкаНаСотрудника = ЭП_Сотрудники.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СотрудникиБезИспытательногоСрока КАК ВТ_СотрудникиБезИспытательногоСрока
	|		ПО ВТ_ДанныеИзЗУП.СсылкаНаСотрудника = ВТ_СотрудникиБезИспытательногоСрока.СсылкаНаСотрудника
	|ГДЕ
	|	(НЕ ВТ_ДанныеИзЗУП.Пол = ЭП_Сотрудники.Пол
	|			ИЛИ НЕ ВТ_ДанныеИзЗУП.ДатаУвольнения = ЭП_Сотрудники.ДатаУвольнения
	|			ИЛИ НЕ ВТ_ДанныеИзЗУП.ДатаПриёма = ЭП_Сотрудники.ДатаПринятия
	|			ИЛИ НЕ ВТ_ДанныеИзЗУП.ДатаРождения = ЭП_Сотрудники.ДатаРождения
	|			ИЛИ НЕ ВТ_ДанныеИзЗУП.ДолжностьСсылка = ЭП_Сотрудники.Должность
	|			ИЛИ НЕ ВТ_ДанныеИзЗУП.ОрганизацияСсылка = ЭП_Сотрудники.Организация
	|			ИЛИ НЕ ВТ_ДанныеИзЗУП.ПодразделениеСсылка = ЭП_Сотрудники.Подразделение
	|			ИЛИ НЕ ВТ_ДанныеИзЗУП.Фамилия = ЭП_Сотрудники.Фамилия
	|			ИЛИ НЕ ВТ_ДанныеИзЗУП.Имя = ЭП_Сотрудники.Имя
	|			ИЛИ НЕ ВТ_ДанныеИзЗУП.Отчество = ЭП_Сотрудники.Отчество
	|			ИЛИ НЕ ВТ_ДанныеИзЗУП.ТабельныйНомер = ЭП_Сотрудники.ТабельныйНомер
	|			ИЛИ НЕ ВТ_СотрудникиБезИспытательногоСрока.ДатаПлан ЕСТЬ NULL
	|			ИЛИ НЕ ВТ_ДанныеИзЗУП.ГрафикРаботыСсылка = ЭП_Сотрудники.ГрафикРаботы)
	|	И ВТ_ДанныеИзЗУП.ОсновноеМестоРаботы
	|	И НЕ ЭП_Сотрудники.НеУчаствуетВОбменеСЗУП";
	Запрос.УстановитьПараметр("ТаблицаСотрудники", ТаблицаДанныхПоСотрудникам);
	Запрос.УстановитьПараметр("ВидДостижения", ДостижениеИспытательныйСрок);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	РезультатЗапроса = МассивРезультатов[4];
	РезультатЗапросаОклады = МассивРезультатов[3];
	Если РезультатЗапроса.Пустой() И РезультатЗапросаОклады.Пустой() Тогда
		
		ТекДата = ТекущаяДатаСеанса();
		Менеджер = РегистрыСведений.ЭП_ДатыВыполненияРегламентныхЗаданий.СоздатьМенеджерЗаписи();
		Менеджер.Период = ТекДата;
		Менеджер.Дата = ТекДата;
		Менеджер.РегламентноеЗадание = Справочники.ЭП_РегламентныеЗаданияСоСтатусами.КадровыеДанные;
		Менеджер.Записать();
		
		Возврат Ответ;
	Иначе		
		
		
		ВыборкаСРазличиями = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаСРазличиями.Следующий() Цикл
			
			ТекЭлемент = ВыборкаСРазличиями.СсылкаНаСотрудника.ПолучитьОбъект();   
			
			Если НЕ ЗначениеЗаполнено(ВыборкаСРазличиями.ДатаУвольнения) И ТекЭлемент.СтатусСотрудника = Перечисления.ЭП_СтатусыСотрудников.Уволен Тогда
			
				ТекЭлемент.СтатусСотрудника = Перечисления.ЭП_СтатусыСотрудников.Работает;				
			
			КонецЕсли;
			
			Если НЕ ТекЭлемент.ДатаУвольнения = ВыборкаСРазличиями.ДатаУвольнения Тогда 
				
				ТекЭлемент.ДатаУвольнения = ВыборкаСРазличиями.ДатаУвольнения; 
				ТекЭлемент.СтатусСотрудника = Перечисления.ЭП_СтатусыСотрудников.Уволен;
			КонецЕсли;		
			Если НЕ ТекЭлемент.Подразделение = ВыборкаСРазличиями.Подразделение Тогда 
				
				ТекЭлемент.Подразделение = ВыборкаСРазличиями.Подразделение; 
				ТекЭлемент.Департамент = ВыборкаСРазличиями.Подразделение.Департамент;
				
			КонецЕсли; 
			Если ЗначениеЗаполнено(ВыборкаСРазличиями.ИспытательныйСрокТекущий) Тогда
				
				НовДостижение = ТекЭлемент.Достижения.Добавить();
				НовДостижение.ДатаПлан = ВыборкаСРазличиями.ИспытательныйСрок;
				НовДостижение.ВидДостижения = ДостижениеИспытательныйСрок;
				
			КонецЕсли;   
			Если НЕ ТекЭлемент.ГрафикРаботыИзЗУП = ВыборкаСРазличиями.ГрафикРаботыИзЗУП Тогда
			
				МенеджерЗаписи = РегистрыСведений.ЭП_ОбновлениеГрафиковЗУП.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Сотрудник = ВыборкаСРазличиями.СсылкаНаСотрудника;
				МенеджерЗаписи.Записать(Истина);
			
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(ТекЭлемент, ВыборкаСРазличиями);
			Если НЕ ЗначениеЗаполнено(ТекЭлемент.ГрафикРаботы) Тогда
			
				ТекЭлемент.ГрафикРаботы = ВыборкаСРазличиями.ГрафикРаботыИзЗУП;				
			
			КонецЕсли;
			Если ТекЭлемент.Модифицированность() Тогда
				
				ТекЭлемент.Записать();
				
			КонецЕсли;
			
		КонецЦикла;
		
		ВыборкаПоОкладам = РезультатЗапросаОклады.Выбрать();
		
		Пока ВыборкаПоОкладам.Следующий() Цикл      
			Если ВыборкаПоОкладам.СсылкаНаСотрудника.НеУчавствуетВПолученииОкладов Тогда
		
				Продолжить;	
		
			КонецЕсли;
		    ТекСотрудник = ВыборкаПоОкладам.СсылкаНаСотрудника;
			Набор = РегистрыСведений.ЭП_ОкладыСотрудников.СоздатьМенеджерЗаписи();
			Набор.Период = ТекущаяДатаСеанса();
			Набор.Оклад = ВыборкаПоОкладам.Оклад;
			Набор.Сотрудник = ТекСотрудник;
			Набор.Записать(Истина); 
			
			ТекущийГрейд = ЭП_Сотрудники.ОпределитьГрейд(ВыборкаПоОкладам.Оклад); 
			
			Если НЕ ЗначениеЗаполнено(ТекСотрудник.ГрейдСотрудника) ИЛИ (ЗначениеЗаполнено(ТекущийГрейд) И НЕ ТекСотрудник.ГрейдСотрудника = ТекущийГрейд) Тогда
			    ТекущийСотрудникОбъект = ТекСотрудник.ПолучитьОбъект();
				ТекущийСотрудникОбъект.ГрейдСотрудника = ТекущийГрейд;
				ТекущийСотрудникОбъект.Записать();
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

	ТекДата = ТекущаяДатаСеанса();
	Менеджер = РегистрыСведений.ЭП_ДатыВыполненияРегламентныхЗаданий.СоздатьМенеджерЗаписи();
	Менеджер.Период = ТекДата;
	Менеджер.Дата = ТекДата;
	Менеджер.РегламентноеЗадание = Справочники.ЭП_РегламентныеЗаданияСоСтатусами.КадровыеДанные;
	Менеджер.Записать();
	
	УстановитьПривилегированныйРежим(Ложь); 
			
	
	Исключение    
		Инфо = ИнформацияОбОшибке();
		ТекстОшибки = Стршаблон("Описание = %1, ИмяМодуля = %2, НомерСтроки = %3, ИсходнаяСтрока = %4, ДополнительнаяИнформация = %5", 
								Инфо.Описание,
								Инфо.ИмяМодуля, 
								Инфо.НомерСтроки, 
								Инфо.ИсходнаяСтрока,
								Инфо.ДополнительнаяИнформация);
		ЗаписьЖурналаРегистрации("ОбменЗУПКадровыеДанные", 
								 УровеньЖурналаРегистрации.Ошибка,
								 ,
								 ,
								 ТекстОшибки);
		Возврат Новый HTTPСервисОтвет(500,"Ошибка");	
	КонецПопытки;
	Возврат Ответ; 
	
КонецФункции

Функция ПреобразоватьМассивВТаблицуЗначений(мсДанные)
	
	КС = Новый КвалификаторыСтроки(250);      
	КД = Новый КвалификаторыДаты(ЧастиДаты.Дата);
	МассивОписания = Новый Массив;
	МассивОписания.Добавить(Тип("Строка"));
	ОписаниеТиповС = Новый ОписаниеТипов(МассивОписания, , КС);
	ОписаниеДаты = Новый ОписаниеТипов("Дата",,,,,КД); 
	ОписаниеТиповЧ = Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(4));
    тзДанные = Новый ТаблицаЗначений;
	тзДанные.Колонки.Добавить("ФИО", ОписаниеТиповС);
	тзДанные.Колонки.Добавить("Фамилия", ОписаниеТиповС);
	тзДанные.Колонки.Добавить("Имя", ОписаниеТиповС);
	тзДанные.Колонки.Добавить("Отчество", ОписаниеТиповС);
	тзДанные.Колонки.Добавить("Пол", Новый ОписаниеТипов("ПеречислениеСсылка.ЭП_ПолФизическогоЛица"));
	тзДанные.Колонки.Добавить("Организация", ОписаниеТиповС);
	тзДанные.Колонки.Добавить("Подразделение", ОписаниеТиповС);
	тзДанные.Колонки.Добавить("Должность", ОписаниеТиповС);
	тзДанные.Колонки.Добавить("ТабельныйНомер", ОписаниеТиповС);
	тзДанные.Колонки.Добавить("ДатаУвольнения", ОписаниеДаты);
	тзДанные.Колонки.Добавить("ДатаПриёма", ОписаниеДаты);
	тзДанные.Колонки.Добавить("ДатаРождения", ОписаниеДаты);
	тзДанные.Колонки.Добавить("КодПодразделения", ОписаниеТиповС); 
	тзДанные.Колонки.Добавить("КодДолжности", ОписаниеТиповС);
	тзДанные.Колонки.Добавить("КодОрганизации", ОписаниеТиповС);
	тзДанные.Колонки.Добавить("ОрганизацияСсылка", Новый ОписаниеТипов("СправочникСсылка.ЭП_Организации"));
	тзДанные.Колонки.Добавить("ДолжностьСсылка", Новый ОписаниеТипов("СправочникСсылка.ЭП_ДолжностиСотрудников"));
	тзДанные.Колонки.Добавить("ПодразделениеСсылка", Новый ОписаниеТипов("СправочникСсылка.ЭП_ПодразделенияОрганизаций"));  
	тзДанные.Колонки.Добавить("СсылкаСотрудник", Новый ОписаниеТипов("СправочникСсылка.ЭП_Сотрудники"));
	тзДанные.Колонки.Добавить("КодСотрудник", ОписаниеТиповС);
	тзДанные.Колонки.Добавить("НомерТелефона", ОписаниеТиповС);
	тзДанные.Колонки.Добавить("АдресЭП", ОписаниеТиповС);
	тзДанные.Колонки.Добавить("НормаЧасы", ОписаниеТиповЧ);
	тзДанные.Колонки.Добавить("ИспытательныйСрок", ОписаниеДаты); 
	тзДанные.Колонки.Добавить("Оклад", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	тзДанные.Колонки.Добавить("ГрафикРаботы", ОписаниеТиповС);
	тзДанные.Колонки.Добавить("ГрафикРаботыСсылка", Новый ОписаниеТипов("СправочникСсылка.Календари"));
	тзДанные.Колонки.Добавить("ОсновноеМестоРаботы", Новый ОписаниеТипов("Булево"));
	
    Для Каждого ЭлементМассива Из мсДанные Цикл
        НоваяСтрока = тзДанные.Добавить(); 
		
		Для Каждого ЗначениеСтруктуры Из ЭлементМассива Цикл 
			
			Если ЗначениеСтруктуры.Ключ = "ДатаУвольнения" ИЛИ 
				ЗначениеСтруктуры.Ключ = "ДатаПриёма" ИЛИ
				ЗначениеСтруктуры.Ключ = "ДатаРождения" ИЛИ 
				ЗначениеСтруктуры.Ключ = "ИспытательныйСрок" Тогда
			
				НоваяСтрока[ЗначениеСтруктуры.Ключ] = XMLЗначение(Тип("Дата"),ЗначениеСтруктуры.Значение);	
				
			ИначеЕсли ЗначениеСтруктуры.Ключ = "Пол" Тогда  
				
				Если ЗначениеСтруктуры.Значение = "Мужской" Тогда
				
					НоваяСтрока[ЗначениеСтруктуры.Ключ] = Перечисления.ЭП_ПолФизическогоЛица.Мужской;	
				
				Иначе
				
					НоваяСтрока[ЗначениеСтруктуры.Ключ] = Перечисления.ЭП_ПолФизическогоЛица.Женский;	
				
				КонецЕсли;
				
			Иначе
				
				НоваяСтрока[ЗначениеСтруктуры.Ключ] = ЗначениеСтруктуры.Значение;	
					
			КонецЕсли;
            
		КонецЦикла;
		
    КонецЦикла;
	МассивДляУдаления = Новый Массив;
	Для каждого СтрокаТЗ Из тзДанные Цикл

		СтрокаТЗ.ОрганизацияСсылка = НайтиСоздатьОрганизацию(СтрокаТЗ.КодОрганизации, СтрокаТЗ.Организация);	
		Если НЕ СтрокаТЗ.ОрганизацияСсылка.УчавствуетВОбменеСЗУП Тогда
			
			МассивДляУдаления.Добавить(СтрокаТЗ);
			//тзДанные.Удалить(СтрокаТЗ);
			Продолжить;			
		
		КонецЕсли;
		СтрокаТЗ.ДолжностьСсылка = НайтиСоздатьДолжность(СтрокаТЗ.КодДолжности, СтрокаТЗ.Должность);	
		СтрокаТЗ.ПодразделениеСсылка = НайтиСоздатьПодразделение(СтрокаТЗ.КодПодразделения, СтрокаТЗ.Подразделение, СтрокаТЗ.ОрганизацияСсылка);
	    СтрокаТЗ.СсылкаСотрудник = НайтиСоздатьСотрудника(СтрокаТЗ); 
		СтрокаТЗ.ГрафикРаботыСсылка = НайтиСоздатьГрафик(СтрокаТЗ.ГрафикРаботы);
	КонецЦикла;
	Для каждого СтрокаМассиваУдаления Из МассивДляУдаления Цикл
	
		тзДанные.Удалить(СтрокаМассиваУдаления);
	
	КонецЦикла;
	ОбработатьТаблицуПоУволенным(тзДанные);
    Возврат тзДанные;
   			  
КонецФункции

Функция НайтиСоздатьГрафик(Наименование)

	СсылкаНаГрафик = Справочники.Календари.НайтиПоНаименованию(Наименование);
	
	Если СсылкаНаГрафик.Пустая() Тогда
	
		ТекГрафик = Справочники.Календари.СоздатьЭлемент();
		ТекГрафик.Наименование = Наименование;
		ТЕкГрафик.ОбменДанными.Загрузка = Истина;
		ТекГрафик.УстановитьНовыйКод();
		ТекГрафик.Записать();
		Возврат ТекГрафик.Ссылка;
	
	Иначе
			
		Возврат СсылкаНаГрафик;
	
	КонецЕсли;

КонецФункции

Процедура ОбработатьТаблицуПоУволенным(ТЗСотрудников)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТЗСотрудники.СсылкаСотрудник КАК Сотрудник,
	               |	ТЗСотрудники.ОрганизацияСсылка КАК Организация,
	               |	ТЗСотрудники.ДатаУвольнения КАК ДатаУвольнения
	               |ПОМЕСТИТЬ ВТ_ВсеСотрудникиСДатамиУвольнения
	               |ИЗ
	               |	&ТЗСотрудников КАК ТЗСотрудники
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ВсеСотрудникиСДатамиУвольнения.Сотрудник КАК Сотрудник,
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_ВсеСотрудникиСДатамиУвольнения.Организация) КАК Организация,
	               |	МАКСИМУМ(ВТ_ВсеСотрудникиСДатамиУвольнения.ДатаУвольнения) КАК ДатаУвольнения
	               |ПОМЕСТИТЬ ВТ_ГруппировкаПоСотрудникам
	               |ИЗ
	               |	ВТ_ВсеСотрудникиСДатамиУвольнения КАК ВТ_ВсеСотрудникиСДатамиУвольнения
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_ВсеСотрудникиСДатамиУвольнения.Сотрудник
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ДублиСотрудников.Сотрудник КАК Сотрудник,
	               |	ВТ_ДублиСотрудников.ДатаУвольнения КАК ДатаУвольнения
	               |ПОМЕСТИТЬ ВТ_ДублиСотрудников
	               |ИЗ
	               |	ВТ_ГруппировкаПоСотрудникам КАК ВТ_ДублиСотрудников
	               |ГДЕ
	               |	ВТ_ДублиСотрудников.Организация > 1
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ДублиСотрудников.Сотрудник КАК Сотрудник,
	               |	ВТ_ВсеСотрудникиСДатамиУвольнения.ДатаУвольнения КАК ДатаУвольнения,
	               |	ВТ_ВсеСотрудникиСДатамиУвольнения.Организация КАК Организация
	               |ИЗ
	               |	ВТ_ДублиСотрудников КАК ВТ_ДублиСотрудников
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ВсеСотрудникиСДатамиУвольнения КАК ВТ_ВсеСотрудникиСДатамиУвольнения
	               |		ПО ВТ_ДублиСотрудников.Сотрудник = ВТ_ВсеСотрудникиСДатамиУвольнения.Сотрудник
	               |			И ВТ_ДублиСотрудников.ДатаУвольнения = ВТ_ВсеСотрудникиСДатамиУвольнения.ДатаУвольнения,
	               |	Справочник.ЭП_Сотрудники КАК ЭП_Сотрудники";
	Запрос.УстановитьПараметр("ТЗСотрудников", ТЗСотрудников);
	
	Выборка = Запрос.Выполнить().Выбрать(); 
	
	Пока Выборка.Следующий() Цикл
		
		ПараметрыОтбораСотрудника = Новый Структура;
		ПараметрыОтбораСотрудника.Вставить("СсылкаСотрудник", Выборка.Сотрудник);
		ПараметрыОтбораСотрудника.Вставить("ОрганизацияСсылка", Выборка.Организация);
		ПараметрыОтбораСотрудника.Вставить("ДатаУвольнения", Выборка.ДатаУвольнения);
		НайденныеСтроки = ТЗСотрудников.НайтиСтроки(ПараметрыОтбораСотрудника);	
		
		Для каждого НайденнаяСтрокаСотрудника Из НайденныеСтроки Цикл
		
			ТЗСотрудников.Удалить(НайденнаяСтрокаСотрудника);		
		
		КонецЦикла;
	
	КонецЦикла;

КонецПроцедуры


Функция НайтиСоздатьСотрудника(СтрокаТЗ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЭП_Сотрудники.Ссылка КАК Ссылка,
	               |	Пользователи.Ссылка КАК Пользователь,
	               |	ЭП_Сотрудники.ДоговорГПХ КАК ДоговорГПХ
	               |ИЗ
	               |	Справочник.ЭП_Сотрудники КАК ЭП_Сотрудники
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	               |		ПО (Пользователи.ЭП_Сотрудник = ЭП_Сотрудники.Ссылка)
	               |ГДЕ
	               |	ЭП_Сотрудники.Наименование = &Наименование
	               |	И ЭП_Сотрудники.ДатаРождения = &ДатаРождения";
	Запрос.УстановитьПараметр("Наименование", СтрокаТЗ.ФИО);
	Запрос.УстановитьПараметр("ДатаРождения", СтрокаТЗ.ДатаРождения);
	
	РезультатЗапроса = Запрос.Выполнить();

	//СсылкаНаСотрудника = Справочники.ЭП_Сотрудники.НайтиПоРеквизиту("КОД_ЗУП",СтрокаТЗ.КодСотрудник);	
	
	Если РезультатЗапроса.Пустой() Тогда
		
		ТекСотрудник = Справочники.ЭП_Сотрудники.СоздатьЭлемент(); 
		ТекСотрудник.Наименование = СтрокаТЗ.ФИО;
		ТекСотрудник.Фамилия = СтрокаТЗ.Фамилия;
		ТекСотрудник.Имя = СтрокаТЗ.Имя;
		ТекСотрудник.Отчество = СтрокаТЗ.Отчество;
		ТекСотрудник.Организация = СтрокаТЗ.ОрганизацияСсылка;
		ТекСотрудник.Подразделение = СтрокаТЗ.ПодразделениеСсылка;
		ТекСотрудник.Должность = СтрокаТЗ.ДолжностьСсылка;
		ТекСотрудник.ДатаРождения = СтрокаТЗ.ДатаРождения;
		ТекСотрудник.ДатаПринятия = СтрокаТЗ.ДатаПриёма; 
		ТекСотрудник.ДатаУвольнения = СтрокаТЗ.ДатаУвольнения;
		ТекСотрудник.ТабельныйНомер = СтрокаТЗ.ТабельныйНомер;
		ТекСотрудник.КОД_ЗУП = СтрокаТЗ.КодСотрудник; 
		ТекСотрудник.Департамент = СтрокаТЗ.ПодразделениеСсылка.Департамент;
		ТекСотрудник.Пол = СтрокаТЗ.Пол;
 
		Если НЕ СтрокаТЗ.АдресЭП = "-" Тогда
		
			УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(ТекСотрудник,СтрокаТЗ.АдресЭП,Справочники.ВидыКонтактнойИнформации.ЭП_EmailСотрудника);				
		
		КонецЕсли;
		
		Если НЕ СтрокаТЗ.НомерТелефона = 0 Тогда
		
			УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(ТекСотрудник,СтрокаТЗ.НомерТелефона,Справочники.ВидыКонтактнойИнформации.ЭП_ТелефонСотрудника);	
		
		КонецЕсли;
			
		Если ЗначениеЗаполнено(СтрокаТЗ.ДатаУвольнения) Тогда
	
			ТекСотрудник.СтатусСотрудника = Перечисления.ЭП_СтатусыСотрудников.Уволен;
			
		Иначе
			
			ТекСотрудник.СтатусСотрудника = Перечисления.ЭП_СтатусыСотрудников.Работает;
		
		КонецЕсли;
		ТекСотрудник.Записать();
		
		Возврат ТекСотрудник.Ссылка;
		
	Иначе
		Выборка = РезультатЗапроса.Выбрать(); Выборка.Следующий(); 
		Если ЗначениеЗаполнено(Выборка.Пользователь) И НЕ Выборка.ДоговорГПХ Тогда
		
			МенеджерЗаписи = РегистрыСведений.ЭП_ОсновноеМестоРаботыСотрудников.СоздатьМенеджерЗаписи(); 
			МенеджерЗаписи.КодЗУП = СтрокаТЗ.КодСотрудник;
			МенеджерЗаписи.Пользователь = Выборка.Пользователь;
			МенеджерЗаписи.Прочитать(); 
			Если НЕ МенеджерЗаписи.Выбран() Тогда
			
				МенеджерЗаписи.Период = ТекущаяДатаСеанса();	
			    МенеджерЗаписи.КодЗУП = СтрокаТЗ.КодСотрудник;
				МенеджерЗаписи.Пользователь = Выборка.Пользователь;
			КонецЕсли;
			МенеджерЗаписи.ОсновноеМестоРаботы = СтрокаТЗ.ОсновноеМестоРаботы;
		    МенеджерЗаписи.Записать(Истина);
			
		КонецЕсли;
		Возврат Выборка.Ссылка;
	
	КонецЕсли;	

КонецФункции

Функция НайтиСоздатьПодразделение(ГУИД, НаименованиеПодразделения, СсылкаНаОрганизацию)

	СсылкаНаПодразделение = Справочники.ЭП_ПодразделенияОрганизаций.НайтиПоРеквизиту("КОД_ЗУП",ГУИД);	
	
	Если СсылкаНаПодразделение.Пустая() Тогда
	
		НовПодразделение = Справочники.ЭП_ПодразделенияОрганизаций.СоздатьЭлемент();
		НовПодразделение.Наименование = НаименованиеПодразделения;
		НовПодразделение.КОД_ЗУП = ГУИД; 
		НовПодразделение.Владелец = СсылкаНаОрганизацию;
		НовПодразделение.Записать();
		Возврат НовПодразделение.Ссылка;
		
	Иначе
		
		Возврат СсылкаНаПодразделение;
	
	КонецЕсли;
	
КонецФункции

Функция НайтиСоздатьДолжность(ГУИД, НаименованиеДолжности)

	СсылкаНаДолжность = Справочники.ЭП_ДолжностиСотрудников.НайтиПоРеквизиту("КОД_ЗУП",ГУИД);	
	
	Если СсылкаНаДолжность.Пустая() Тогда
	
		НовДолжность = Справочники.ЭП_ДолжностиСотрудников.СоздатьЭлемент();
		НовДолжность.Наименование = НаименованиеДолжности;
		НовДолжность.КОД_ЗУП = ГУИД;
		НовДолжность.Записать();
		Возврат НовДолжность.Ссылка;
		
	Иначе
		
		Возврат СсылкаНаДолжность;
	
	КонецЕсли;
	
КонецФункции

Функция НайтиСоздатьОрганизацию(ГУИД, НаименованиеОрганизации)

	СсылкаНаОрганизацию = Справочники.ЭП_Организации.НайтиПоРеквизиту("КОД_ЗУП",ГУИД);	
	
	Если СсылкаНаОрганизацию.Пустая() Тогда
	
		НовОрганизация = Справочники.ЭП_Организации.СоздатьЭлемент();
		НовОрганизация.Наименование = НаименованиеОрганизации;
		НовОрганизация.КОД_ЗУП = ГУИД;
		НовОрганизация.Записать();
		Возврат НовОрганизация.Ссылка;
		
	Иначе
		
		Возврат СсылкаНаОрганизацию;
	
	КонецЕсли;	

КонецФункции

Функция ОпределитьГрейд(Оклад)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ЭП_ТаблицаГрейдов.Грейд КАК Грейд
	               |ИЗ
	               |	РегистрСведений.ЭП_ТаблицаГрейдов КАК ЭП_ТаблицаГрейдов
	               |ГДЕ
	               |	ЭП_ТаблицаГрейдов.От >= &Оклад
	               |	И ЭП_ТаблицаГрейдов.До <= &Оклад";  
	Запрос.УстановитьПараметр("Оклад", Оклад);
	Выборка = Запрос.Выполнить().Выбрать(); Выборка.Следующий();
	
	Возврат Выборка.Грейд;

КонецФункции


Функция UpdateTimeInformPOST(Запрос)
	Ответ = Новый HTTPСервисОтвет(200);
	
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Запрос.ПолучитьТелоКакСтроку());
	 
	МассивДанных = ПрочитатьJSON(ЧтениеJSON);     
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаВремениПоСотрудникам = ПреобразоватьМассивВТаблицуЗначенийПоВремени(МассивДанных);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаТабеля.Пользователь КАК Пользователь,
	|	ТаблицаТабеля.ПериодРегистрации КАК ПериодРегистрацииДень,
	|	ТаблицаТабеля.ВидУчетаВремени КАК ВидУчетаВремени,
	|	ТаблицаТабеля.Часы КАК Часы,
	|	ТаблицаТабеля.ОсновноеМестоРаботы КАК ОсновноеМестоРаботы
	|ПОМЕСТИТЬ ВТ_ТаблицаВыгрузки
	|ИЗ
	|	&ТаблицаТабеля КАК ТаблицаТабеля
	|ГДЕ
	|	НЕ ТаблицаТабеля.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаВыгрузки.ПериодРегистрацииДень КАК ПериодРегистрацииДень,
	|	МАКСИМУМ(ВТ_ТаблицаВыгрузки.ВидУчетаВремени) КАК ВидУчетаВремени,
	|	ВТ_ТаблицаВыгрузки.Пользователь КАК Пользователь
	|ПОМЕСТИТЬ ВТ_ВидыВремениПоОсновномуРабочемуВремени
	|ИЗ
	|	ВТ_ТаблицаВыгрузки КАК ВТ_ТаблицаВыгрузки
	|ГДЕ
	|	ВТ_ТаблицаВыгрузки.ОсновноеМестоРаботы
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТаблицаВыгрузки.ПериодРегистрацииДень,
	|	ВТ_ТаблицаВыгрузки.Пользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаВыгрузки.Пользователь КАК Пользователь,
	|	СУММА(ВТ_ТаблицаВыгрузки.Часы) КАК Часы,
	|	НАЧАЛОПЕРИОДА(ВТ_ТаблицаВыгрузки.ПериодРегистрацииДень, МЕСЯЦ) КАК ПериодРегистрации,
	|	ВТ_ТаблицаВыгрузки.ПериодРегистрацииДень КАК ПериодРегистрацииДень
	|ПОМЕСТИТЬ ВТ_СверткаГрафиков
	|ИЗ
	|	ВТ_ТаблицаВыгрузки КАК ВТ_ТаблицаВыгрузки
	|ГДЕ
	|	НЕ ВТ_ТаблицаВыгрузки.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТаблицаВыгрузки.Пользователь,
	|	ВТ_ТаблицаВыгрузки.ПериодРегистрацииДень,
	|	НАЧАЛОПЕРИОДА(ВТ_ТаблицаВыгрузки.ПериодРегистрацииДень, МЕСЯЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СверткаГрафиков.Пользователь КАК Пользователь,
	|	ВТ_ВидыВремениПоОсновномуРабочемуВремени.ВидУчетаВремени КАК ВидУчетаВремени,
	|	ВЫБОР
	|		КОГДА ВТ_СверткаГрафиков.Часы > 8
	|			ТОГДА 8
	|		ИНАЧЕ ВТ_СверткаГрафиков.Часы
	|	КОНЕЦ КАК Часы,
	|	ВТ_СверткаГрафиков.ПериодРегистрации КАК ПериодРегистрации,
	|	ВТ_СверткаГрафиков.ПериодРегистрацииДень КАК ПериодРегистрацииДень,
	|	Пользователи.ЭП_Сотрудник КАК Сотрудник
	|ИЗ
	|	ВТ_СверткаГрафиков КАК ВТ_СверткаГрафиков
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ВидыВремениПоОсновномуРабочемуВремени КАК ВТ_ВидыВремениПоОсновномуРабочемуВремени
	|		ПО ВТ_СверткаГрафиков.Пользователь = ВТ_ВидыВремениПоОсновномуРабочемуВремени.Пользователь
	|			И ВТ_СверткаГрафиков.ПериодРегистрацииДень = ВТ_ВидыВремениПоОсновномуРабочемуВремени.ПериодРегистрацииДень
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО ВТ_СверткаГрафиков.Пользователь = Пользователи.Ссылка
	|ГДЕ
	|	НЕ Пользователи.ЭП_Сотрудник.НеУчаствуетВОбменеСЗУП";
	Запрос.УстановитьПараметр("ТаблицаТабеля", ТаблицаВремениПоСотрудникам);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗап = РегистрыСведений.ЭП_ДанныеТабельногоУчетаРабочегоВремениСотрудников.СоздатьНаборЗаписей();
		НаборЗап.Отбор.ПериодРегистрации.Установить(Выборка.ПериодРегистрации);
		НаборЗап.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
		НаборЗап.Отбор.ПериодРегистрацииДень.Установить(Выборка.ПериодРегистрацииДень);
		НаборЗап.Записать(Истина);   
		
		МенеджерЗаписиЧасов = РегистрыСведений.ЭП_ДанныеТабельногоУчетаРабочегоВремениСотрудников.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписиЧасов, Выборка);
		МенеджерЗаписиЧасов.Записать(Истина);		
	
	КонецЦикла; 
	ТекДата = ТекущаяДатаСеанса();
	Менеджер = РегистрыСведений.ЭП_ДатыВыполненияРегламентныхЗаданий.СоздатьМенеджерЗаписи();
	Менеджер.Период = ТекДата;
	Менеджер.Дата = ТекДата;
	Менеджер.РегламентноеЗадание = Справочники.ЭП_РегламентныеЗаданияСоСтатусами.ТабельВремени;
	Менеджер.Записать();
	УстановитьПривилегированныйРежим(Ложь);           
	Возврат Ответ;

КонецФункции

Функция ПреобразоватьМассивВТаблицуЗначенийПоВремени(мсДанные)
	          
	ОписаниеТиповС = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100));
	ОписаниеДаты = Новый ОписаниеТипов("Дата",,,,,Новый КвалификаторыДаты(ЧастиДаты.Дата));  
	ОписаниеТиповЧ = Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(4));
	
	тзДанные = Новый ТаблицаЗначений;
	тзДанные.Колонки.Добавить("Пользователь", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	тзДанные.Колонки.Добавить("ВидУчетаВремени", Новый ОписаниеТипов("СправочникСсылка.ЭП_ВидыУчетаВремени"));
	тзДанные.Колонки.Добавить("Часы", ОписаниеТиповЧ);
	тзДанные.Колонки.Добавить("ПериодРегистрации", ОписаниеДаты);     
	тзДанные.Колонки.Добавить("ВидУчетаВремениНаименование", ОписаниеТиповС);
	тзДанные.Колонки.Добавить("ВидУчетаВремениБуквенныйКод", ОписаниеТиповС);
	тзДанные.Колонки.Добавить("ГУИДЗУПВидУчетаВремени", ОписаниеТиповС);
	тзДанные.Колонки.Добавить("ГУИДЗУПСотрудник", ОписаниеТиповС);
	тзДанные.Колонки.Добавить("ОсновноеМестоРаботы", Новый ОписаниеТипов("Булево"));
	
    Для Каждого ЭлементМассива Из мсДанные Цикл
		
		НоваяСтрока = тзДанные.Добавить(); 
		
		Для Каждого ЗначениеСтруктуры Из ЭлементМассива Цикл 
			
			Если ЗначениеСтруктуры.Ключ = "ПериодРегистрации" Тогда
			
				НоваяСтрока[ЗначениеСтруктуры.Ключ] = XMLЗначение(Тип("Дата"),ЗначениеСтруктуры.Значение);
				
			Иначе
				
				НоваяСтрока[ЗначениеСтруктуры.Ключ] = ЗначениеСтруктуры.Значение;	
				
			КонецЕсли;
			
		КонецЦикла;
		
    КонецЦикла;
	
	Для каждого СтрокаТЗ Из тзДанные Цикл
	
		//СсылкаСотрудник = Справочники.ЭП_Сотрудники.НайтиПоРеквизиту("КОД_ЗУП", СтрокаТЗ.ГУИДЗУПСотрудник);
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЭП_ОсновноеМестоРаботыСотрудниковСрезПоследних.Пользователь КАК Пользователь
		               |ИЗ
		               |	РегистрСведений.ЭП_ОсновноеМестоРаботыСотрудников.СрезПоследних(, КодЗУП = &КОДЗУП) КАК ЭП_ОсновноеМестоРаботыСотрудниковСрезПоследних";
		Запрос.УстановитьПараметр("КОДЗУП", СтрокаТЗ.ГУИДЗУПСотрудник);
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			
			Продолжить;			
		
		КонецЕсли;
		Выборка = РезультатЗапроса.Выбрать(); Выборка.Следующий();
		СтрокаТЗ.Пользователь = Выборка.Пользователь;
		СтрокаТЗ.ВидУчетаВремени = НайтиСоздатьВидУчетаВремени(СтрокаТЗ);	
	
	КонецЦикла;
	
    Возврат тзДанные;
   			  
КонецФункции

Функция НайтиСоздатьВидУчетаВремени(ТекСтрокаТЗ)

	ТекВид = Справочники.ЭП_ВидыУчетаВремени.НайтиПоРеквизиту("КОД_ЗУП", ТекСтрокаТЗ.ГУИДЗУПВидУчетаВремени);	
	
	Если ТекВид.Пустая() Тогда
	
		ТекСпрЭл = Справочники.ЭП_ВидыУчетаВремени.СоздатьЭлемент();
		ТекСпрЭл.Наименование = ТекСтрокаТЗ.ВидУчетаВремениНаименование;
		ТекСпрЭл.БуквенныйКод = ТекСтрокаТЗ.ВидУчетаВремениБуквенныйКод;
		ТекСпрЭл.КОД_ЗУП = ТекСтрокаТЗ.ГУИДЗУПВидУчетаВремени;
		ТекСпрЭл.Записать();
		Возврат ТекСпрЭл.Ссылка;
		
	Иначе
		
		Возврат ТекВид;
	
	КонецЕсли;

КонецФункции

Функция GetPercentage(Запрос)
	
	Попытка
		
		ТекстОшибки = Стршаблон("Попали в метод");
		ЗаписьЖурналаРегистрации("ОбменЗУППремия", 
								 УровеньЖурналаРегистрации.Ошибка,
								 ,
								 ,
								 ТекстОшибки);
		

	Ответ = Новый HTTPСервисОтвет(200);
    УстановитьПривилегированныйРежим(Истина);
	КонечнаяДатаСтрока = Запрос.ПараметрыЗапроса.Получить("endDate");
	ГруппаРасчетныхПрофилейПараметр = Запрос.ПараметрыЗапроса.Получить("TypeOfAccrual");
	КонечнаяДата = XMLЗначение(Тип("Дата"),КонечнаяДатаСтрока);
	ОрганизацияПараметр = Запрос.ПараметрыЗапроса.Получить("Organization");
	Если ГруппаРасчетныхПрофилейПараметр = "ИндексПЗКТимлидер" Тогда
	
		ГруппаРасчетныхПрофилей = Справочники.ЭП_ГруппыРасчетныхПрофилей.НайтиПоНаименованию("Разработчики Teamlead");
		ТекстОшибки = Стршаблон("Тимлиды");
		ЗаписьЖурналаРегистрации("ОбменЗУППремия", 
								 УровеньЖурналаРегистрации.Ошибка,
								 ,
								 ,
								 ТекстОшибки);

	ИначеЕсли ГруппаРасчетныхПрофилейПараметр = "ИндексПЗК" Тогда 
		
		ГруппаРасчетныхПрофилей = Справочники.ЭП_ГруппыРасчетныхПрофилей.НайтиПоНаименованию("ОбщийРасчет");
		ТекстОшибки = Стршаблон("ИндексПЗК " + ГруппаРасчетныхПрофилейПараметр);
		ЗаписьЖурналаРегистрации("ОбменЗУППремия", 
								 УровеньЖурналаРегистрации.Ошибка,
								 ,
								 ,
								 ТекстОшибки);

	Иначе
		
		Ответ = Новый HTTPСервисОтвет(404,"Не найдена группа расчетных профилей");
		Возврат Ответ;
		
	КонецЕсли;
	
	ОрганизацияСсылка = Справочники.ЭП_Организации.НайтиПоРеквизиту("КОД_ЗУП",ОрганизацияПараметр);
	ТекстОшибки = Стршаблон("Организация " + ОрганизацияПараметр);
	ЗаписьЖурналаРегистрации("ОбменЗУППремия", 
								 УровеньЖурналаРегистрации.Ошибка,
								 ,
								 ,
								 ТекстОшибки);

    Если НЕ ОбщегоНазначения.СсылкаСуществует(ОрганизацияСсылка) Тогда
	
		Ответ = Новый HTTPСервисОтвет(404,"Не найдена организация");	
	    Возврат Ответ;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЭП_РассчитанныеКоэффициентыПоСотрудникамСрезПоследних.ГруппаРасчетныхПрофилей КАК ГруппаРасчетныхПрофилей,
	|	ЭП_ОсновноеМестоРаботыСотрудниковСрезПоследних.КодЗУП КАК СотрудникКОД_ЗУП,
	|	ЭП_РассчитанныеКоэффициентыПоСотрудникамСрезПоследних.Сотрудник КАК Сотрудник,
	|	ЭП_РассчитанныеКоэффициентыПоСотрудникамСрезПоследних.Значение КАК ПроцентПЗК,
	|	ЭП_Сотрудники.Департамент КАК Департамент,
	|	ЭП_Сотрудники.Наименование КАК ФИОСотрудника
	|ПОМЕСТИТЬ ВТ_СотрудникиКоэф
	|ИЗ
	|	РегистрСведений.ЭП_РассчитанныеКоэффициентыПоСотрудникам.СрезПоследних(
	|			&ПериодКонец,
	|			ГруппаРасчетныхПрофилей = &ГруппаРасчетныхПрофилей
	|				И Период = &Период) КАК ЭП_РассчитанныеКоэффициентыПоСотрудникамСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭП_Сотрудники КАК ЭП_Сотрудники
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЭП_ОсновноеМестоРаботыСотрудников.СрезПоследних КАК ЭП_ОсновноеМестоРаботыСотрудниковСрезПоследних
	|			ПО ЭП_Сотрудники.Ссылка = ЭП_ОсновноеМестоРаботыСотрудниковСрезПоследних.Пользователь.ЭП_Сотрудник
	|		ПО ЭП_РассчитанныеКоэффициентыПоСотрудникамСрезПоследних.Сотрудник = ЭП_Сотрудники.Ссылка
	|ГДЕ
	|	ЭП_РассчитанныеКоэффициентыПоСотрудникамСрезПоследних.Значение >= 0.7
	|	И ЭП_РассчитанныеКоэффициентыПоСотрудникамСрезПоследних.Период = &Период
	|	И НЕ ЭП_Сотрудники.НеУчаствуетВПЗК
	|	И НЕ ЭП_Сотрудники.НеУчаствуетВОбменеСЗУП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЭП_СотрудникиДостижения.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ИспытательныйСрок
	|ИЗ
	|	Справочник.ЭП_Сотрудники.Достижения КАК ЭП_СотрудникиДостижения
	|ГДЕ
	|	ЭП_СотрудникиДостижения.ВидДостижения = &ВидДостижения
	|	И ЭП_СотрудникиДостижения.ДатаФакт = ДАТАВРЕМЯ(1, 1, 1)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭП_СотрудникиРасчетныеПрофили.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ТехПод
	|ИЗ
	|	Справочник.ЭП_Сотрудники.РасчетныеПрофили КАК ЭП_СотрудникиРасчетныеПрофили
	|ГДЕ
	|	ЭП_СотрудникиРасчетныеПрофили.Профиль.ТехническаяПоддержка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭП_СотрудникиРасчетныеПрофили.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(ВТ_СотрудникиКоэф.ГруппаРасчетныхПрофилей) КАК ГруппаРасчетныхПрофилей,
	|	ВТ_СотрудникиКоэф.СотрудникКОД_ЗУП КАК СотрудникКОД_ЗУП,
	|	ВТ_СотрудникиКоэф.ФИОСотрудника КАК Сотрудник,
	|	ВТ_СотрудникиКоэф.ПроцентПЗК КАК ПроцентПЗК,
	|	ВТ_СотрудникиКоэф.Департамент КАК Департамент
	|ИЗ
	|	ВТ_СотрудникиКоэф КАК ВТ_СотрудникиКоэф
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИспытательныйСрок КАК ВТ_ИспытательныйСрок
	|		ПО ВТ_СотрудникиКоэф.Сотрудник = ВТ_ИспытательныйСрок.Ссылка
	|ГДЕ
	|	ВТ_ИспытательныйСрок.Ссылка ЕСТЬ NULL
	|	И НЕ ВТ_СотрудникиКоэф.Сотрудник В
	|				(ВЫБРАТЬ
	|					ВТ_ТехПод.Ссылка КАК Ссылка
	|				ИЗ
	|					ВТ_ТехПод КАК ВТ_ТехПод)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Департамент,
	|	Сотрудник";
	
	Запрос.УстановитьПараметр("ГруппаРасчетныхПрофилей", ГруппаРасчетныхПрофилей);
	Запрос.УстановитьПараметр("ПериодКонец", КонечнаяДата);
	Запрос.УстановитьПараметр("ВидДостижения", Справочники.ЭП_ВидыДостиженийСотрудников.ИспытательныйСрок); 
	Запрос.УстановитьПараметр("Организация", ОрганизацияСсылка);
	Запрос.УстановитьПараметр("Период",НачалоМесяца(КонечнаяДата));
	
	Выборка = Запрос.Выполнить().Выбрать();
	МассивДанных = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		СтруктураСотрудники = Новый Структура;		
		СтруктураСотрудники.Вставить("Сотрудник", Выборка.Сотрудник);
		СтруктураСотрудники.Вставить("СотрудникКОД_ЗУП", Выборка.СотрудникКОД_ЗУП);
		СтруктураСотрудники.Вставить("ГруппаРасчетныхПрофилей", Выборка.ГруппаРасчетныхПрофилей);
		СтруктураСотрудники.Вставить("ПроцентПЗК", Выборка.ПроцентПЗК); 
		СтруктураСотрудники.Вставить("Департамент", Строка(Выборка.Департамент));
        МассивДанных.Добавить(СтруктураСотрудники);
	КонецЦикла;
	
	СтруктураОтвета = Новый ЗаписьJSON;
	СтруктураОтвета.УстановитьСтроку();  
	ЗаписатьJSON(СтруктураОтвета, МассивДанных);	
	Ответ.УстановитьТелоИзСтроки(СтруктураОтвета.Закрыть());
	Ответ.Заголовки.Вставить("endDate",КонечнаяДата);
	Ответ.Заголовки.Вставить("TypeOfAccrual",ГруппаРасчетныхПрофилей); 
	Ответ.Заголовки.Вставить("Organization", ОрганизацияСсылка);
	Возврат Ответ;
		Исключение    
		Инфо = ИнформацияОбОшибке();
		ТекстОшибки = Стршаблон("Описание = %1, ИмяМодуля = %2, НомерСтроки = %3, ИсходнаяСтрока = %4, ДополнительнаяИнформация = %5", 
								Инфо.Описание,
								Инфо.ИмяМодуля, 
								Инфо.НомерСтроки, 
								Инфо.ИсходнаяСтрока,
								Инфо.ДополнительнаяИнформация);
		ЗаписьЖурналаРегистрации("ОбменЗУППремия", 
								 УровеньЖурналаРегистрации.Ошибка,
								 ,
								 ,
								 ТекстОшибки);
		Возврат Новый HTTPСервисОтвет(505,"Ошибка выполнения");	
	КонецПопытки;
КонецФункции

Функция GetFinAnalyticsGET(Запрос)
	Попытка
	УстановитьПривилегированныйРежим(Истина);
	Ответ = Новый HTTPСервисОтвет(200);
	УстановитьПривилегированныйРежим(Истина);
	КонечнаяДатаСтрока = Запрос.ПараметрыЗапроса.Получить("endDate");
	Период = XMLЗначение(Тип("Дата"),КонечнаяДатаСтрока);
	ЗапросБазы = Новый Запрос;
	ЗапросБазы.Текст = "ВЫБРАТЬ
	                   |	УчетВремениОбороты.Пользователь КАК Сотрудник,
	                   |	УчетВремениОбороты.Проект КАК Проект,
	                   |	ЭП_ОсновноеМестоРаботыСотрудниковСрезПоследних.КодЗУП КАК СотрудникКОД_ЗУП,
	                   |	УчетВремениОбороты.Этап КАК РазделПроекта,
	                   |	СУММА(УчетВремениОбороты.ДлительностьОборот) КАК Длительность
	                   |ПОМЕСТИТЬ ВТ_Группировка
	                   |ИЗ
	                   |	РегистрНакопления.УчетВремени.Обороты(НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ), КОНЕЦПЕРИОДА(&Дата, МЕСЯЦ), Месяц, ) КАК УчетВремениОбороты
	                   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЭП_ОсновноеМестоРаботыСотрудников.СрезПоследних КАК ЭП_ОсновноеМестоРаботыСотрудниковСрезПоследних
	                   |		ПО УчетВремениОбороты.Пользователь = ЭП_ОсновноеМестоРаботыСотрудниковСрезПоследних.Пользователь
	                   |
	                   |СГРУППИРОВАТЬ ПО
	                   |	УчетВремениОбороты.Пользователь,
	                   |	УчетВремениОбороты.Проект,
	                   |	ЭП_ОсновноеМестоРаботыСотрудниковСрезПоследних.КодЗУП,
	                   |	УчетВремениОбороты.Этап
	                   |;
	                   |
	                   |////////////////////////////////////////////////////////////////////////////////
	                   |ВЫБРАТЬ
	                   |	ПРЕДСТАВЛЕНИЕ(ВТ_Группировка.Сотрудник) КАК Сотрудник,
	                   |	ПРЕДСТАВЛЕНИЕ(ВТ_Группировка.Проект) КАК Проект,
	                   |	ВТ_Группировка.СотрудникКОД_ЗУП КАК СотрудникКОД_ЗУП,
	                   |	ПРЕДСТАВЛЕНИЕ(ВТ_Группировка.РазделПроекта) КАК РазделПроекта,
	                   |	ВТ_Группировка.Длительность КАК Длительность
	                   |ИЗ
	                   |	ВТ_Группировка КАК ВТ_Группировка
	                   |ГДЕ
	                   |	НЕ ВТ_Группировка.РазделПроекта ЕСТЬ NULL
	                   |	И НЕ ВТ_Группировка.Сотрудник.ЭП_Сотрудник.НеУчаствуетВОбменеСЗУП";
	ЗапросБазы.УстановитьПараметр("Дата", Период);
	
	Выборка = ЗапросБазы.Выполнить().Выбрать();
	МассивДанных = Новый Массив;
	
	Пока Выборка.Следующий() Цикл 
		
		СтруктураСотрудники = Новый Структура;
		СтруктураСотрудники.Вставить("Сотрудник", Выборка.Сотрудник);
		СтруктураСотрудники.Вставить("СотрудникКОД_ЗУП", Выборка.СотрудникКОД_ЗУП);
		СтруктураСотрудники.Вставить("РазделПроекта", Выборка.РазделПроекта);
		СтруктураСотрудники.Вставить("Длительность", Выборка.Длительность);
		СтруктураСотрудники.Вставить("Проект", Выборка.Проект);
		МассивДанных.Добавить(СтруктураСотрудники);	
			
	КонецЦикла;
	
	СтруктураОтвета = Новый ЗаписьJSON;
	СтруктураОтвета.УстановитьСтроку();  
	ЗаписатьJSON(СтруктураОтвета, МассивДанных);	
	Ответ.УстановитьТелоИзСтроки(СтруктураОтвета.Закрыть());
	Ответ.Заголовки.Вставить("endDate",Период);
    УстановитьПривилегированныйРежим(Ложь);
	Возврат Ответ;
    	Исключение    
		Инфо = ИнформацияОбОшибке();
		ТекстОшибки = Стршаблон("Описание = %1, ИмяМодуля = %2, НомерСтроки = %3, ИсходнаяСтрока = %4, ДополнительнаяИнформация = %5", 
								Инфо.Описание,
								Инфо.ИмяМодуля, 
								Инфо.НомерСтроки, 
								Инфо.ИсходнаяСтрока,
								Инфо.ДополнительнаяИнформация);
		ЗаписьЖурналаРегистрации("ОбменЗУПКадровыеДанные", 
								 УровеньЖурналаРегистрации.Ошибка,
								 ,
								 ,
								 ТекстОшибки);
		Возврат Новый HTTPСервисОтвет(500,"Ошибка");	
	КонецПопытки;
КонецФункции
