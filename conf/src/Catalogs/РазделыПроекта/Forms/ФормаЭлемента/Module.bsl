#Область ИнициализацияПеременных

&НаКлиенте
Перем ДатаПрогнозная; 
&НаКлиенте
Перем ТекущийПериодОкончаниеЭтапов;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	Элементы.ВыборПериода.Видимость = (РольДоступна("ДобавлениеИзменениеРазделовПроекта")
								   Или РольДоступна("АдминистраторСистемы")
								   Или РольДоступна("Администрирование")
								   Или РольДоступна("ПолныеПрава")); 
	Если Пользователи.РолиДоступны("ЭП_ГлавныйАдминистраторПроекта, ПолныеПрава, Администрирование, АдминистраторСистемы") Тогда
		Элементы.ИзменениеРеализации.Доступность = Истина;   
		Элементы.ЭП_Архивный.Доступность = Истина;
		Элементы.ЭП_ДатаПомещенияВАрхив.Доступность = Истина;
	Иначе  
		УстановитьПривилегированныйРежим(Истина);
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		                      |	ЭП_ВыплатыПремийСотрудники.Ссылка КАК Ссылка
		                      |ИЗ
		                      |	Документ.ЭП_ВыплатыПремий.Сотрудники КАК ЭП_ВыплатыПремийСотрудники
		                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭП_ВыплатыПремий КАК ЭП_ВыплатыПремий
		                      |		ПО ЭП_ВыплатыПремийСотрудники.Ссылка = ЭП_ВыплатыПремий.Ссылка
		                      |ГДЕ
		                      |	ЭП_ВыплатыПремий.Проведен
		                      |	И ЭП_ВыплатыПремийСотрудники.Этап = &Этап");
		Запрос.УстановитьПараметр("Этап", Объект.Ссылка);
		РезультатЗапроса = Запрос.Выполнить();
		Элементы.ИзменениеРеализации.Доступность = РезультатЗапроса.Пустой(); 
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства   
	
	ОбновитьПрогнознуюДату();
	ОбновитьРеализацияУслуг();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ЗначениеЗаполнено(Объект.ДатаНачала) Или ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
		Элементы.ДатаНачала.Доступность = (РольДоступна("Администрирование")
		Или РольДоступна("ПолныеПрава")
		Или РольДоступна("АдминистраторСистемы"));
		
		Элементы.ДатаОкончания.Доступность = (РольДоступна("Администрирование")
		Или РольДоступна("ПолныеПрава")
		Или РольДоступна("АдминистраторСистемы"));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ЭП_ПлановаяВыручка) Тогда 
		Элементы.ЭП_ПлановаяВыручка.Доступность = Пользователи.РолиДоступны("Администрирование, АдминистраторСистемы");;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Объект.ЭП_ПлановыеТрудозатраты) Тогда 
		Элементы.ЭП_ПлановыеТрудозатраты.Доступность = Пользователи.РолиДоступны("Администрирование, АдминистраторСистемы");; 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ЭП_ПлановыйСубподряд) Тогда 
		Элементы.ЭП_ПлановыйСубподряд.Доступность = Пользователи.РолиДоступны("Администрирование, АдминистраторСистемы");;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()
	ОбновитьПрогнознуюДату(); 
	ОбновитьРеализацияУслуг();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВладелецПриИзменении(Элемент)
	
	// СтандартныеПодсистемы.Свойства
	ОбновитьЭлементыДополнительныхРеквизитов();
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры   

&НаКлиенте
Процедура ДекорацияПрогнознаяДатаНажатие(Элемент)  
	
	Если ЗначениеЗаполнено(ДатаПрогнозная) Тогда  
		Отбор = Новый Структура("Период, Этап, Сотрудник", ТекущийПериодОкончаниеЭтапов, Объект.Ссылка, ПользователиКлиент.ТекущийПользователь());
		ЗаполнениеЗначений = Новый Структура("Период, Этап, Сотрудник", ТекущийПериодОкончаниеЭтапов, Объект.Ссылка, ПользователиКлиент.ТекущийПользователь());
		Оповещение = Новый ОписаниеОповещения("ОбновитьПрогнознуюДату", ЭтотОбъект);
		ОбменДаннымиКлиент.ОткрытьФормуЗаписиРегистраСведенийПоОтбору(Отбор, ЗаполнениеЗначений, "ЭП_ОкончаниеЭтапов", ЭтаФорма,,,Оповещение);  
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Команда для выбора периода, вызывает процедуру ВыборПериодаЗавершение
&НаКлиенте
Процедура ВыборПериода(Команда)
	
	// Создаем новый диалог и вызываем процедуру ВыборПериодаЗавершение
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период = Новый СтандартныйПериод(Объект.ДатаНачала, Объект.ДатаОкончания);
	Диалог.Показать(Новый ОписаниеОповещения("ВыборПериодаЗавершение", ЭтотОбъект, Новый Структура("Диалог", Диалог)));

КонецПроцедуры

// Устанавливает выбранный период
&НаКлиенте
Процедура ВыборПериодаЗавершение(Период, ДополнительныеПараметры) Экспорт
	
	Если Период <> Неопределено Тогда
		Диалог = ДополнительныеПараметры.Диалог;
		Объект.ДатаНачала = Период.ДатаНачала;
		Объект.ДатаОкончания = Период.ДатаОкончания;
		ПериодПриИзмененииНаСервере();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Подсчитывает количество рабочих дней в выбранном периоде
&НаСервере
Процедура ПериодПриИзмененииНаСервере()
	
	// Получаем основной календарь из константы
	ОсновнойКалендарь = Константы.ОсновнойКалендарь.Получить();
	ПроизводственныйКалендарь = ОсновнойКалендарь.ПроизводственныйКалендарь.Ссылка;
	КоличествоРабочихДней = 0;
	Объект.КоличествоРабочихДней = КоличествоРабочихДней;
	
	// Выполняем проверку на правильность заполнения формы и выполняем запрос
	Если ПроизводственныйКалендарь.Пустая() Тогда
		Сообщить("Выберите основной календарь в константе");			
	Иначе
		// Запрос к регистру сведений ДанныеПроизводственногоКалендаря
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеПроизводственногоКалендаря.ВидДня КАК ВидДня
		|ИЗ
		|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|ГДЕ
		|	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
		|	И ДанныеПроизводственногоКалендаря.Дата >= &НачалоПериода
		|	И ДанныеПроизводственногоКалендаря.Дата <= &КонецПериода";
		
		// Усатнавливаем параметры и выполняем запрос
		Запрос.УстановитьПараметр("НачалоПериода", Объект.ДатаНачала);
		Запрос.УстановитьПараметр("КонецПериода", Объект.ДатаОкончания);
		Запрос.УстановитьПараметр("ПроизводственныйКалендарь", ПроизводственныйКалендарь);
		РезультатЗапроса = Запрос.Выполнить();
		
		// Проходимся по всем дням в периоде, чтобы записать количество рабочих
		РабочийДень = Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий;
		ПредпраздничныйДень = Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный;
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.ВидДня = РабочийДень ИЛИ Выборка.ВидДня = ПредпраздничныйДень Тогда
				КоличествоРабочихДней = КоличествоРабочихДней + 1; 				
			КонецЕсли;
		КонецЦикла;
		
		// Записываем количество рабочих дней в объект
		Объект.КоличествоРабочихДней = КоличествоРабочихДней;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывает процедуру ПериодПриИзмененииНаСервере
&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	ПериодПриИзмененииНаСервере();

КонецПроцедуры

// Вызывает процедуру ПериодПриИзмененииНаСервере
&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	
	ПериодПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЭП_АрхивныйПриИзменении(Элемент)
	Если Объект.ЭП_Архивный Тогда
	
		Объект.ЭП_ДатаПомещенияВАрхив = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	КонецЕсли;
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства 

&НаСервереБезКонтекста
Функция ПолучитьЗаписьОкончаниеЭтапов(Этап)
	Таблица = РегистрыСведений.ЭП_ОкончаниеЭтапов.СрезПоследних(, Новый Структура("Этап", Этап));
	Если Таблица.Количество() > 0 Тогда 
		Строка = Таблица[Таблица.Количество() - 1];
		Возврат Новый Структура("Период, Дата", Строка.Период, Строка.Дата);
	КонецЕсли;
	Возврат Новый Структура("Период, Дата");
КонецФункции

&НаКлиенте
Процедура ОбновитьПрогнознуюДату(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	Запись = ПолучитьЗаписьОкончаниеЭтапов(Объект.Ссылка); 
	ДатаПрогнозная = Запись.Дата;
	ТекущийПериодОкончаниеЭтапов = Запись.Период;
	Если ЗначениеЗаполнено(ДатаПрогнозная) Тогда 
		Элементы.ДекорацияПрогнознаяДата.Заголовок = СтрШаблон("Прогнозная дата окончания этапа: %1",  
		Формат(ДатаПрогнозная, "ДФ=dd.MM.yyyy")); 
	Иначе 
		Элементы.ДекорацияПрогнознаяДата.Заголовок = "Прогнозная дата не установлена.";
	КонецЕсли;
КонецПроцедуры 

&НаКлиенте
Процедура ОткрытьПрогнознаяДатаИстория(Команда)                     
	Отбор = Новый Структура("Этап", Объект.Ссылка);
	ОткрытьФорму("РегистрСведений.ЭП_ОкончаниеЭтапов.ФормаСписка", Новый Структура("Отбор", Отбор), ЭтаФорма,,,,
					Новый ОписаниеОповещения("ОбновитьПрогнознуюДату", ЭтотОбъект),
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПрогнознаяДатаИстория(Команда)
	Отбор = Новый Структура("Этап, Сотрудник, Период", Объект.Ссылка, ПользователиКлиент.ТекущийПользователь()); 
	ЗначенияЗаполнения = Новый Структура("Этап, Сотрудник, Период", Объект.Ссылка, Отбор.Сотрудник);
	ОбменДаннымиКлиент.ОткрытьФормуЗаписиРегистраСведенийПоОтбору(Отбор, ЗначенияЗаполнения, "ЭП_ОкончаниеЭтапов",
						ЭтаФорма,,,Новый ОписаниеОповещения("ОбновитьПрогнознуюДату", ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияАктРеализацияУслугНажатие(Элемент) 
	Оповещение = Новый ОписаниеОповещения("ОбновитьРеализацияУслуг", ЭтотОбъект); 
	Если ЗначениеЗаполнено(ДокументРеализацияУслуг) тогда 
		ОткрытьФорму("Документ.ЭП_РеализацияУслуг.ФормаОбъекта", Новый Структура("Ключ", ДокументРеализацияУслуг),
		ЭтаФорма,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры 

&НаСервере
Функция ПолучитьРеализацияУслуг(Этап) 
	Если Параметры.Ключ.Пустая() Тогда
	
		Возврат Документы.ЭП_РеализацияУслуг.ПустаяСсылка();	
	
	Иначе
	
		Возврат Документы.ЭП_РеализацияУслуг.НайтиПоРеквизиту("Этап", Этап);	
	
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьРеализацияУслуг(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	ДокументРеализацияУслуг = ПолучитьРеализацияУслуг(Объект.Ссылка);
	Если ЗначениеЗаполнено(ДокументРеализацияУслуг) Тогда
		Элементы.ДекорацияРеализацияУслуг.Гиперссылка = Истина;
		Элементы.ДекорацияРеализацияУслуг.Заголовок = ДокументРеализацияУслуг; 
	Иначе
		Элементы.ДекорацияРеализацияУслуг.Гиперссылка = Ложь;
		Элементы.ДекорацияРеализацияУслуг.Заголовок = "Документ реализации услуг не задан.";
	КонецЕсли;
КонецПроцедуры 

&НаКлиенте
Процедура ИзменениеРеализации(Команда) 
	Если Параметры.Ключ.Пустая() ИЛИ ЭтотОбъект.Модифицированность Тогда
	
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Необходимо записать объект";        
		Сообщение.Сообщить();		
		Возврат;
		
	КонецЕсли;
	Оповещение = Новый ОписаниеОповещения("ОбновитьРеализацияУслуг", ЭтотОбъект);
	ЭлементыЗаполнения = Новый Структура("Проект, Этап", Объект.Владелец, Объект.Ссылка);
	ОткрытьФорму("Документ.ЭП_РеализацияУслуг.ФормаОбъекта", Новый Структура("ЗначенияЗаполнения", ЭлементыЗаполнения),
	ЭтаФорма,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

#КонецОбласти