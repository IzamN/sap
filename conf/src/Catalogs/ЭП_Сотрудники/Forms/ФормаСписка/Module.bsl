#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ИсходныйТекстЗапроса = Список.ТекстЗапроса;
	ГлубинаСобытий = 7; // дней
	СкрытьУволенных(); 
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	НастроитьСписокСотрудников();
КонецПроцедуры


#КонецОбласти

#Область СобытияЭлементовДиалога

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	ПоказатьСобытияСотрудника(Элемент.ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ГлубинаСобытийПриИзменении(Элемент)
	НастроитьСписокСотрудников();
	ПоказатьСобытияСотрудника(Элементы.Список.ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура СписокКомпетенцийПриИзменении(Элемент)
	УстановитьТекстЗапросаСписка();
КонецПроцедуры

#КонецОбласти

#Область КомандыФормы

&НаКлиенте
Процедура ВключитьОтборНажатие(Команда)
	
	Если Не ОтборПоКомпетенциям 
		И ТаблицаКомпетенций.Количество() = 0 Тогда // Попытка включить отбор без настроек
		ПоказатьПредупреждение(,"Не заполнен отбор компетенций!",3);
		Возврат;
	КонецЕсли;
	
	ОтборПоКомпетенциям = Не ОтборПоКомпетенциям;
	Элементы.ВключитьОтбор.Пометка = ОтборПоКомпетенциям;
	Если ОтборПоКомпетенциям Тогда
		Элементы.ВключитьОтбор.Заголовок = "Отключить отбор";
	Иначе
		Элементы.ВключитьОтбор.Заголовок = "Включить отбор";
	КонецЕсли;
		
	УстановитьТекстЗапросаСписка();

КонецПроцедуры

#КонецОбласти


#Область Служебные

&НаСервере
Процедура НастроитьСписокСотрудников()

	Список.Параметры.УстановитьЗначениеПараметра("ДатаСобытия", ТекущаяДата() + ГлубинаСобытий*86400);

КонецПроцедуры

&НаСервере
Процедура УстановитьТекстЗапросаСписка()
	
	ПараметрыЗапроса = Новый Структура;

	Если Не ОтборПоКомпетенциям Тогда
		ТекстЗапроса = ИсходныйТекстЗапроса;
	Иначе
		ТекстЗапроса = ТекстЗапросаОтборПоКомпетенциям(ПараметрыЗапроса);
	КонецЕсли;

	Список.ТекстЗапроса = ТекстЗапроса;
	
	Для Каждого КлючЗначение Из ПараметрыЗапроса Цикл
		Список.Параметры.УстановитьЗначениеПараметра(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;

	Порядок = Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(Список.Порядок.ИдентификаторПользовательскойНастройки);
	Порядок.Элементы.Очистить();
	Если ОтборПоКомпетенциям Тогда
		ДобавитьЭлементПорядка(Порядок, "Рейтинг", Истина);
	КонецЕсли;
	ДобавитьЭлементПорядка(Порядок, "Наименование");

КонецПроцедуры

&НаСервере
Функция ТекстЗапросаОтборПоКомпетенциям(ПараметрыЗапроса)
	
	ТекстЗапроса = "";  

	// Построение текста запроса на основе таблицы компетенций
	// (невозможно передать таблицу значений в динамический список, поэтому формируется текст запроса с построчным вводом значений
	// На практике их не должно быть много - одна-две строчки, как правило. Можно ограничить максимальное количество строк таблицы значением 5.
	
	ШаблонЗапроса = 
	"ВЫБРАТЬ
	|	&ВидКомпетенцииИндекс КАК ВидКомпетенции,
	|	&ЗначениеИндекс КАК Значение,
	|	&ВесовойКоэффициентИндекс КАК ВесовойКоэффициент";

	ОбъединениеЗапроса = 
	"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|";
	
	ПерваяСтрока = Истина;
	ВесовойКоэффициент = pow(10, ТаблицаКомпетенций.Количество()-1);
	Для Каждого СтрокаКомпетенций Из ТаблицаКомпетенций Цикл 
		Если Не ПерваяСтрока Тогда
			ТекстЗапроса = ТекстЗапроса + ОбъединениеЗапроса;
		КонецЕсли;
		
		Индекс = Формат(ТаблицаКомпетенций.Индекс(СтрокаКомпетенций),"ЧГ=0");
		ТекстЗапроса = ТекстЗапроса + СтрЗаменить(ШаблонЗапроса, "Индекс", Индекс);
		
		Если ПерваяСтрока Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ПОМЕСТИТЬ ТаблицаКомпетенций";
		КонецЕсли;
		
		ПараметрыЗапроса.Вставить("ВидКомпетенции" + Индекс, СтрокаКомпетенций.ВидКомпетенции);
		ПараметрыЗапроса.Вставить("Значение" + Индекс, СтрокаКомпетенций.Значение);
		ПараметрыЗапроса.Вставить("ВесовойКоэффициент" + Индекс, ВесовойКоэффициент);
		
		ПерваяСтрока = Ложь;
		Если ВесовойКоэффициент > 1 Тогда
			ВесовойКоэффициент = ВесовойКоэффициент / 10;
		КонецЕсли;
	КонецЦикла;
	
	// Получение рейтинга сотрудников на основании таблицы компетенций
	РазделительЗапроса = "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	ТекстЗапроса = ТекстЗапроса + РазделительЗапроса + 
	"ВЫБРАТЬ
	|	ЭП_Сотрудники.Ссылка КАК Сотрудник,
	|	ТаблицаКомпетенций.ВидКомпетенции КАК ВидКомпетенции,
	|	ТаблицаКомпетенций.Значение КАК Значение,
	|	ТаблицаКомпетенций.ВесовойКоэффициент КАК ВесовойКоэффициент
	|ПОМЕСТИТЬ СеткаСотрудников
	|ИЗ
	|	Справочник.ЭП_Сотрудники КАК ЭП_Сотрудники,
	|	ТаблицаКомпетенций КАК ТаблицаКомпетенций
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СеткаСотрудников.Сотрудник КАК Сотрудник,
	|	СУММА(ЕСТЬNULL(ЭП_Компетенции.Значение, 0) * СеткаСотрудников.ВесовойКоэффициент) КАК Рейтинг
	|ПОМЕСТИТЬ РейтингСотрудников
	|ИЗ
	|	СеткаСотрудников КАК СеткаСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭП_КомпетенцииСотрудников.СрезПоследних(
	|				,
	|				ВидКомпетенции В
	|					(ВЫБРАТЬ
	|						ТаблицаКомпетенций.ВидКомпетенции
	|					ИЗ
	|						ТаблицаКомпетенций)) КАК ЭП_Компетенции
	|		ПО СеткаСотрудников.Сотрудник = ЭП_Компетенции.Сотрудник
	|			И СеткаСотрудников.ВидКомпетенции = ЭП_Компетенции.ВидКомпетенции
	|
	|СГРУППИРОВАТЬ ПО
	|	СеткаСотрудников.Сотрудник
	|
	|ИМЕЮЩИЕ
	|	МИНИМУМ(ЕСТЬNULL(ЭП_Компетенции.Значение, 0) >= СеткаСотрудников.Значение) = ИСТИНА";
	
	ТекстЗапроса = ТекстЗапроса + РазделительЗапроса + ИсходныйТекстЗапроса;
	
	// Добавить внутреннее соединение и установить поле "Рейтинг"
	ТекстЗапроса = ТекстЗапроса + "
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РейтингСотрудников КАК РейтингСотрудников
	|		ПО СправочникЭП_Сотрудники.Ссылка = РейтингСотрудников.Сотрудник";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"0 КАК Рейтинг","РейтингСотрудников.Рейтинг КАК Рейтинг");
	
	Возврат ТекстЗапроса;

КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьЭлементПорядка(Порядок,ИмяПоля,ПоУбыванию = Ложь)

	ЭлементПорядка = Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
	ЭлементПорядка.РежимОтображения    = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Авто;
	ЭлементПорядка.ТипУпорядочивания = ?(ПоУбыванию,НаправлениеСортировкиКомпоновкиДанных.Убыв,НаправлениеСортировкиКомпоновкиДанных.Возр);
	ЭлементПорядка.Использование = Истина;

КонецПроцедуры

&НаСервере
Процедура ПоказатьСобытияСотрудника(ТекущийСотрудник)
	
	СобытияСотрудника = "";

	Если Не ЗначениеЗаполнено(ТекущийСотрудник) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭП_СобытияСотрудников.ДатаСобытия КАК ДатаСобытия,
	|	ЭП_СобытияСотрудников.ВидСобытия.Представление КАК ВидСобытия
	|ИЗ
	|	РегистрСведений.ЭП_СобытияСотрудников КАК ЭП_СобытияСотрудников
	|ГДЕ
	|	ЭП_СобытияСотрудников.Сотрудник = &Сотрудник
	|	И ЭП_СобытияСотрудников.ДатаСобытия <= &ДатаСобытия
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСобытия";
	
	Запрос.УстановитьПараметр("Сотрудник",ТекущийСотрудник);
	Запрос.УстановитьПараметр("ДатаСобытия", ТекущаяДата() + ГлубинаСобытий*86400);
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	Пока ВыборкаЗапроса.Следующий() Цикл
		Если Не ПустаяСтрока(СобытияСотрудника) Тогда
			СобытияСотрудника = СобытияСотрудника + "; ";
		КонецЕсли;
		СобытияСотрудника = СобытияСотрудника + Формат(ВыборкаЗапроса.ДатаСобытия,"ДФ=dd.MM.yyyy") + " " + ВыборкаЗапроса.ВидСобытия;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьУволенных(Команда)
	
	Показать = Не Показать;	  
	Элементы.ПоказатьУволенных.Пометка = Показать;
	Если Показать Тогда
		Элементы.ПоказатьУволенных.Заголовок = "Скрыть уволенных";
		Список.Отбор.Элементы.Очистить();
	Иначе
		Элементы.ПоказатьУволенных.Заголовок = "Показать уволенных"; 
		СкрытьУволенных();
	КонецЕсли;      
	
КонецПроцедуры   

&НаСервере
Процедура СкрытьУволенных()

	Уволенные = Новый СписокЗначений; 
	Уволенные.Очистить();
	Уволенные.Добавить(Перечисления.ЭП_СтатусыСотрудников.Уволен);
	   
	Список.Отбор.Элементы.Очистить();
	НовЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтатусСотрудника");
	НовЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	НовЭлементОтбора.Использование = Истина;
	НовЭлементОтбора.ПравоеЗначение = Уволенные;	
			
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование = Истина Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Копирование элементов не доступно, создайте новый элемент!";
		Сообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

