 
#Область ОбработчикиСобытийФормы 

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
    // СтандартныеПодсистемы.КонтактнаяИнформация
    УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
    // Конец СтандартныеПодсистемы.КонтактнаяИнформация

	ПриЧтенииСозданииНаСервере();
	ВыводРезюме();
	
КонецПроцедуры
 
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка) 
	
	// СтандартныеПодсистемы.РаботаСФайлами
	ПараметрыПоля = РаботаСФайлами.ПолеФайла();
	ПараметрыПоля.Размещение  = "ГруппаФотография";
	ПараметрыПоля.ПутьКДанным = "Объект.Фотография";
	ПараметрыПоля.ПутьКДаннымИзображения = "АдресФотографии";

	ДобавляемыеЭлементы = Новый Массив;
	ДобавляемыеЭлементы.Добавить(ПараметрыПоля);
	
	РаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ДобавляемыеЭлементы);
	
	ПолеКартинки = Элементы.Найти("ПолеКартинкиПрисоединенногоФайла0");
	Если ПолеКартинки <> Неопределено Тогда
		ПолеКартинки.МаксимальнаяШирина = 40;
		ПолеКартинки.МаксимальнаяВысота = 15;
	КонецЕсли;
	ПанельКартинки = Элементы.Найти("ПанельКомандУправленияПрисоединеннымиФайлами0");
	Если ПанельКартинки <> Неопределено Тогда
		ПанельКартинки.РастягиватьПоГоризонтали = Ложь;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаСФайлами

    // СтандартныеПодсистемы.КонтактнаяИнформация
    ДополнительныеПараметры = УправлениеКонтактнойИнформацией.ПараметрыКонтактнойИнформации();
    ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "СтраницаКонтактнаяИнформация");
    УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, ДополнительныеПараметры);
    // Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	НастройкаДиаграммы();	
	ОбновитьЗагруженность();  
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере(); 
	КонецЕсли; 
	
	ПолныеПрава = Пользователи.РолиДоступны("ПолныеПрава, ЭП_ИспользованиеЭП_РасчетРезультативностиПолныеПрава",,Ложь);
	
	Если ПолныеПрава Тогда
	
		Элементы.ТабельныйНомер.ТолькоПросмотр = Ложь;
		Элементы.КОД_ЗУП.ТолькоПросмотр = Ложь;
	
	КонецЕсли;  
	
	// Глинский А.А., ЭП-0025054, 12.02.2025 { 
	ВидимостьНаставника(); 
	
	Если НЕ Пользователи.РолиДоступны("ЭП_КонтрольСтатусаСтажировки", ПараметрыСеанса.ТекущийПользователь, Истина) Тогда
		Элементы.Стажёр.Доступность = Ложь;
		Элементы.Наставник.Доступность = Ложь;
	КонецЕсли;
	// Глинский А.А., ЭП-0025054, 12.02.2025 }
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
    УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ);
    // Конец СтандартныеПодсистемы.КонтактнаяИнформация

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ПроверкаДублей(Отказ);

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.КонтактнаяИнформация
    УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
    // Конец СтандартныеПодсистемы.КонтактнаяИнформация 
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаписатьУровеньСотрудника();
    ЗаписатьГрейдСотрудника();
	//ЗанулениеПроцентаЗагрузкиСотрудника();     
	
	МассивПрофилей = ПолучитьРасчетныеПрофилиСотрудника(); 	
	ТекущийИндекс = 0; 
	ВсегоЭлементов = МассивПрофилей.Количество(); 
	
	Пока ТекущийИндекс < ВсегоЭлементов Цикл  
		СледующийИндекс = ТекущийИндекс + 1; 
		Пока СледующийИндекс < ВсегоЭлементов Цикл 
			
			Если МассивПрофилей[СледующийИндекс] = МассивПрофилей[ТекущийИндекс] Тогда 			
				Отказ = Истина;				
				ВсегоЭлементов = ВсегоЭлементов - 1; 
			Иначе 
				СледующийИндекс = СледующийИндекс + 1; 
			КонецЕсли;  
			
		КонецЦикла; 
		ТекущийИндекс = ТекущийИндекс + 1; 
	КонецЦикла;
	
	Если Отказ Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "В табличной части ""Расчетные профили"" есть дубли!";
		Сообщение.Сообщить();
	КонецЕсли; 
	
КонецПроцедуры 

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
    // СтандартныеПодсистемы.КонтактнаяИнформация
    УправлениеКонтактнойИнформацией.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
    // Конец СтандартныеПодсистемы.КонтактнаяИнформация

	ПриЧтенииСозданииНаСервере();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	// СтандартныеПодсистемы.РаботаСФайлами (должен быть первым в процедуре!)
	РаботаСФайламиКлиент.ПоказатьПодтверждениеЗакрытияФормыСФайлами(ЭтотОбъект, Отказ, ЗавершениеРаботы, Объект.Ссылка);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)
    РаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

&НаКлиенте
Процедура ИзменитьПроектноеРезюме(Команда)
	ПараметрыФормы = Новый Структура("Сотрудник", Объект.Ссылка);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗакрытиеФормыПроектногоРезюме", ЭтотОбъект);
	ОткрытьФорму("Обработка.ЭП_ВводПроектногоРезюме.Форма", ПараметрыФормы, ЭтотОбъект,,,,ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеФормыПроектногоРезюме(Результат, ДопПараметры) Экспорт
	ИзменитьФайлРезюме();
КонецПроцедуры

&НаКлиенте
Процедура ВвестиКомпетенции(Команда)
	ПараметрыФормы = Новый Структура("Сотрудник", Объект.Ссылка);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗакрытиеФормыВводаКомпетенций", ЭтотОбъект);
	ОткрытьФорму("Обработка.ЭП_ВводКомпетенцийСотрудника.Форма", ПараметрыФормы, ЭтотОбъект,,,,ОписаниеОповещения);
КонецПроцедуры 

&НаКлиенте
Процедура ЗакрытиеФормыВводаКомпетенций(Результат, ДопПараметры) Экспорт
	ЗаполнитьДиаграмму();
КонецПроцедуры


#КонецОбласти 


#Область ОбработчикиСобытийЭлементовШапкиФормы

 // СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраНажатие(Элемент, СтандартнаяОбработка)   
	
    РаботаСФайламиКлиент.ПолеПредпросмотраНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка); 
	
КонецПроцедуры 

&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
    РаботаСФайламиКлиент.ПолеПредпросмотраПеретаскивание(ЭтотОбъект, Элемент,ПараметрыПеретаскивания, СтандартнаяОбработка);    
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка) 
	
    РаботаСФайламиКлиент.ПолеПредпросмотраПроверкаПеретаскивания(ЭтотОбъект, Элемент,ПараметрыПеретаскивания, СтандартнаяОбработка);  
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

&НаКлиенте
Процедура ФамилияПриИзменении(Элемент)
	
	СформироватьНаименование();	
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяПриИзменении(Элемент)
	
	СформироватьНаименование();	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчествоПриИзменении(Элемент)
	
	СформироватьНаименование();	
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаКомпетенцийПриИзменении(Элемент)
	
	ЗаполнитьДиаграмму();

КонецПроцедуры

&НаКлиенте
Процедура ГруппаКомпетенцийРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ОбновитьГруппуКомптенций(Направление);       
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагруженностьПриИзменении(Элемент)  
	
	ОбновитьОбщуюЗагруженность();        
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлРезюмеНажатие(Элемент, СтандартнаяОбработка) 
	
	СтандартнаяОбработка = Ложь;
	Если Не ЗначениеЗаполнено(Объект.ФайлРезюме) Тогда                                  
		Возврат;
	КонецЕсли;
	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаДляОткрытия(Объект.ФайлРезюме, Неопределено, УникальныйИдентификатор);
	РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла); 
	
КонецПроцедуры

&НаКлиенте
Процедура ДиалогСВопросомПриИзменении(Команда)
 
    Оповещение = Новый ОписаниеОповещения("ДатаУвольнения", ЭтотОбъект);	
    ПоказатьВопрос(Оповещение, "Изменить статус сотрудника?", РежимДиалогаВопрос.ДаНетОтмена);    
 
КонецПроцедуры

&НаКлиенте
Процедура СтатусСотрудникаПриИзменении(Элемент)
	
	УдалитьСтрокиСПустойДатой();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийСпискаЗагруженность

&НаКлиенте
Процедура ЗагруженностьПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ЗагруженностьОткрытьФормуЗаписи(Истина);

КонецПроцедуры

&НаКлиенте
Процедура ЗагруженностьПередНачаломИзменения(Элемент, Отказ) 

	Отказ = Истина;
	ЗагруженностьОткрытьФормуЗаписи(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагруженностьПередУдалением(Элемент, Отказ)
	// Вместо удаления записи установить признак удаления
	// (иначе начнет действовать запись с предыдущим периодом

	Отказ = Истина;

	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыУдаления = Новый Структура;
	ПараметрыУдаления.Вставить("Период", ТекущаяДата());
	ПараметрыУдаления.Вставить("Сотрудник", Объект.Ссылка);
	ПараметрыУдаления.Вставить("Проект", ТекущиеДанные.Проект);

	ЗагруженностьУдалитьНаСервере(ПараметрыУдаления);
	Элементы.Загруженность.Обновить();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УдалитьСтрокиСПустойДатой()
	
	Уволен = ПолучитьСтатусУволен();
	МассивСтрок = ПолучитьСтрокиСПустойДатой(); 

	Если Объект.СтатусСотрудника = Уволен Тогда     		          
		Если МассивСтрок.Количество() <> 0 Тогда
			ДиалогСВопросомСтатус();
		Иначе
			Сообщить("Нет строк с пустой датой факта");
			ДиалогСВопросомСтатусЗагруженность();
		КонецЕсли;
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
		
	ПрочитатьКомпетенции();
	ОбновитьДиаграмму();
		
КонецПроцедуры 

&НаСервере
Процедура ВыводРезюме()
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ВывестиФайлРезюме();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СформироватьНаименование() 
	
	Объект.Наименование = Объект.Фамилия + " " + Объект.Имя + " " + Объект.Отчество;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьКомпетенции()
	
	// Уровень подготовки
	СтруктураОтбора = Новый Структура("Сотрудник, ВидКомпетенции", Объект.Ссылка, Справочники.ЭП_ВидыКомпетенцийСотрудников.УровеньПодготовки);
	УровеньПодготовкиЧисло = РегистрыСведений.ЭП_КомпетенцииСотрудников.ПолучитьПоследнее(, СтруктураОтбора).Значение;
	УровеньПодготовки = Перечисления.ЭП_ГрадацияСотрудников.ЗначениеИзЧисла(УровеньПодготовкиЧисло);

	// Грейд
	СтруктураОтбора = Новый Структура("Сотрудник, ВидКомпетенции", Объект.Ссылка, Справочники.ЭП_ВидыКомпетенцийСотрудников.Грейд);
	Грейд = РегистрыСведений.ЭП_КомпетенцииСотрудников.ПолучитьПоследнее(, СтруктураОтбора).Значение;
		
КонецПроцедуры
		
&НаСервере
Процедура ВывестиФайлРезюме()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Файлы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла.Ссылка = &Сотрудник
	|	И Файлы.ЭП_ВидФайла.Ссылка = &ВидФайла
	|
	|УПОРЯДОЧИТЬ ПО
	|	Файлы.ДатаСоздания УБЫВ";
	
 	Запрос.УстановитьПараметр("Сотрудник", Объект.Ссылка);
	Запрос.УстановитьПараметр("ВидФайла", Справочники.ЭП_ВидыФайлов.ПроектноеРезюме);
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Объект.ФайлРезюме = Выборка.Ссылка;
	Иначе
		Объект.ФайлРезюме = Неопределено;
	КонецЕсли;
		
КонецПроцедуры 

&НаСервере
Процедура ИзменитьФайлРезюме() 
	ПрошлыйФайлРезюме = Объект.ФайлРезюме;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Файлы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла.Ссылка = &Сотрудник
	|	И Файлы.ЭП_ВидФайла.Ссылка = &ВидФайла
	|
	|УПОРЯДОЧИТЬ ПО
	|	Файлы.ДатаСоздания УБЫВ";
	
 	Запрос.УстановитьПараметр("Сотрудник", Объект.Ссылка);
	Запрос.УстановитьПараметр("ВидФайла", Справочники.ЭП_ВидыФайлов.ПроектноеРезюме);
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Объект.ФайлРезюме = Выборка.Ссылка; 
	Иначе
		Объект.ФайлРезюме = Неопределено;
	КонецЕсли;
	
	Если ПрошлыйФайлРезюме <> Объект.ФайлРезюме Тогда 
		ЗначениеОбъект = РеквизитФормыВЗначение("Объект");	
		ЗначениеОбъект.Записать();
		ЗначениеВРеквизитФормы(ЗначениеОбъект, "Объект");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаписатьУровеньСотрудника() 

	УровеньПодготовкиЧисло = Перечисления.ЭП_ГрадацияСотрудников.ЧислоИзЗначения(УровеньПодготовки);
	
	Если УровеньПодготовкиЧисло = Неопределено Тогда
		Возврат;
	КонецЕсли;         
	
	СтруктураОтбора = Новый Структура("Сотрудник, ВидКомпетенции", Объект.Ссылка, Справочники.ЭП_ВидыКомпетенцийСотрудников.УровеньПодготовки);
	ЧислоИзРегистра = РегистрыСведений.ЭП_КомпетенцииСотрудников.ПолучитьПоследнее(, СтруктураОтбора).Значение;	
	Если УровеньПодготовкиЧисло = ЧислоИзРегистра Тогда
		Возврат;
	КонецЕсли;    
	
	РегЗапись = РегистрыСведений.ЭП_КомпетенцииСотрудников.СоздатьМенеджерЗаписи();
	РегЗапись.Период = ТекущаяДатаСеанса(); 
	ЗаполнитьЗначенияСвойств(РегЗапись, СтруктураОтбора);
	РегЗапись.Значение = УровеньПодготовкиЧисло;
	РегЗапись.Записать();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьГрейдСотрудника() 
	
	СтруктураОтбора = Новый Структура("Сотрудник, ВидКомпетенции", Объект.Ссылка, Справочники.ЭП_ВидыКомпетенцийСотрудников.Грейд);
	ЧислоИзРегистра = РегистрыСведений.ЭП_КомпетенцииСотрудников.ПолучитьПоследнее(, СтруктураОтбора).Значение;	
	
	Если Грейд = ЧислоИзРегистра Тогда
		Возврат;
	КонецЕсли;    
	
	РегЗапись = РегистрыСведений.ЭП_КомпетенцииСотрудников.СоздатьМенеджерЗаписи();
	РегЗапись.Период = ТекущаяДатаСеанса(); 
	ЗаполнитьЗначенияСвойств(РегЗапись, СтруктураОтбора);
	РегЗапись.Значение = Грейд;
	РегЗапись.Записать();
		
КонецПроцедуры

&НаСервере
Процедура ПроверкаДублей(Отказ)  
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ЭП_Сотрудники.Ссылка) КАК Ссылка
		|ИЗ
		|	Справочник.ЭП_Сотрудники КАК ЭП_Сотрудники
		|ГДЕ
		|	ЭП_Сотрудники.Наименование = &Наименование
		|	И ЭП_Сотрудники.Ссылка <> &Ссылка
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(ЭП_Сотрудники.Ссылка) > 0";
	
	Запрос.УстановитьПараметр("Наименование", Объект.Наименование);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ОбщегоНазначения.СообщитьПользователю("Такой сотрудник уже есть",,,,Отказ);
	КонецЕсли;	 
				
КонецПроцедуры	

&НаСервере
Процедура УдалениеЗагруженностиСотрудника()
	
	Если Объект.СтатусСотрудника = Перечисления.ЭП_СтатусыСотрудников.Уволен Тогда	
		НаборЗаписей = РегистрыСведений.ЭП_ЗагруженностьСотрудников.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сотрудник.Установить(Объект.Ссылка);		
		НаборЗаписей.Записать(); 
	КонецЕсли;           
	
КонецПроцедуры

&НаКлиенте
Процедура ДиалогСВопросомСтатус()
 
    Оповещение = Новый ОписаниеОповещения("УдалениеСтрок", ЭтотОбъект);	
    ПоказатьВопрос(Оповещение, "Удалить достижения сотрудника с пустой датой факта?", РежимДиалогаВопрос.ДаНетОтмена);    
 
КонецПроцедуры

&НаКлиенте
Процедура ДиалогСВопросомСтатусЗагруженность()   
	
	Оповещение = Новый ОписаниеОповещения("УдалениеЗагруженности", ЭтотОбъект);	
    ПоказатьВопрос(Оповещение, "Очистить загруженность сотрудника?", РежимДиалогаВопрос.ДаНетОтмена);     

КонецПроцедуры

&НаКлиенте
Процедура УдалениеЗагруженности(Ответ, Элемент) Экспорт 
	
	Если Ответ = КодВозвратаДиалога.Да Тогда 
		УдалениеЗагруженностиСотрудника();					
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалениеСтрок(Ответ, Элемент) Экспорт 
	
	Если Ответ = КодВозвратаДиалога.Да Тогда 
		МассивНомеровСтрок = ПолучитьСтрокиСПустойДатой();		
		Индекс = МассивНомеровСтрок.ВГраница();   
		
		Пока Индекс >= 0 Цикл			
			ТекущаяСтрока = МассивНомеровСтрок[Индекс] - 1;
			Объект.Достижения.Удалить(ТекущаяСтрока);
			Индекс = Индекс - 1;
		КонецЦикла;
		
		ДиалогСВопросомСтатусЗагруженность();
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда  
		ДиалогСВопросомСтатусЗагруженность();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаУвольнения(Ответ, Элемент) Экспорт 
	
	Если Ответ = КодВозвратаДиалога.Да Тогда     
		Объект.СтатусСотрудника = ПолучитьСтатусУволен(); 
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтатусУволен()
	
	ПараметрСтатуса = Перечисления.ЭП_СтатусыСотрудников.Уволен;
	Возврат ПараметрСтатуса; 
	
КонецФункции

&НаСервере
Функция ПолучитьСтрокиСПустойДатой()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭП_СотрудникиДостижения.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	Справочник.ЭП_Сотрудники.Достижения КАК ЭП_СотрудникиДостижения
		|ГДЕ
		|	ЭП_СотрудникиДостижения.ДатаФакт = &ДатаФакт
		|	И ЭП_СотрудникиДостижения.Ссылка = &Ссылка";
		
	Запрос.УстановитьПараметр("ДатаФакт", '00010101');
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();	
	МассивЗапроса = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("НомерСтроки");
	
	Возврат МассивЗапроса;	
КонецФункции 

&НаСервере
Функция ПолучитьОбщуюЗагруженность()  
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭП_ЗагруженностьСотрудниковСрезПоследних.ПроцентЗагрузки КАК ПроцентЗагрузки
		|ИЗ
		|	РегистрСведений.ЭП_ЗагруженностьСотрудников.СрезПоследних КАК ЭП_ЗагруженностьСотрудниковСрезПоследних
		|ГДЕ
		|	ЭП_ЗагруженностьСотрудниковСрезПоследних.Сотрудник = &Сотрудник";
		
	Запрос.УстановитьПараметр("Сотрудник", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();	
	МассивЗагруженности = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ПроцентЗагрузки");
	
	Возврат МассивЗагруженности;		
КонецФункции

&НаСервере
Функция ПолучитьРасчетныеПрофилиСотрудника() 
	

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭП_СотрудникиРасчетныеПрофили.Профиль КАК Профиль
		|ИЗ
		|	Справочник.ЭП_Сотрудники.РасчетныеПрофили КАК ЭП_СотрудникиРасчетныеПрофили
		|ГДЕ
		|	ЭП_СотрудникиРасчетныеПрофили.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();	
	Массив = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Профиль");
	
	Возврат Массив;
КонецФункции   

// Глинский А.А., ЭП-0025054, 12.02.2025 {
&НаСервере
Процедура ВидимостьНаставника() 
	
	Если Объект.Стажёр Тогда
		Элементы.Наставник.Видимость = Истина;
	Иначе
		Элементы.Наставник.Видимость = Ложь;
		Объект.Наставник = Справочники.ЭП_Сотрудники.ПустаяСсылка();
	КонецЕсли;    
	
КонецПроцедуры // Глинский А.А., ЭП-0025054, 12.02.2025 }

#КонецОбласти

#Область РаботаСДиаграммой

&НаСервере
Процедура ОбновитьДиаграмму()
	Если Не ЗначениеЗаполнено(ГруппаКомпетенций) Тогда
		ОбновитьГруппуКомптенций();
	Иначе
		ЗаполнитьДиаграмму();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьГруппуКомптенций(Направление = 1)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЭП_ВидыКомпетенцийСотрудников.Родитель КАК ГруппаКомпетенций
	|ИЗ
	|	Справочник.ЭП_ВидыКомпетенцийСотрудников КАК ЭП_ВидыКомпетенцийСотрудников
	|ГДЕ
	|	НЕ ЭП_ВидыКомпетенцийСотрудников.ЭтоГруппа
	|	И ЭП_ВидыКомпетенцийСотрудников.Родитель <> &ПустаяСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ГруппаКомпетенций УБЫВ";
	
	Если Направление = 1 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса," УБЫВ","");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ПустаяСсылка", Справочники.ЭП_ВидыКомпетенцийСотрудников.ПустаяСсылка());
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	// Найти текущую группу (если не найдена, не страшно)
	ВыборкаЗапроса.НайтиСледующий(ГруппаКомпетенций,"ГруппаКомпетенций"); 
	// Получить следующую группу
	Если Не ВыборкаЗапроса.Следующий() Тогда // Была последняя, начать сначала
		ВыборкаЗапроса.Сбросить();
		ВыборкаЗапроса.Следующий();
	КонецЕсли;
	
	ГруппаКомпетенций = ВыборкаЗапроса.ГруппаКомпетенций;
	
	ЗаполнитьДиаграмму();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДиаграмму()
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭП_КомпетенцииСотрудников.ВидКомпетенции КАК ВидКомпетенции,
	|	ЭП_КомпетенцииСотрудников.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.ЭП_КомпетенцииСотрудников КАК ЭП_КомпетенцииСотрудников
	|ГДЕ
	|	ЭП_КомпетенцииСотрудников.Сотрудник = &Сотрудник
	|	И ЭП_КомпетенцииСотрудников.ВидКомпетенции В ИЕРАРХИИ(&ВидКомпетенции)
	| 	И &ВидКомпетенции <> &ПустаяСсылка";
	
	Запрос.УстановитьПараметр("Сотрудник", Объект.Ссылка); 
	Запрос.УстановитьПараметр("ВидКомпетенции", ГруппаКомпетенций);
	Запрос.УстановитьПараметр("ПустаяСсылка", Справочники.ЭП_ВидыКомпетенцийСотрудников.ПустаяСсылка());
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Диаграмма.Обновление = Ложь;
	Диаграмма.Очистить();
	
	Серия = Диаграмма.Серии.Добавить();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Точка    = Диаграмма.УстановитьТочку(ВыборкаДетальныеЗаписи.ВидКомпетенции);
		Диаграмма.УстановитьЗначение(Точка, Серия, ВыборкаДетальныеЗаписи.Значение);
		
	КонецЦикла;
	
	Диаграмма.Обновление = Истина;
	
КонецПроцедуры

&НаСервере
Процедура НастройкаДиаграммы()
	
	Диаграмма.ОтображатьЛегенду = Ложь;

КонецПроцедуры


#КонецОбласти

#Область РаботаСоСписокмЗагруженности

&НаСервере
Процедура ОбновитьЗагруженность()
	
	Загруженность.Параметры.УстановитьЗначениеПараметра("Сотрудник", Объект.Ссылка);
	ОбновитьОбщуюЗагруженность(); 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОбщуюЗагруженность()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(ЭП_ЗагруженностьСотрудниковСрезПоследних.ПроцентЗагрузки) КАК ПроцентЗагрузки
	|ИЗ
	|	РегистрСведений.ЭП_ЗагруженностьСотрудников.СрезПоследних(, Сотрудник = &Сотрудник) КАК ЭП_ЗагруженностьСотрудниковСрезПоследних
	|ГДЕ
	|	НЕ ЭП_ЗагруженностьСотрудниковСрезПоследних.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Сотрудник", Объект.Ссылка);
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	ВыборкаЗапроса.Следующий();
	ОбщаяЗагруженность = ВыборкаЗапроса.ПроцентЗагрузки;
	
КонецПроцедуры
	
&НаКлиенте
Процедура ЗагруженностьОткрытьФормуЗаписи(РежимДобавления)
	// Всегда открывать форму новой записи с заполнением полей при необходимости

	Если РежимДобавления Тогда
		ПараметрыЗаполнения = Новый Структура;
	Иначе
		ТекущиеДанные = Элементы.Загруженность.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ПараметрыЗаполнения = Новый Структура("Проект,ПроцентЗагрузки,СрокНахожденияВПроекте");
		ЗаполнитьЗначенияСвойств(ПараметрыЗаполнения,ТекущиеДанные);
	КонецЕсли;
	
	ПараметрыЗаполнения.Вставить("Период", ТекущаяДата());
	ПараметрыЗаполнения.Вставить("Сотрудник", Объект.Ссылка);
	
	ПараметрыОткрытия = Новый Структура("РежимФормы, ЗначенияЗаполнения", "Сотрудник", ПараметрыЗаполнения);
		
	ОткрытьФорму("РегистрСведений.ЭП_ЗагруженностьСотрудников.ФормаЗаписи", ПараметрыОткрытия, Элементы.Загруженность,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура ЗагруженностьУдалитьНаСервере(ПараметрыУдаления)
	
	РегЗапись = РегистрыСведений.ЭП_ЗагруженностьСотрудников.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(РегЗапись,ПараметрыУдаления);
	РегЗапись.ПометкаУдаления = Истина;
	РегЗапись.Записать();
	
	ОбновитьОбщуюЗагруженность();
	
КонецПроцедуры

#КонецОбласти

#Область КонтактнаяИнформация
// СтандартныеПодсистемы.КонтактнаяИнформация

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	УправлениеКонтактнойИнформациейКлиент.НачатьИзменение(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачатьОчистку(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	УправлениеКонтактнойИнформациейКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.АвтоПодборАдреса(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, Элемент.Имя, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачатьОбработкуНавигационнойСсылки(ЭтотОбъект, Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьОбновлениеКонтактнойИнформации(Результат, ДополнительныеПараметры) Экспорт
	ОбновитьКонтактнуюИнформацию(Результат);
КонецПроцедуры

&НаСервере
Процедура ОбновитьКонтактнуюИнформацию(Результат)
	УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
КонецПроцедуры

// Глинский А.А., ЭП-0025054, 12.02.2025 {
&НаКлиенте
Процедура СтажёрПриИзменении(Элемент)
	
	ВидимостьНаставника();
		
КонецПроцедуры // Глинский А.А., ЭП-0025054, 12.02.2025 }

// Конец СтандартныеПодсистемы.КонтактнаяИнформация 
#КонецОбласти

