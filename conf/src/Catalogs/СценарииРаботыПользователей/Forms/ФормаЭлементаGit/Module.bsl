#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ДанныеСценария = Параметры.ДанныеСценария;
	
	Если Параметры.Свойство("СсылкаНаОшибку") Тогда
		СсылкаНаОшибку = Параметры.СсылкаНаОшибку;
	КонецЕсли;	 
	
	АдресСлужебныеДанныеСценариев = Параметры.АдресСлужебныеДанныеСценариев;
	
	ТокенПользователя = Параметры.ТокенПользователя;
	Ветка = Параметры.Ветка;
	Проект = Параметры.Проект;
	UIDСценария = Параметры.UIDСценария;
	Если Параметры.Свойство("UIDСценарияКопирования") Тогда
		UIDСценарияКопирования = Параметры.UIDСценарияКопирования;
	Иначе
		UIDСценарияКопирования = Неопределено;
	КонецЕсли;	 
	ИдентификаторКоммита = Параметры.ИдентификаторКоммита;
	ОригинальныйТекстМетаданных = Параметры.ОригинальныйТекстМетаданных;
	
	ДанныеСценариевКеш = ПолучитьИзВременногоХранилища(АдресСлужебныеДанныеСценариев);
	ДанныеСценарияИзКеш = ДанныеСценариевКеш.UIDCценариев[UIDСценария];
	Если ДанныеСценарияИзКеш <> Неопределено Тогда
		Если ДанныеСценарияИзКеш.Свойство("НовыйПутьВДереве") Тогда
			ФайлГруппа = Новый Файл(ДанныеСценарияИзКеш.НовыйПутьВДереве);
		Иначе	
			ФайлПолныйПутьКеш = Новый Файл(ДанныеСценарияИзКеш.ПолноеИмяФайла);
			ФайлКаталогСценария = Новый Файл(ФайлПолныйПутьКеш.Путь);
			ФайлГруппа = Новый Файл(ФайлКаталогСценария.Путь);
			ПолноеИмяВДереве = ФайлГруппа.ПолноеИмя;
		КонецЕсли;	 
		ГруппаСценария = ФайлГруппа.Имя;
	КонецЕсли;	 
	
	Если Параметры.Свойство("ДанныеИерархии") Тогда
		ДанныеИерархии = Параметры.ДанныеИерархии;
	КонецЕсли;	 
	
	ТипРедактора = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
	    "Тестирование", "ТипРедактораВСценарииТестирования");
	
	Если НЕ ЗначениеЗаполнено(ТипРедактора) Тогда
		ТипРедактора = ТестированиеКлиентСервер.ТипРедактораФорматированныйДокумент();
	КонецЕсли;
	
	ЭтоНовыйЭлемент = Ложь;
	Если Параметры.Свойство("ЭтоНовыйЭлемент") И Параметры.ЭтоНовыйЭлемент Тогда
		ЭлементУжеЗаписывался = Истина;
		ЭтоНовыйЭлемент = Истина;
		Ответственный = Пользователи.АвторизованныйПользователь();
		Наименование = НСтр("ru='Новый сценарий'");
		Если ПустаяСтрока(UIDСценария) Тогда
			ЭлементУжеЗаписывался = Ложь;
			UIDСценария = Строка(Новый УникальныйИдентификатор);
			ПолноеИмяВДереве = Параметры.ДанныеИерархии;
			ФайлГруппа = Новый Файл(ПолноеИмяВДереве);
			ГруппаСценария = ФайлГруппа.Имя;
			
			ОпределитьУровниОтчетаПоСтроке(ПолноеИмяВДереве, УровеньОтчета1, УровеньОтчета2);
		КонецЕсли;	 
		Элементы.СсылкаВРепозитории.Видимость = Ложь;
	КонецЕсли;	 
	Если НЕ ЭтоНовыйЭлемент ИЛИ
			(Параметры.Свойство("КопированиеСценария") И Параметры.КопированиеСценария) И ДанныеСценария <> Неопределено Тогда
			
		Наименование = ДанныеСценария["ДанныеСценария"]["Имя"];
		
		Если Параметры.Свойство("КопированиеСценария") Тогда
			Наименование = НСтр("ru='Новый сценарий'");
		Иначе	
			СсылкаВРепозитории = СсылкаВРепозитории();
			Код = ДанныеСценария["ДанныеСценария"]["Код"];
		КонецЕсли;	 	
		
		УровеньОтчета1 = ДанныеСценария["ДанныеСценария"]["УровеньОтчета1"];
		УровеньОтчета2 = ДанныеСценария["ДанныеСценария"]["УровеньОтчета2"];
		
		Если НРег(ДанныеСценария["ДанныеСценария"]["РазрешеноИспользоватьВДругихФункциях"]) = "да" Тогда
			РазрешеноИспользоватьВДругихФункциях = Истина;
		КонецЕсли;	 
		
		Если НЕ ЗначениеЗаполнено(Проект) Тогда
			Проект = ПроектПоДаннымСценария(ДанныеСценария["ДанныеСценария"]["Проект"], ДанныеСценария["ДанныеСценария"]["ПроектUID"]);
		КонецЕсли;	 
		ФункцияСистемы = ФункцияСистемыПоДаннымСценария(ДанныеСценария["ДанныеСценария"]["UIDФункцияСистемы"]);
		Публикуется = (ДанныеСценария["ДанныеСценария"]["Публикуется"] = "Да");
		ПрофильПользователя = ПрофильПользователяПоДаннымСценария(Проект, ДанныеСценария["ДанныеСценария"]["ПрофильПользователя"]);
		Ответственный = ОтветственныйСистемыПоДаннымСценария(ДанныеСценария["ДанныеСценария"]["UIDОтветственный"]);
		РазделПроекта = РазделПроектаПоДаннымСценария(ДанныеСценария["ДанныеСценария"]["UIDРазделПроекта"]);
		УстановитьОписаниеСценария(ДанныеСценария["ДанныеСценария"]["ОписаниеСценария"]);
		ТегиСценария = ДанныеСценария["ТегиСценария"];
		ТекстСценария = ДанныеСценария["ТекстСценария"];
		ИсходныйТекстСценария = ТекстСценария;
		ПереданныеВызывающиеСценарии = ДанныеСценария["ВызывающиеСценарии"];
	КонецЕсли;	 
	
	ДелатьРаскраску = ДелатьРаскраску();
	
	УправлениеВидимостьюЭлементовСервер();
	
	ДанныеЛокальныхИзменений = Неопределено;
	
	Для Каждого СтрокаДанных Из Параметры.ДанныеРанееИзмененныхСценариев.ИзмененныеМетаданныеИТекстСценария Цикл
		Если UIDСценария = СтрокаДанных["ДанныеСценария"]["UID"]
				ИЛИ UIDСценарияКопирования = СтрокаДанных["ДанныеСценария"]["UID"] Тогда
			ТекстСценария = СтрокаДанных["ТекстСценария"];
			ТегиСценария = СтрокаДанных["ТегиСценария"];
			СценарийИзмененЛокально = Истина;
			ДанныеЛокальныхИзменений = СтрокаДанных;
			Публикуется = (СтрокаДанных["ДанныеСценария"]["Публикуется"] = "Да");
			Ответственный = ОтветственныйСистемыПоДаннымСценария(СтрокаДанных["ДанныеСценария"]["UIDОтветственный"]);
			ФункцияСистемы = ФункцияСистемыПоДаннымСценария(СтрокаДанных["ДанныеСценария"]["UIDФункцияСистемы"]);
			РазрешеноИспользоватьВДругихФункциях = (СтрокаДанных["ДанныеСценария"]["РазрешеноИспользоватьВДругихФункциях"] = "Да");
			РазделПроекта = РазделПроектаПоДаннымСценария(СтрокаДанных["ДанныеСценария"]["UIDРазделПроекта"]);
			ПрофильПользователя = ПрофильПользователяПоДаннымСценария(Проект, СтрокаДанных["ДанныеСценария"]["ПрофильПользователя"]);
			Если НЕ Параметры.Свойство("КопированиеСценария") Тогда
				Наименование = СтрокаДанных["ДанныеСценария"]["Имя"];
				Код = СтрокаДанных["ДанныеСценария"]["Код"];
			КонецЕсли;	 
			УстановитьОписаниеСценария(СтрокаДанных["ДанныеСценария"]["ОписаниеСценария"]);
			ПереданныеВызывающиеСценарии = СтрокаДанных["ВызывающиеСценарии"];
			
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	 
	
	Если ЭтоНовыйЭлемент Тогда
		Если ПустаяСтрока(Код) Тогда
			Код = СгенерироватьНовыйКод();
		КонецЕсли;	 
	КонецЕсли;	 
	
	Тестирование.УстановитьТекстВФорматированныйДокумент(ТекстСценария, СхемаПроцессаТекст);
	ОбычныйТекст = СхемаПроцессаТекст.ПолучитьТекст();
	
	Если НЕ ЭтоНовыйЭлемент Тогда
		ПереданныеПараметрыВходящие = Тестирование.ПараметрыСценарияИзТекстовыхДанных(ДанныеСценария["ПараметрыСценария"]);
		Тестирование.ЗаполнитьПараметрыВходящиеИзТекстовыхДанных(ПараметрыВходящие, ПереданныеПараметрыВходящие);
	КонецЕсли;	 
	
	Если СценарийИзмененЛокально Тогда
		ПараметрыВходящие.Очистить();
		ПараметрыНастройки = Тестирование.ПараметрыСценарияИзТекстовыхДанных(ДанныеЛокальныхИзменений["ПараметрыСценария"]);
		Тестирование.ЗаполнитьПараметрыВходящиеИзТекстовыхДанных(ПараметрыВходящие, ПараметрыНастройки);
	КонецЕсли;	 
	
	ТаблицаТегов.Загрузить(Тестирование.ТегиСценарияИзТекстовыхДанных(ТегиСценария));
	Если НЕ ЭтоНовыйЭлемент ИЛИ ЭлементУжеЗаписывался Тогда
		ВызывающиеСценарии.Загрузить(Тестирование.ВызывающиеСценарииТекстовыхДанных(ПереданныеВызывающиеСценарии));
	КонецЕсли;	 
	
	СохраненноеЗначение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
	    "Справочник.СценарииРаботыПользователей.ФормаЭлемента", "ТекущаяСтраницаФормыМикропроцесса");
	
	Если СохраненноеЗначение <> Неопределено Тогда
		Страница = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.Найти(СохраненноеЗначение);
		Если Страница <> Неопределено Тогда
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Страница;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если Параметры.Свойство("ПерейтиКСтрокеСценария") Тогда
		ПерейтиКНужнойСтрокеСценария = Параметры.ПерейтиКСтрокеСценария;
	КонецЕсли;
	
	Если Параметры.Свойство("СоздатьШаблон") И Параметры.СоздатьШаблон Тогда
		Наименование = Параметры.ИмяШаблона;
		Текст = Параметры.Текст;
		ФункцияСистемы = Параметры.ФункцияСистемы;
		ТестированиеГрафическиеСхемыСервер.СделатьСтандартнуюПодготовкуТекстаHTML(Текст);
		ШаблонHTML = Справочники.СценарииРаботыПользователей.ПолучитьМакет("ШаблонHTML");
		ТекстHTML  = ШаблонHTML.ПолучитьТекст();
		ТекстHTML  = СтрЗаменить(ТекстHTML,"<ПроизвольныйТекст>",Текст);
		СхемаПроцессаТекст.УстановитьHTML(ТекстHTML,Новый Структура);
	КонецЕсли;	
	
	Если Параметры.Свойство("КопированиеСценария") И Параметры.КопированиеСценария Тогда
		Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;	 
	
	// СтандартныеПодсистемы.Свойства
	СвойстваПроекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Проект,
		"НаборСвойствДляСценариевРаботыПользователейВыгружаемый,НаборСвойствДляСценариевРаботыПользователейНеВыгружаемый");
	ГруппыДляРазмещения = Новый СписокЗначений;
	ГруппыДляРазмещения.Добавить(СвойстваПроекта.НаборСвойствДляСценариевРаботыПользователейВыгружаемый,
		Элементы.ГруппаВыгружаемые.Имя);
	ГруппыДляРазмещения.Добавить(СвойстваПроекта.НаборСвойствДляСценариевРаботыПользователейНеВыгружаемый,
		Элементы.ГруппаНевыгружаемые.Имя);
	ГруппыДляРазмещения.Добавить("ВсеОстальные", Элементы.ГруппаОбщие.Имя);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", ГруппыДляРазмещения);
	ОбъектСценария = Справочники.СценарииРаботыПользователей.СоздатьЭлемент();
	ОбъектСценария.Владелец = Проект;
	//ДополнительныеПараметры.Вставить("Объект", ОбъектСценария);
	ДополнительныеПараметры.Вставить("ПроизвольныйОбъект", Истина);

	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект, ОбъектСценария);
	
	// В Git можно редактировать только выгружаемые теги, поэтому остальные не отображаются.
	Элементы.ГруппаОбщие.Видимость = Ложь;
	Элементы.ГруппаНевыгружаемые.Видимость = Ложь;
	
	ВидимостьПанелиШагов = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
	    "Справочник.СценарииРаботыПользователей.ФормаЭлемента", "ВидимостьПанелиШагов");
	Если ТипЗнч(ВидимостьПанелиШагов) = Тип("Булево") Тогда
		Элементы.ГруппаИзвестныеШаги.Видимость = ВидимостьПанелиШагов;
	КонецЕсли;	 
	
	// Заполнение дополнительных свойств из таблицы тегов
	Для Каждого Строка Из ТаблицаТегов Цикл
		ОписаниеРеквизитов = ЭтотОбъект.Свойства_ОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("Наименование", Строка.Имя));
		Для Каждого ОписаниеРеквизита Из ОписаниеРеквизитов Цикл
			 ЭтотОбъект[ОписаниеРеквизита.ИмяРеквизитаЗначение] = Истина;
		КонецЦикла;
	КонецЦикла;

	// Конец СтандартныеПодсистемы.Свойства	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Заголовок = СформироватьЗаголовок();
	
	ОтформатироватьСценарий(Истина);
	СкопирватьДанныеПоВложеннымСценариям();
	Если ЭтоНовыйЭлемент Тогда
		Если НЕ ЭлементУжеЗаписывался Тогда
			Модифицированность = Истина;
		КонецЕсли;	 
	Иначе	
		Если НужноУстановитьМодифицированность Тогда
			Модифицированность = Истина;
			НужноУстановитьМодифицированность = Ложь;
		Иначе	
			Модифицированность = Ложь;
		КонецЕсли;	 
		
	КонецЕсли;	

	Если ПерейтиКНужнойСтрокеСценария > 0 Тогда
		ПодключитьОбработчикОжидания("ПерейтиКНужнойСтрокеСценарияОбработчикОжидания",0.1,Истина);
	КонецЕсли;

	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		СтандартнаяОбработка = Ложь;
		Отказ = Истина;
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВопросаПриЗакрытии", ЭтотОбъект);
		КнопкиДаНет = РежимДиалогаВопрос.ДаНетОтмена;
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, КнопкиДаНет, , КодВозвратаДиалога.Да);
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	ОтключитьОбработчикОжидания("ОбновитьТекущийPIDTestManager");
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьЗначения(Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОтменаИзмененийСценариевРаботыПользователя" Тогда
		Если СценарийИзмененЛокально Тогда
			Модифицированность = Истина;
		КонецЕсли;	 
	ИначеЕсли ИмяСобытия = "ИзменениеФайловСценарияВЛокальнойКопии" Тогда
		Если Параметр = UIDСценария Тогда
			ЗаписатьСценарийВоВременныйФайл();
		КонецЕсли;	 
	ИначеЕсли ИмяСобытия = "ИзмененияАдресаСлужебныхДанныхGit" Тогда
		Если Параметр.Ветка = Ветка Тогда
			АдресСлужебныеДанныеСценариев = Параметр.АдресСлужебныеДанныеСценариев;
		КонецЕсли;	 
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Если ВыбранноеЗначение.Свойство("ИмяСобытия") Тогда
			Если ВыбранноеЗначение.ИмяСобытия = "СозданиеШаблонаСценария" Тогда
				Если ЗначениеЗаполнено(Код) Тогда
					ПозицияНачала    = 0;
					ПозицияОкончания = 0;
					Текст = ПолучитьВыделенныйТекстФорматированногоДокумента(ПозицияНачала,ПозицияОкончания);
					
					СхемаПроцессаТекст.Удалить(ПозицияНачала,ПозицияОкончания);
					СхемаПроцессаТекст.Вставить(ПозицияНачала,"И " + ВыбранноеЗначение.ИмяШаблона);
					
					Модифицированность = Истина;
				КонецЕсли;	 
			ИначеЕсли ВыбранноеЗначение.ИмяСобытия = "ЗапуститьТест" Тогда
				ЗапуститьТестСНачала();
			КонецЕсли;	 
		ИначеЕсли ВыбранноеЗначение.Свойство("ИзменениеГруппы") Тогда	
			Если ЗначениеЗаполнено(ВыбранноеЗначение.ПолноеИмя) Тогда
				Файл = Новый Файл(ВыбранноеЗначение.ПолноеИмя);
				ГруппаСценария = Файл.Имя;
			Иначе
				ГруппаСценария = "";
			КонецЕсли;
			ПолноеИмяВДереве = СтрЗаменить(ВыбранноеЗначение.ПолноеИмя, "/", "\");
			Модифицированность = Истина;
			ПроисходилоИзменениеГруппы = Истина;
		КонецЕсли;	 
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Ветки") Тогда	
		ОткрытьСценарийВДругойВетке(ВыбранноеЗначение);
	КонецЕсли;	 
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтформатироватьСхемуТекст(Команда)
	ОтформатироватьСценарий(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВИндекс(Команда)
	Если Модифицированность Тогда
		ЗаписатьСценарийВоВременныйФайл();
		СценарийИзмененЛокально = Истина;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВИндексИЗакрыть(Команда)
	
	ОбработчикДобавитьВИндексИЗакрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Фиксировать(Команда)
	Если Модифицированность Тогда
		ЗаписатьСценарийВоВременныйФайл();
	КонецЕсли;	 
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ветка", Ветка);
	ПараметрыФормы.Вставить("Проект", Проект);
	ПараметрыФормы.Вставить("ТокенПользователя", ТокенПользователя);
	ПараметрыФормы.Вставить("АдресСлужебныеДанныеСценариев", АдресСлужебныеДанныеСценариев);
	ПараметрыФормы.Вставить("ИдентификаторКоммита", ИдентификаторКоммита);
	ПараметрыФормы.Вставить("СсылкаНаОшибку", СсылкаНаОшибку);
	ОткрытьФорму("Справочник.СценарииРаботыПользователей.Форма.ФормаФиксироватьИзменения", ПараметрыФормы, , Ветка); 
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьТекстыСценариев(Команда)
	
	СформироватьТекстСценарияДляПросмотра(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьТекстыСценариевБезРаскраски(Команда)
	
	СформироватьТекстСценарияДляПросмотра(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаБДДляЗапускаТестов(Команда)
	ПараметрыЗапускаТестов = ТестированиеКлиент.ПараметрыЗапускаТестов();
	ПараметрыЗапускаТестов.Вставить("Сценарий", Наименование);
	ПараметрыЗапускаТестов.Вставить("ЗапускИзСценария",Истина);
	
	ОткрытьФорму("Обработка.НастройкиЛокальногоЗапускаСценариев.Форма", 
		ПараметрыЗапускаТестов, 
		ЭтаФорма,
		УникальныйИдентификатор,,,, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ЗапускТестов(Команда)
	ЗапуститьТестСНачала();
КонецПроцедуры

&НаКлиенте
Процедура ЗапускТестовСТекущегоШага(Команда)
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЗапускСценария",Истина);
	ПараметрыОткрытия.Вставить("СТекущегоШага",Истина);
	ПараметрыОткрытия.Вставить("ЗагрузкаСценария",Ложь);
	ОткрытьФормуФреймворкаТестирования(ПараметрыОткрытия);
КонецПроцедуры

&НаКлиенте
Процедура ЗапускФреймворкаТестирования(Команда)
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЗапускСценария",Ложь);
	ПараметрыОткрытия.Вставить("СТекущегоШага",Ложь);
	ПараметрыОткрытия.Вставить("ЗагрузкаСценария",Истина);
	ОткрытьФормуФреймворкаТестирования(ПараметрыОткрытия);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКомментарийКВыделеннымСтрокам(Команда)
	ПозицияНачала    = 0;
	ПозицияОкончания = 0;
	Текст            = ПолучитьВыделенныйТекстФорматированногоДокумента(ПозицияНачала,ПозицияОкончания);
	
	Если СокрЛП(Текст) = "" Тогда
		Возврат;
	КонецЕсли;	 
	
	МассивСтрок = СтрРазделить(Текст,Символы.ПС);
	
	Для Ккк = 0 По МассивСтрок.Количество()-1 Цикл
		МассивСтрок[Ккк] = "#" + МассивСтрок[Ккк];
	КонецЦикла;	
	
	Текст = СтрСоединить(МассивСтрок,Символы.ПС);
	
	СхемаПроцессаТекст.Удалить(ПозицияНачала,ПозицияОкончания);
	СхемаПроцессаТекст.Вставить(ПозицияНачала,Текст);
	
	Элементы.СхемаПроцессаТекст.УстановитьГраницыВыделения(ПозицияНачала,ПозицияОкончания);
	
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура УбратьКомментарийУВыделенныхСтрок(Команда)
	ПозицияНачала    = 0;
	ПозицияОкончания = 0;
	Текст            = ПолучитьВыделенныйТекстФорматированногоДокумента(ПозицияНачала,ПозицияОкончания);
	
	Если СокрЛП(Текст) = "" Тогда
		Возврат;
	КонецЕсли;	 
	
	МассивСтрок = СтрРазделить(Текст,Символы.ПС);
	
	Для Ккк = 0 По МассивСтрок.Количество()-1 Цикл
		Если Лев(МассивСтрок[Ккк],1) <> "#" Тогда
			Продолжить;
		КонецЕсли;	 
		МассивСтрок[Ккк] = Сред(МассивСтрок[Ккк],2);
	КонецЦикла;	
	
	Текст = СтрСоединить(МассивСтрок,Символы.ПС);
	
	СхемаПроцессаТекст.Удалить(ПозицияНачала,ПозицияОкончания);
	СхемаПроцессаТекст.Вставить(ПозицияНачала,Текст);
	
	Элементы.СхемаПроцессаТекст.УстановитьГраницыВыделения(ПозицияНачала,ПозицияОкончания);
	
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОтступ(Команда)
	ПозицияНачала    = 0;
	ПозицияОкончания = 0;
	Текст = ПолучитьВыделенныйТекстФорматированногоДокумента(ПозицияНачала,ПозицияОкончания);
	
	Если СокрЛП(Текст) = "" Тогда
		Возврат;
	КонецЕсли;	 
	
	МассивСтрок = СтрРазделить(Текст,Символы.ПС);
	Для Ккк = 0 По МассивСтрок.Количество()-1 Цикл
		МассивСтрок[Ккк] = "  " + МассивСтрок[Ккк];
	КонецЦикла;	
	
	Текст = СтрСоединить(МассивСтрок,Символы.ПС);
	
	СхемаПроцессаТекст.Удалить(ПозицияНачала,ПозицияОкончания);
	СхемаПроцессаТекст.Вставить(ПозицияНачала,Текст);
	
	Элементы.СхемаПроцессаТекст.УстановитьГраницыВыделения(ПозицияНачала,ПозицияОкончания);
	
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСценарий(Команда)
	ТекущаяСтрокаТекста = ТекущаяСтрокаТекста();
	
	Если ПустаяСтрока(ТекущаяСтрокаТекста) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Выберите не пустую строку текста.'"));
		Возврат;
	КонецЕсли;	 
	
	ОткрытьСценарийПоСтроке(ТекущаяСтрокаТекста);
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьИзменения(Команда)
	ТекстВопроса = НСтр("ru = 'Отменить изменения по этому сценарию?'");
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВопросаОбОтменеИзмененийСценариев", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения,ТекстВопроса,РежимДиалогаВопрос.ОКОтмена,,КодВозвратаДиалога.ОК); 
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокиПрисвоенияПараметров(Команда)
	ДобавитьСтрокиПрисвоенияПараметровСлужебный();
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьПараметрыВходящие(Команда)
	ПерезаполнитьПараметрыВходящиеСервер();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СтатусТестов(Команда)
	
	ПараметрыФормы = Новый Структура("КлючВарианта, ВидимостьКомандВариантовОтчетов, СформироватьПриОткрытии, Ветка, Тесты", 
		"СтатусПрохожденияТестовВВетке",
		Истина,
		Истина, 
		Ветка,
		ТестыПоUIDНастроек(НастройкиСценария.ВыгрузитьЗначения(), Проект));
		
	ОткрытьФорму(
		"Отчет.СтатусПрохожденияТестовВВетке.Форма",
		ПараметрыФормы,,
		Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПреобразоватьВШаблон(Команда)
	Текст = ПолучитьВыделенныйТекстФорматированногоДокумента();
	Если ПустаяСтрока(Текст) Тогда
		ВызватьИсключение
			НСтр("ru = 'Для преобразования текста в посценарий необходимо выделить одну или несколько строк сценария.'");
	КонецЕсли;	 
	
	ТекстСценария = СхемаПроцессаТекст.ПолучитьТекст();
	Если НЕ ПустаяСтрока(ТекстСценария) Тогда
		ДанныеСтрок = СтрРазделить(ТекстСценария, Символы.ПС);
		Если ДанныеСтрок.Количество() > 0 Тогда
			ПерваяСтрока = ДанныеСтрок[0];
			Если Найти(ПерваяСтрока, "language") > 0 Тогда
				Текст = ПерваяСтрока + Символы.ПС + Текст;
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СоздатьШаблон",Истина);
	ПараметрыФормы.Вставить("Текст",Текст);
	ПараметрыФормы.Вставить("Функция",ФункцияСистемы);
	ПараметрыФормы.Вставить("ЧтениеИзGit", Истина);
	ПараметрыФормы.Вставить("АдресСлужебныеДанныеСценариев", АдресСлужебныеДанныеСценариев);
	ПараметрыФормы.Вставить("ТокенПользователя", ТокенПользователя);
	ПараметрыФормы.Вставить("Ветка", Ветка);
	ПараметрыФормы.Вставить("Проект", Проект);
	ПараметрыФормы.Вставить("ИдентификаторКоммита", ИдентификаторКоммита);
	ПараметрыФормы.Вставить("ДанныеИерархии", ДанныеИерархии);
	ПараметрыФормы.Вставить("ЭтоНовыйЭлемент", Истина);
	ПараметрыФормы.Вставить("UIDСценария", Неопределено);
	
	ОткрытьФорму("Справочник.СценарииРаботыПользователей.Форма.СозданиеШаблонаСценария",ПараметрыФормы,ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СменитьРедакторСценария(Команда)
	ДелатьРаскраску = НЕ ДелатьРаскраску;
	
	
	Если ДелатьРаскраску Тогда
		//Значит надо отформатировать текст
		ДополнительныеПараметры = Новый Структура;
		ДанныеРанееИзмененныхСценариев = ТестированиеКлиент.ДанныеРанееИзмененныхСценариев(Ветка, Проект);
		ДополнительныеПараметры.Вставить("ДанныеРанееИзмененныхСценариев", ДанныеРанееИзмененныхСценариев);
		ОтформатироватьСхемаПроцессаТекстКлиент(ДополнительныеПараметры);
	Иначе
		ОбычныйТекст = СхемаПроцессаТекст.ПолучитьТекст();
	КонецЕсли;	 
	
	СменитьРедакторСценарияСервер();
КонецПроцедуры

&НаКлиенте
Процедура СменитьРедакторСценарияНаОбычныйТекст(Команда)
	СменитьРедакторСценарияНаОбычныйТекстСервер();
КонецПроцедуры

&НаКлиенте
Процедура СменитьРедакторСценарияНаРедакторСРаскраской(Команда)
	СменитьРедакторСценарияНаРедакторСРаскраскойСервер();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВДругойВетке(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Проект", Проект);
	ОткрытьФорму("Справочник.Ветки.ФормаВыбора", ПараметрыФормы, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВОсновнойВетке(Команда)
	ОсновнаяВеткаПроекта = ОсновнаяВеткаПроекта(Проект);
	Если ЗначениеЗаполнено(ОсновнаяВеткаПроекта) Тогда
		ОткрытьСценарийВДругойВетке(ОсновнаяВеткаПроекта);
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		   НСтр("ru = 'У проекта <%1> не найдена основная ветка.'"), Проект);
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура НайтиСценарийВСписке(Команда)
	ДанныеСценария = ДанныеСценарияДлаЗаписи();
	ДанныеСценария.Вставить("НайтиСценарийВСписке", Истина);
	ДанныеСценария.Вставить("ВеткаДляПоискаВСписке", Ветка);
	ОткрытьФорму("Справочник.СценарииРаботыПользователей.Форма.ФормаСпискаGit", ДанныеСценария);
	Оповестить("НайтиСценарийВСпискеGit", ДанныеСценария);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьСписокШаговСценариевПользователей(Команда)
	Элементы.ГруппаИзвестныеШаги.Видимость = НЕ Элементы.ГруппаИзвестныеШаги.Видимость;
	СохранитьНастройкуВидимостиПанелиШагов(Элементы.ГруппаИзвестныеШаги.Видимость);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТЧПараметрыВходящие

&НаКлиенте
Процедура ПараметрыВходящиеПриИзменении(Элемент)
	ПеренумероватьТаблицуПараметров();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыВходящиеПередНачаломИзменения(Элемент, Отказ)
	ТекущиеДанные = Элементы.ПараметрыВходящие.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если Элемент.ТекущийЭлемент.Имя <> "ПараметрыВходящиеЗначение" Тогда
		Возврат;
	КонецЕсли;	 
	
	Если ТекущиеДанные.ТипПараметра = ПредопределенноеЗначение("Перечисление.ТипПараметраСценарияИлиПроцесса.Таблица") Тогда
		ПараметрыФормы = Новый Структура("ЗначениеТаблицы", ТекущиеДанные.Значение);
		ОткрытьФорму("Справочник.СценарииРаботыПользователей.Форма.ФормаУстановкиЗначенияТаблицы", ПараметрыФормы,Элементы.ПараметрыВходящие,УникальныйИдентификатор);	
		Отказ = Истина;
		Возврат;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыВходящиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Если ВыбранноеЗначение.Свойство("ЗначениеТаблицы") Тогда
			Элементы.ПараметрыВходящие.ТекущиеДанные.Значение = ВыбранноеЗначение.ЗначениеТаблицы;
			Модифицированность = Истина;
		КонецЕсли;	 
	КонецЕсли;	 
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОбычныйТекстПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СхемаПроцессаТекстПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РазделПроектаПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ФункцияСистемыПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура КодПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РольПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ИспользуетсяТолькоВнутриСвоейФункцииПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПубликуетсяПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСценарияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ДанныеСценарияДлаЗаписи = ДанныеСценарияДлаЗаписи();
	ДанныеСценарияДлаЗаписи.Вставить("АдресСлужебныеДанныеСценариев", АдресСлужебныеДанныеСценариев);
	ДанныеСценарияДлаЗаписи.Вставить("UIDСценария", UIDСценария);
	ДанныеСценарияДлаЗаписи.Вставить("ДанныеРанееИзмененныхСценариев",
		ТестированиеКлиент.ДанныеРанееИзмененныхСценариев(Ветка, Проект));
	ОткрытьФорму("Справочник.СценарииРаботыПользователей.Форма.ВыборГруппыGit", ДанныеСценарияДлаЗаписи, ЭтаФорма);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийСписокИспользуетсяВСценариях

&НаКлиенте
Процедура СписокИспользуетсяВСценарияхПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СписокИспользуетсяВСценарияхПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СписокИспользуетсяВСценарияхПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СписокИспользуетсяВСценарияхВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ТекущиеДанные = ВызывающиеСценарии.НайтиПоИдентификатору(ВыбраннаяСтрока);
	ДанныеСценария = Новый Структура;
	ДанныеСценария.Вставить("UIDСценария", ТекущиеДанные.UID);
	Попытка
		ОткрытьСценарийНаРедактирование(ДанныеСценария);
	Исключение
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		   НСтр("ru = 'Не получилось окрыть сценарий с UID <%1> Возможно сценарий отсутствует в кеш файле.'"),
		   ТекущиеДанные.UID);
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ПроектПоДаннымСценария(ПроектНаименование, ПроектUID)
	Если ЗначениеЗаполнено(ПроектUID) Тогда
		UID = Новый УникальныйИдентификатор(ПроектUID);
		Возврат Справочники.Проекты.ПолучитьСсылку(UID);	
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Проекты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Проекты КАК Проекты
		|ГДЕ
		|	Проекты.Наименование = &Наименование
		|	И НЕ Проекты.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Наименование", ПроектНаименование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка; 
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции	 

&НаСервереБезКонтекста
Функция ОтветственныйСистемыПоДаннымСценария(СтрокаUID)
	Если ЗначениеЗаполнено(СтрокаUID) Тогда
		UID = Новый УникальныйИдентификатор(СтрокаUID);
		Возврат Справочники.Пользователи.ПолучитьСсылку(UID);	
	КонецЕсли;	 
КонецФункции	 

&НаСервереБезКонтекста
Функция ФункцияСистемыПоДаннымСценария(UIDФункцияСистемы)
	Если ЗначениеЗаполнено(UIDФункцияСистемы) Тогда
		UID = Новый УникальныйИдентификатор(UIDФункцияСистемы);
		Возврат Справочники.ФункцииСистемы.ПолучитьСсылку(UID);	
	КонецЕсли;	 
КонецФункции	 

&НаСервереБезКонтекста
Функция РазделПроектаПоДаннымСценария(СтрокаUID)
	Если ЗначениеЗаполнено(СтрокаUID) Тогда
		UID = Новый УникальныйИдентификатор(СтрокаUID);
		Возврат Справочники.РазделыПроекта.ПолучитьСсылку(UID);	
	КонецЕсли;	 
КонецФункции	 

&НаСервереБезКонтекста
Функция ПрофильПользователяПоДаннымСценария(Проект, ПрофильНаименование)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПрофилиПользователей.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПрофилиПользователей КАК ПрофилиПользователей
		|ГДЕ
		|	ПрофилиПользователей.Владелец = &Владелец
		|	И ПрофилиПользователей.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Владелец", Проект);
	Запрос.УстановитьПараметр("Наименование", ПрофильНаименование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка; 
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции	 

&НаКлиенте
Процедура ОтформатироватьСценарий(ФорматироватьТолькоПервыйУровеньПодсценариев = Ложь)
	ТекстДоФорматирования = СхемаПроцессаТекст.ПолучитьТекст();
	Если ПустаяСтрока(ТекстДоФорматирования) Тогда
		Возврат;
	КонецЕсли;	 
	
	Если Не ЗначениеЗаполнено(ФункцияСистемы) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		       НСтр("ru = 'Не заполнено поле Функция.'"),,"Объект.ФункцияСистемы");
		Возврат;
	КонецЕсли;	 
	
	ДополнительныеПараметры = Новый Структура;
	ДанныеРанееИзмененныхСценариев = ТестированиеКлиент.ДанныеРанееИзмененныхСценариев(Ветка, Проект);
	ДополнительныеПараметры.Вставить("ДанныеРанееИзмененныхСценариев", ДанныеРанееИзмененныхСценариев);
	ДополнительныеПараметры.Вставить("ФорматироватьТолькоПервыйУровеньПодсценариев", ФорматироватьТолькоПервыйУровеньПодсценариев);
	ОтформатироватьСхемаПроцессаТекстКлиент(ДополнительныеПараметры);
	
	Если ДополнительныеПараметры.ДелатьРаскраску Тогда
		ОбычныйТекст = СхемаПроцессаТекст.ПолучитьТекст();
	КонецЕсли;	 
	
	Если ТекстДоФорматирования <> СхемаПроцессаТекст.ПолучитьТекст() Тогда
		Модифицированность = Истина;
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Процедура ОтформатироватьСхемаПроцессаТекстКлиент(ДополнительныеПараметры = Неопределено)
	ТекНомерСтроки = ТекущийНомерСтрокиСценария();
	Если Элементы.ОбычныйТекст.Видимость Тогда
		НачалоСтроки = 0;
		НачалоКолонки = 0;
		КонецСтроки = 0;
		КонецКолонки = 0;
		Элементы.ОбычныйТекст.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
	КонецЕсли;	 
	
	ОтформатироватьСхемаПроцессаТекст(ДополнительныеПараметры);
	Если ДополнительныеПараметры.Свойство("ОписаниеОшибки") Тогда
		ОписаниеОшибкиФорматирования = ДополнительныеПараметры.ОписаниеОшибки;
		ПодключитьОбработчикОжидания("ПоказатьОшибкуФорматированияСценария", 0.1, Истина);
	КонецЕсли;	 
	
	Если Элементы.ОбычныйТекст.Видимость Тогда
		Элементы.ОбычныйТекст.УстановитьГраницыВыделения(НачалоСтроки, НачалоКолонки, НачалоСтроки, КонецКолонки);
	Иначе
		Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаСхемаТекст Тогда
			ПереходКСтрокеСценария(ТекНомерСтроки,Ложь);
		КонецЕсли;	 
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Функция ТекущийНомерСтрокиСценария()
	Если Элементы.ОбычныйТекст.Видимость Тогда
		НачалоСтроки = 0;
		НачалоКолонки = 0;
		КонецСтроки = 0;
		КонецКолонки = 0;
		Элементы.ОбычныйТекст.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
		
		Возврат НачалоСтроки;
	Иначе	
		ПозицияНачала    = 0;
		ПозицияОкончания = 0;
		Элементы.СхемаПроцессаТекст.ПолучитьГраницыВыделения(ПозицияНачала,ПозицияОкончания);
		
		ПозицияНачала = СхемаПроцессаТекст.ПолучитьПозициюПоЗакладке(ПозицияНачала);
		ПозицияОкончания = СхемаПроцессаТекст.ПолучитьПозициюПоЗакладке(ПозицияОкончания);
		
		ТекстСценария = СхемаПроцессаТекст.ПолучитьТекст();
		
		МассивСтрок = СтрРазделить(ТекстСценария,Символы.ПС);
		
		НомерСтроки = 0;
		ТекДлина = 0;
		Для Каждого СтрокаСценария Из МассивСтрок Цикл
			ТекДлина    = ТекДлина + СтрДлина(СтрокаСценария) + 1;
			НомерСтроки = НомерСтроки + 1;
			
			Если ПозицияНачала <= ТекДлина Тогда
				Прервать;
			КонецЕсли;	 
		КонецЦикла;	
		
		Возврат НомерСтроки;
	КонецЕсли;	 
	
	
КонецФункции	

&НаСервере
Процедура ОтформатироватьСхемаПроцессаТекст(ДополнительныеПараметры = Неопределено)
	Текст = Неопределено;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		Если ДополнительныеПараметры.Свойство("Текст") Тогда
			Текст = ДополнительныеПараметры.Текст;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если Текст = Неопределено Тогда
		Если Не ДелатьРаскраску Тогда
			Текст = ОбычныйТекст;
		Иначе	
			Текст = СхемаПроцессаТекст.ПолучитьТекст();
		КонецЕсли;	 
	КонецЕсли;	 
	
	ДеревоСхемыИзформы = РеквизитФормыВЗначение("ДеревоСхемы");
	ПараметрыВходящиеСервер = РеквизитФормыВЗначение("ПараметрыВходящие");
	КопияПараметровСценария = ПараметрыВходящиеСервер.Скопировать();
	
	Если ДополнительныеПараметры =  Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;	 
	Если Не ДополнительныеПараметры.Свойство("ДелатьРаскраску") Тогда
		ДополнительныеПараметры.Вставить("ДелатьРаскраску",ДелатьРаскраску);
	КонецЕсли;	 
	ДополнительныеПараметры.Вставить("ИсключитьСлужебныеСловаИзТекстаСценария",Ложь);
	ДополнитьСтруктуруПараметровОбязятельнымиЗначениями(ДополнительныеПараметры);
	
	ПроектСценария = Проект;
	Сценарий       = Наименование;
	
	Попытка
		ТестированиеГрафическиеСхемыСервер.ДеревоСценарияИзТекста(Текст,
		                         ДеревоСхемыИзформы,ПроектСценария, Сценарий, ДополнительныеПараметры);
		ЗначениеВРеквизитФормы(ДеревоСхемыИзформы,"ДеревоСхемы");
		
		ТестированиеГрафическиеСхемыСервер.ПараметрыВходящиеИзДерева(ДеревоСхемыИзформы,
		       ПараметрыВходящиеСервер);
			   
		ВерсииШаблоновСервер = РеквизитФормыВЗначение("ВерсииШаблонов");
		
		ПараметрыВерсийСценариев = Новый Структура;		   
		ПараметрыВерсийСценариев.Вставить("Дерево",ДеревоСхемыИзформы);
		ПараметрыВерсийСценариев.Вставить("ВерсииШаблонов", ВерсииШаблоновСервер);
		ПараметрыВерсийСценариев.Вставить("Проект",ПроектСценария);
		ПараметрыВерсийСценариев.Вставить("Сценарий",Сценарий);
		ПараметрыВерсийСценариев.Вставить("ФункцияСистемы",ФункцияСистемы);
		ПараметрыВерсийСценариев.Вставить("ЧтениеИзGit", Истина);
		ПараметрыВерсийСценариев.Вставить("АдресСлужебныеДанныеСценариев", АдресСлужебныеДанныеСценариев);
		ТестированиеГрафическиеСхемыСервер.ВерсииШаблонов(ПараметрыВерсийСценариев);
				  
		ШаблонHTML   = Справочники.СценарииРаботыПользователей.ПолучитьМакет("ШаблонHTML");
		ТестированиеГрафическиеСхемыСервер.ФорматированныйДокументПоДеревуСхемы(ДеревоСхемыИзформы,
		        СхемаПроцессаТекст,ШаблонHTML,ДополнительныеПараметры);
		
		ЗначениеВРеквизитФормы(ВерсииШаблоновСервер,"ВерсииШаблонов"); 	   
		ЗначениеВРеквизитФормы(ДеревоСхемыИзформы, "ДеревоСхемы");
		
		НомСтр = 0;
		Для Каждого СтрокаПараметрыВходящие Из ПараметрыВходящиеСервер Цикл
			НомСтр = НомСтр + 1;
			СтрокаПараметрыВходящие.НомСтр = НомСтр;
		КонецЦикла;	 
		
		ЗначениеВРеквизитФормы(ПараметрыВходящиеСервер, "ПараметрыВходящие");
		
		Если КопияПараметровСценария.Количество() <> ПараметрыВходящиеСервер.Количество() Тогда
			НужноУстановитьМодифицированность = Истина;
		КонецЕсли;	 
	Исключение
		ДополнительныеПараметры.Вставить("ОписаниеОшибки", ОписаниеОшибки());
	КонецПопытки;
	
	Если ДополнительныеПараметры.ДелатьРаскраску  Тогда
		ОбычныйТекст = СхемаПроцессаТекст.ПолучитьТекст();
	Иначе	
		Если ДополнительныеПараметры.Свойство("ТекстДокумента") Тогда
			ТекстСценария = ДополнительныеПараметры.ТекстДокумента;
			ОбычныйТекст = ТекстСценария;
		Иначе	
			ТекстСценария = ОбычныйТекст;
		КонецЕсли;	 
		УстановитьТекстВСхемаПроцессаТекстСервер(ТекстСценария);
	КонецЕсли;	 		  
	
	ПоместитьВоВременноеХранилище(ДополнительныеПараметры.ДанныеСценариевGit, АдресСлужебныеДанныеСценариев);
	ДополнительныеПараметры.Вставить("ДанныеСценариевGit", Неопределено);
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстВСхемаПроцессаТекстСервер(Знач СтрокаHTML)
	ПодготовитьСтрокуДляПомещенияВФорматированныйДокумент(СтрокаHTML);
	УстановитьСтрокуHTMLВФорматированныйДокумент(СтрокаHTML);
КонецПроцедуры

&НаСервере
Процедура ПодготовитьСтрокуДляПомещенияВФорматированныйДокумент(Стр)
	ТестированиеГрафическиеСхемыСервер.ЭкранироватьУгловыеСкобки(Стр);
	ТестированиеГрафическиеСхемыСервер.СделатьСтандартнуюПодготовкуТекстаHTML(Стр);
КонецПроцедуры

&НаСервере
Процедура УстановитьСтрокуHTMLВФорматированныйДокумент(Стр)
	ШаблонHTML = Справочники.СценарииРаботыПользователей.ПолучитьМакет("ШаблонHTML");
	
	ТекстHTML = ШаблонHTML.ПолучитьТекст();
	ТекстHTML = СтрЗаменить(ТекстHTML,"<ПроизвольныйТекст>",Стр);
	
	СхемаПроцессаТекст.УстановитьHTML(ТекстHTML,Новый Структура);
КонецПроцедуры

&НаКлиенте
Процедура ПереходКСтрокеСценария(НомерСтрокиСценария,ВыделятьСтроку)
	Текст       = СхемаПроцессаТекст.ПолучитьТекст();
	МассивСтрок = СтрРазделить(Текст,Символы.ПС);
	Если МассивСтрок.Количество() < НомерСтрокиСценария Тогда
		Возврат;
	КонецЕсли;	
	ДлинаСтроки = СтрДлина(МассивСтрок[НомерСтрокиСценария-1]);
	
	Если Элементы.ОбычныйТекст.Видимость Тогда
		Если ВыделятьСтроку Тогда
			Элементы.ОбычныйТекст.УстановитьГраницыВыделения(НомерСтрокиСценария, 1, НомерСтрокиСценария, ДлинаСтроки+1);
		Иначе	
			Элементы.ОбычныйТекст.УстановитьГраницыВыделения(НомерСтрокиСценария, 1, НомерСтрокиСценария, 1);
		КонецЕсли;	 
	Иначе	
		
		ДлинаТекстаСНачала = 0;
		Для Ккк = 0 По НомерСтрокиСценария-1-1 Цикл
			Стр = МассивСтрок[Ккк];
			ДлинаТекстаСНачала = ДлинаТекстаСНачала + СтрДлина(Стр) + 1;
		КонецЦикла;	
		
		ПозицияНачала = СхемаПроцессаТекст.ПолучитьЗакладкуПоПозиции(ДлинаТекстаСНачала);
		ПозицияОкончания = СхемаПроцессаТекст.ПолучитьЗакладкуПоПозиции(ДлинаТекстаСНачала+ДлинаСтроки+1);
		
		Если ВыделятьСтроку Тогда
			Элементы.СхемаПроцессаТекст.УстановитьГраницыВыделения(ПозицияНачала,ПозицияОкончания);
		Иначе	
			Элементы.СхемаПроцессаТекст.УстановитьГраницыВыделения(ПозицияНачала,ПозицияНачала);
		КонецЕсли;	 
	КонецЕсли;	 	
КонецПроцедуры

&НаСервере
Функция ПолучитьТекстыСценариевСервер(ФлагМодифицированности,ДополнительныеПараметры)
	ОбъектТекстыСценариев = ОбъектнуюМодельТекстыСценариевСервер(Наименование,ФлагМодифицированности,ДополнительныеПараметры);
	
	ПараметрыСценария = Новый Структура;
	ПараметрыСценария.Вставить("ОбъектТекстыСценариев",ОбъектТекстыСценариев);
	ПараметрыСценария.Вставить("Процесс",Наименование);
	ПараметрыСценария.Вставить("ШагиДоТеста",Новый ТаблицаЗначений);
	ПараметрыСценария.Вставить("ШагиПроверка",Новый ТаблицаЗначений);
	ПараметрыСценария.Вставить("ШагиПослеТеста",Новый ТаблицаЗначений);
	ДополнитьСтруктуруПараметровОбязятельнымиЗначениями(ПараметрыСценария);
	Если ДополнительныеПараметры <> Неопределено Тогда
		Если ДополнительныеПараметры.Свойство("ДанныеРанееИзмененныхСценариев") Тогда
			ПараметрыСценария.Вставить("ДанныеРанееИзмененныхСценариев",
				ДополнительныеПараметры.ДанныеРанееИзмененныхСценариев);
		КонецЕсли;	 
		
		Если ДополнительныеПараметры.Свойство("СТекущегоШага") Тогда
			ПараметрыСценария.Вставить("СТекущегоШага",ДополнительныеПараметры.СТекущегоШага);
			Если ДополнительныеПараметры.СТекущегоШага Тогда
				ПараметрыСценария.Вставить("ТекущийНомерСтрокиСценария",ДополнительныеПараметры.ТекущийНомерСтрокиСценария);
			Иначе	
				ПараметрыСценария.Вставить("ТекущийНомерСтрокиСценария",Неопределено);
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
	ПараметрыСценария.Вставить("ИсключитьСлужебныеСловаИзТекстаСценария",Ложь);
	ПараметрыСценария.Вставить("ЧтениеИзТекста",Ложь);
	Если ДополнительныеПараметры <> Неопределено Тогда
		Если ДополнительныеПараметры.Свойство("ИсключитьСлужебныеСловаИзТекстаСценария") Тогда
			ПараметрыСценария.Вставить("ИсключитьСлужебныеСловаИзТекстаСценария",
			ДополнительныеПараметры.ИсключитьСлужебныеСловаИзТекстаСценария);
		КонецЕсли;	 
	КонецЕсли;	 
	
	НастройкиБДДляЗапускаТестовИзСценария = Тестирование.НастройкиБДДляЗапускаТестовИзСценария();
	
	Если НастройкиБДДляЗапускаТестовИзСценария <> Неопределено Тогда
		ПараметрыСценария.Вставить("БазаДанных",НастройкиБДДляЗапускаТестовИзСценария.ЭталоннаяБаза);
	Иначе	
		ПараметрыСценария.Вставить("БазаДанных",Неопределено);
	КонецЕсли;	 
	
	Возврат Тестирование.ТекстСценария(ПараметрыСценария);
КонецФункции	

&НаСервере
Процедура ДополнитьСтруктуруПараметровОбязятельнымиЗначениями(СтруктураПараметров)
	СтруктураПараметров.Вставить("ЧтениеИзGit", Истина);
	СтруктураПараметров.Вставить("ЧтениеИзТекста", Ложь);
	СтруктураПараметров.Вставить("АдресСлужебныеДанныеСценариев", АдресСлужебныеДанныеСценариев);
	СтруктураПараметров.Вставить("ФункцияСистемы", ФункцияСистемы);
	СтруктураПараметров.Вставить("Проект", Проект);
	СтруктураПараметров.Вставить("ТокенПользователя", ТокенПользователя);
	СтруктураПараметров.Вставить("Ветка", Ветка);
	СтруктураПараметров.Вставить("ТаблицаТегов", ТаблицаТегов);
	СтруктураПараметров.Вставить("КодСценарияGit", Код);
	СтруктураПараметров.Вставить("ПрофильПользователяGit", ПрофильПользователя);
	СтруктураПараметров.Вставить("UIDСценария", UIDСценария);
	СтруктураПараметров.Вставить("ТекущиеПараметрыВходящие", ПараметрыВходящиеДляЗаписиВоВременныйФайл());
	СтруктураПараметров.Вставить("ИдентификаторКоммита", ИдентификаторКоммита);
	СтруктураПараметров.Вставить("UIDРазделПроекта", Строка(РазделПроекта.УникальныйИдентификатор()));
КонецПроцедуры 

&НаСервере
Функция ОбъектнуюМодельТекстыСценариевСервер(ОбъектСервер,ФлагМодифицированности,
	      ДополнительныеПараметры = Неопределено)
	ТаблицаПараметрыВходящие = ПараметрыВходящие.Выгрузить();
	ТаблицаПараметрыВходящие.Колонки.Добавить("НесколькоЗначений",Новый ОписаниеТипов("Булево"));
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ТаблицаПараметров",ТаблицаПараметрыВходящие);
	СтруктураПараметров.Вставить("ДоТеста",Новый ТаблицаЗначений);
	СтруктураПараметров.Вставить("ПроверкаТеста",Новый ТаблицаЗначений);
	СтруктураПараметров.Вставить("ПослеТеста",Новый ТаблицаЗначений);
	СтруктураПараметров.Вставить("ДеревоСхемы",РеквизитФормыВЗначение("ДеревоСхемы"));
	СтруктураПараметров.Вставить("ИсключитьСлужебныеСловаИзТекстаСценария",Ложь);
	ДополнитьСтруктуруПараметровОбязятельнымиЗначениями(СтруктураПараметров);
	Если ДополнительныеПараметры <> Неопределено Тогда
		Если ДополнительныеПараметры.Свойство("UIDСценариевКомпиляции") Тогда
			СтруктураПараметров.Вставить("UIDСценариевКомпиляции",
				ДополнительныеПараметры.UIDСценариевКомпиляции);
		КонецЕсли;	 
		Если ДополнительныеПараметры.Свойство("ДанныеРанееИзмененныхСценариев") Тогда
			СтруктураПараметров.Вставить("ДанныеРанееИзмененныхСценариев",
				ДополнительныеПараметры.ДанныеРанееИзмененныхСценариев);
		КонецЕсли;	 
			
		Если ДополнительныеПараметры.Свойство("СТекущегоШага") Тогда
			СтруктураПараметров.Вставить("СТекущегоШага",ДополнительныеПараметры.СТекущегоШага);
			Если ДополнительныеПараметры.СТекущегоШага Тогда
				СтруктураПараметров.Вставить("ТекущийНомерСтрокиСценария",ДополнительныеПараметры.ТекущийНомерСтрокиСценария);
			Иначе	
				СтруктураПараметров.Вставить("ТекущийНомерСтрокиСценария",Неопределено);
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
	Возврат ТестированиеГрафическиеСхемыСервер.ТекстыСценариев(ОбъектСервер,СтруктураПараметров);
КонецФункции	

&НаКлиенте
Процедура ПеренумероватьТаблицуПараметров()
	НомСтр = 0;
	Для Каждого СтрокаПараметрыВходящие Из ПараметрыВходящие Цикл
		НомСтр = НомСтр + 1;
		СтрокаПараметрыВходящие.НомСтр = НомСтр;
	КонецЦикла;	 
КонецПроцедуры 

&НаСервереБезКонтекста
Процедура СохранитьЗначения(ИмяТекущейСтраницы)
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Справочник.СценарииРаботыПользователей.ФормаЭлемента",
	      "ТекущаяСтраницаФормыМикропроцесса", ИмяТекущейСтраницы);
КонецПроцедуры

&НаКлиенте
Процедура ОтформатироватьТекстСценарияЕслиЭтоНеобходимо(ПолучениеТекстаСценария = Ложь)
	Если Модифицированность ИЛИ ПолучениеТекстаСценария Тогда
		ОтформатироватьСценарий();
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Процедура ЗапуститьТестСНачала()
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЗапускСценария",Истина);
	ПараметрыОткрытия.Вставить("СТекущегоШага",Ложь);
	ПараметрыОткрытия.Вставить("ЗагрузкаСценария",Ложь);
	ОткрытьФормуФреймворкаТестирования(ПараметрыОткрытия);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуФреймворкаТестирования(ПараметрыОткрытия) 
	#Если НЕ ВебКлиент Тогда
		
	ТестированиеКлиент.ПодключитьФреймВоркТестирования(ЭтаФорма.УникальныйИдентификатор,
	"ОткрытьФормуФреймворкаТестированияПродолжение",ЭтаФорма,ПараметрыОткрытия);	
		
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуФреймворкаТестированияПродолжение(Результат,Адрес,ПомещаемыйФайл,ДополнительныеПараметры) Экспорт
	Если НЕ Результат Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		   НСтр("ru = 'Не получилось подключить файл %1.'"),ПомещаемыйФайл);
	КонецЕсли;	 
	
	#Если НЕ ВебКлиент Тогда
		
	ИмяОбработки = ТестированиеСлужебныйВызовСервера.ПодключитьВнешнююОбработкуСервер(Адрес);
		
		
	ОтформатироватьТекстСценарияЕслиЭтоНеобходимо(Истина);
		
	Если Модифицированность Тогда
		ЗаписатьСценарийВоВременныйФайл();
	КонецЕсли;	 
	
	ПараметрыОткрытия = ДополнительныеПараметры;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДелатьРаскраску",Ложь);
	ДополнительныеПараметры.Вставить("СТекущегоШага",ПараметрыОткрытия.СТекущегоШага);
	
	Если ПараметрыОткрытия.СТекущегоШага Тогда
		ДополнительныеПараметры.Вставить("ТекущийНомерСтрокиСценария",ТекущийНомерСтрокиСценария());
	КонецЕсли;	 
	
	
	ДополнительныеПараметры.Вставить("ПрисоединенныеФайлы",Неопределено);
	ДополнительныеПараметры.Вставить("ИсключитьСлужебныеСловаИзТекстаСценария",Истина);
	
	ДополнительныеПараметры.Вставить("UIDСценариевКомпиляции", Новый Соответствие);
	ДополнительныеПараметры.UIDСценариевКомпиляции.Вставить(UIDСценария, Истина);
	ДанныеРанееИзмененныхСценариев = ТестированиеКлиент.ДанныеРанееИзмененныхСценариев(Ветка, Проект);	
	ДополнительныеПараметры.Вставить("ДанныеРанееИзмененныхСценариев", ДанныеРанееИзмененныхСценариев);
	
	ТекстСценариев = ПолучитьОтформатированныеТекстыСценариевКлиент(Модифицированность,ДополнительныеПараметры);
	Если ТекстСценариев = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	НастройкиБДДляЗапускаТестовИзСценария = НастройкиБДДляЗапускаТестовИзСценария();
	
	ТестированиеКлиент.ЗаменитьСтрокуПодключенияПрофиляTestClient(
     	ТекстСценариев,НастройкиБДДляЗапускаТестовИзСценария,ПрофильПользователя);
	
	ПараметрыЗапуска = Новый Структура;
	ПараметрыЗапуска.Вставить("ТекстСценариев",ТекстСценариев);
	МассивРолей = Новый Массив;
	МассивРолей.Добавить(ПрофильПользователя);
	ПараметрыЗапуска.Вставить("МассивРолей",МассивРолей);
	ПараметрыЗапуска.Вставить("УникальныйИдентификатор",УникальныйИдентификатор);
	ПараметрыЗапуска.Вставить("ПараметрыОткрытия",ПараметрыОткрытия);
	ПараметрыЗапуска.Вставить("НастройкиБДДляЗапускаТестовИзСценария",НастройкиБДДляЗапускаТестовИзСценария);
	ПараметрыЗапуска.Вставить("ПрисоединенныеФайлы",ДополнительныеПараметры.ПрисоединенныеФайлы);
	ПараметрыЗапуска.Вставить("СТекущегоШага",ПараметрыОткрытия.СТекущегоШага);
	ПараметрыЗапуска.Вставить("ЗагрузкаСценария",ПараметрыОткрытия.ЗагрузкаСценария);
	ПараметрыЗапуска.Вставить("ЗапускСценария",ПараметрыОткрытия.ЗапускСценария);
	ПараметрыЗапуска.Вставить("ЭтоПроцесс",Ложь);
	ПараметрыЗапуска.Вставить("ИмяОбработки",ИмяОбработки);
	
	ПараметрыЗапуска.Вставить("UIDСценариевКомпиляции", ДополнительныеПараметры.UIDСценариевКомпиляции);
	ДополнитьСтруктуруПараметровОбязятельнымиЗначениями(ПараметрыЗапуска);
	
	ПараметрыЗапуска.Вставить("НадоСчитатьТекущийPIDTestManager",Ложь);
	
	ТестированиеКлиент.ОткрытьФормуФреймворкаТестирования(ПараметрыЗапуска);
	
	Если ПараметрыЗапуска.НадоСчитатьТекущийPIDTestManager Тогда
		КоличествоСекундПроверкиPIDTestManager = 0;
		Если НастройкиБДДляЗапускаТестовИзСценария.Свойство("ТаймаутЗапускаTestManager") Тогда
			Если ЗначениеЗаполнено(НастройкиБДДляЗапускаТестовИзСценария.ТаймаутЗапускаTestManager) Тогда
				КоличествоСекундПроверкиPIDTestManager = НастройкиБДДляЗапускаТестовИзСценария.ТаймаутЗапускаTestManager;
			КонецЕсли;	 
		КонецЕсли;	 
		
		Если Не ЗначениеЗаполнено(КоличествоСекундПроверкиPIDTestManager) Тогда
			КоличествоСекундПроверкиPIDTestManager = 60;
		КонецЕсли;	 
		
		ПрошлоСекундПроверкиPIDTestManager = 0;
	КонецЕсли;	 
	
	#КонецЕсли
КонецПроцедуры 

&НаКлиенте
Процедура ЗаписатьСценарийВоВременныйФайл()
	Если ПустаяСтрока(Наименование) Тогда
		ВызватьИсключение НСтр("ru = 'Не указано наименование.'");
	КонецЕсли;	 
	
	Если НЕ ЗначениеЗаполнено(ФункцияСистемы) Тогда
		ВызватьИсключение НСтр("ru = 'Не заполнено поле Функция.'");
	КонецЕсли;	 
	
	Если НЕ ЗначениеЗаполнено(Ответственный) Тогда
		ВызватьИсключение НСтр("ru = 'Не заполнено поле Ответственный.'");
	КонецЕсли;	 
	
	ПроверитьНаименованиеНаУникальность();
	
	Если Модифицированность Тогда
		ОтформатироватьСценарий(Истина);
	КонецЕсли;	 
	
	ОбновитьДанныеПоВызывающимСценариям();
	
	Если ПроисходилоИзменениеГруппы И ЭлементУжеЗаписывался Тогда
		ЗаписатьВКешНовыйПутьКСценарию(ПолноеИмяВДереве);
	КонецЕсли;	 
	
	ДанныеСценария = ДанныеСценарияДлаЗаписи();
	ТестированиеКлиент.ЗаписатьСценарийВоВременныйФайл(ДанныеСценария);
	
	ОбновитьДанныеВызывающихСценариев(ДанныеСценария);
	
	Оповестить("ИзменениеВременныхФайловСценариевРаботыПользователя", ДанныеСценария);
	
	Если ЭтоНовыйЭлемент И НЕ ЭлементУжеЗаписывался Тогда
		Заголовок = СформироватьЗаголовок(Истина);
		Оповестить("ЗаписьНовогоСценарияGit", ДанныеСценария);
	КонецЕсли;	 
	
	ЭлементУжеЗаписывался = Истина;
	Модифицированность = Ложь;
КонецПроцедуры 

&НаКлиенте
Функция ПолучитьОтформатированныеТекстыСценариевКлиент(ФлагМодифицированности,ДополнительныеПараметры)
	ТекстСценария = ПолучитьОтформатированныеТекстыСценариевСервер(ФлагМодифицированности,ДополнительныеПараметры);
	
	Возврат ТекстСценария;
КонецФункции

&НаСервереБезКонтекста
Функция НастройкиБДДляЗапускаТестовИзСценария()
	Возврат Тестирование.НастройкиБДДляЗапускаТестовИзСценария();
КонецФункции	

&НаСервере
Функция ПолучитьОтформатированныеТекстыСценариевСервер(ФлагМодифицированности,ДополнительныеПараметры)
	ФД                    = Новый ФорматированныйДокумент;
	ТекстСценария         = ПолучитьТекстыСценариевСервер(ФлагМодифицированности,ДополнительныеПараметры);
	Если ТекстСценария = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Если ДополнительныеПараметры.Свойство("ПрисоединенныеФайлы") Тогда
		ДополнительныеПараметры.ПрисоединенныеФайлы = Новый Массив;
	КонецЕсли;	 
	
	Если НЕ ДополнительныеПараметры.ДелатьРаскраску Тогда
		ТестированиеГрафическиеСхемыСервер.ВернутьУгловыеСкобки(ТекстСценария);
		Возврат ТекстСценария;
	КонецЕсли;	 
	
	ТекстФорматированныйТекстСценарияИзОбычногоТекстаСервер(ТекстСценария,ФД,ДополнительныеПараметры);
	
	Возврат ОбычныйТекстСценарияИзФорматированногоДокументаСервер(ФД,ДополнительныеПараметры);
КонецФункции

&НаСервере
Процедура ТекстФорматированныйТекстСценарияИзОбычногоТекстаСервер(ТекстСценария,ФД,ДополнительныеПараметры)
	
	ТестированиеГрафическиеСхемыСервер.ТекстФорматированныйТекстСценарияИзОбычногоТекста(ТекстСценария,
	          ФД,Проект,Наименование,ДополнительныеПараметры);
КонецПроцедуры

&НаСервере
Функция ОбычныйТекстСценарияИзФорматированногоДокументаСервер(ФД,ДополнительныеПараметры)
	Возврат ТестированиеГрафическиеСхемыСервер.ОбычныйТекстСценарияИзФорматированногоДокумента(ФД,ДополнительныеПараметры);
КонецФункции	

&НаСервере
Функция ПараметрыВходящиеДляЗаписиВоВременныйФайл()
	Массив = Новый Массив;
	Для Каждого СтрокаПараметрыВходящие Из ПараметрыВходящие Цикл
		Структура = Новый Структура;
		Структура.Вставить("НомерСтроки", СтрокаПараметрыВходящие.НомСтр);
		Структура.Вставить("Имя", СтрокаПараметрыВходящие.Имя);
		Структура.Вставить("Значение", СтрокаПараметрыВходящие.Значение);
		Структура.Вставить("ТипПараметра", СтрокаПараметрыВходящие.ТипПараметра);
		Структура.Вставить("ИсходящийПараметр", СтрокаПараметрыВходящие.ИсходящийПараметр);
		
		Массив.Добавить(Структура);
		
	КонецЦикла;	 
	
	Возврат Массив;
КонецФункции	 

&НаСервере
Функция ВерсииШаблоновДляЗаписиВоВременныйФайл()
	Массив = Новый Массив;
	Для Каждого СтрокаВерсииШаблонов Из ВерсииШаблонов Цикл
		Структура = Новый Структура;
		Структура.Вставить("UIDВложенныйСценарий", СтрокаВерсииШаблонов.UID);
		Структура.Вставить("ИмяСценария", СтрокаВерсииШаблонов.Шаблон);
		
		Массив.Добавить(Структура);
	КонецЦикла;	 
	
	Возврат Массив;
КонецФункции	 

&НаСервере
Функция ДанныеСценарияДлаЗаписи()
	
	Данные = Новый Структура;
	Данные.Вставить("Наименование", Наименование);
	Данные.Вставить("UID", UIDСценария);
	Данные.Вставить("Код", Код);
	Данные.Вставить("Проект", Проект);
	Данные.Вставить("ПроектUID", Строка(Проект.УникальныйИдентификатор()));
	Данные.Вставить("ПроектНаименование", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Проект, "Наименование"));
	Данные.Вставить("ФункцияСистемы", ФункцияСистемы);
	Данные.Вставить("ФункцияСистемыНаименование", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФункцияСистемы, "Наименование"));
	Данные.Вставить("UIDФункцияСистемы", Строка(ФункцияСистемы.УникальныйИдентификатор()));
	Данные.Вставить("РазрешеноИспользоватьВДругихФункциях", РазрешеноИспользоватьВДругихФункциях);
	Данные.Вставить("Ветка", Ветка);
	Данные.Вставить("ИмяВетки", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ветка, "Наименование"));
	Данные.Вставить("ИмяПроекта", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Проект, "Наименование"));
	Данные.Вставить("ПрофильПользователя", ПрофильПользователя);
	ОпределитьУровниОтчетаПоСтроке(ПолноеИмяВДереве, УровеньОтчета1, УровеньОтчета2);
	Данные.Вставить("УровеньОтчета1", УровеньОтчета1);
	Данные.Вставить("УровеньОтчета2", УровеньОтчета2);
	Данные.Вставить("UIDРазделПроекта", Строка(РазделПроекта.УникальныйИдентификатор()));
	Данные.Вставить("UIDОтветственный", Строка(Ответственный.УникальныйИдентификатор()));
	Данные.Вставить("Публикуется", Публикуется);
	
	ТекстHTML = "";
	ПростойТекст = Описание.ПолучитьТекст();
	Если НЕ ПустаяСтрока(ПростойТекст) Тогда
		Вложения = Новый Структура;
		Описание.ПолучитьHTML(ТекстHTML, Вложения);
	КонецЕсли;	 
	Данные.Вставить("ОписаниеСценария", ТекстHTML);
	
	Данные.Вставить("ПараметрыСценария", ПараметрыВходящиеДляЗаписиВоВременныйФайл());
	Данные.Вставить("ТегиСценария", ТегиВыгружаемыеДляЗаписиВоВременныйФайл());
	Данные.Вставить("ВложенныеСценарии", ВерсииШаблоновДляЗаписиВоВременныйФайл());
	Данные.Вставить("ВызывающиеСценарии", ВызывающиеСценарииДляЗаписиВоВременныйФайл());
	
	Если ДелатьРаскраску Тогда
		Данные.Вставить("ТекстСценария", СхемаПроцессаТекст.ПолучитьТекст());
	Иначе	
		Данные.Вставить("ТекстСценария", ОбычныйТекст);
	КонецЕсли;	 
	
	Данные.Вставить("ИсходныйТекстСценария", ИсходныйТекстСценария);
	Данные.Вставить("ОригинальныйТекстМетаданных", ОригинальныйТекстМетаданных);
	Данные.Вставить("НастройкиСценария", Новый Массив);
	Данные.Вставить("ФайлыСценария", Новый Массив);
	Данные.Вставить("ЭтоНовыйЭлемент", ЭтоНовыйЭлемент);
	Данные.Вставить("ДанныеИерархии", ДанныеИерархии);
	Данные.Вставить("ПроисходилоИзменениеГруппы", ПроисходилоИзменениеГруппы);
	Данные.Вставить("ПолноеИмяВДереве", ПолноеИмяВДереве);
	
	Возврат Данные; 
	
КонецФункции	 

&НаКлиенте
Процедура ОбработкаВопросаПриЗакрытии(Результат, ВерсияПроверки) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОбработчикДобавитьВИндексИЗакрыть();
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикДобавитьВИндексИЗакрыть()
	ОтключитьОбработчикОжидания("ОбновитьТекущийPIDTestManager");
	Если Модифицированность Тогда
		ОтформатироватьСценарий(Истина);
		ЗаписатьСценарийВоВременныйФайл();
	КонецЕсли;	 
	
	Закрыть();
КонецПроцедуры 

&НаКлиенте
Функция ПолучитьВыделенныйТекстФорматированногоДокумента(ПозицияНачала = 0,ПозицияОкончания = 0)
	ПозицияНачала    = 0;
    ПозицияОкончания = 0;
    Элементы.СхемаПроцессаТекст.ПолучитьГраницыВыделения(ПозицияНачала,ПозицияОкончания);
	
	Текст = СхемаПроцессаТекст.ПолучитьТекст(ПозицияНачала,ПозицияОкончания);
	МассивСтрок = СтрРазделить(Текст,Символы.ПС);
	Позиция = СхемаПроцессаТекст.ПолучитьПозициюПоЗакладке(ПозицияОкончания);
	
	Если СокрЛП(МассивСтрок[МассивСтрок.Количество()-1]) = "" Тогда
		Позиция = Позиция - 1 - СтрДлина(МассивСтрок[МассивСтрок.Количество()-1]);
		ПозицияОкончания = СхемаПроцессаТекст.ПолучитьЗакладкуПоПозиции(Позиция);
		
		МассивСтрок.Удалить(МассивСтрок.Количество()-1);
		
		Текст = СтрСоединить(МассивСтрок,Символы.ПС);
	КонецЕсли;	 
	
	Возврат Текст;
КонецФункции	

&НаКлиенте
Функция ТекущаяСтрокаТекста(ПозицияНачалаСтрокиВТексте = Неопределено, ПозицияОкончанияСтрокиВТексте = Неопределено)
	ПозицияНачала    = 0;
	ПозицияОкончания = 0;
	Элементы.СхемаПроцессаТекст.ПолучитьГраницыВыделения(ПозицияНачала,ПозицияОкончания);
	
	Если СокрЛП(СхемаПроцессаТекст.ПолучитьТекст()) = "" Тогда
		Возврат "";
	КонецЕсли;	 
	
	ПозицияНачала = СхемаПроцессаТекст.ПолучитьПозициюПоЗакладке(ПозицияНачала);
	ПозицияОкончания = СхемаПроцессаТекст.ПолучитьПозициюПоЗакладке(ПозицияОкончания);
	
	Текст   = СхемаПроцессаТекст.ПолучитьТекст();
	Возврат ПолучитьСтрокуТекстаПоПозиции(Текст,ПозицияНачала,ПозицияНачалаСтрокиВТексте,ПозицияОкончанияСтрокиВТексте);
КонецФункции

&НаКлиенте
Процедура ОткрытьСценарийПоСтроке(Знач Стр)
	Стр = СокрЛП(Стр);
	СмоглиОпределить = СнипетПоСтроке(Стр);
	Если Не СмоглиОпределить Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	 		НСтр("ru = 'Не найден сценарий по строке <%1>.'"),Стр));
		Возврат;
	КонецЕсли;	 
	
	ДанныеДляПолученияСценария = ДанныеСценарияПоСнипету(АдресСлужебныеДанныеСценариев, Стр);
	Если ДанныеДляПолученияСценария = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	 		НСтр("ru = 'Не найден сценарий по строке %1.'"),Стр));
		Возврат;
	КонецЕсли;	 
	
	Если ДанныеДляПолученияСценария.ДвоичныеДанныеФайла <> Неопределено Тогда
		ПрочитанныеДанныеСценария = ТестированиеКлиент.ДанныеСценарияИзYaml(
			ДанныеДляПолученияСценария.ДвоичныеДанныеФайла.ОткрытьПотокДляЧтения(),
			ДанныеДляПолученияСценария.ДвоичныеДанныеТекстСценария.ОткрытьПотокДляЧтения(), ДанныеДляПолученияСценария);
		ДанныеДляПолученияСценария.Вставить("УровеньОтчета1", ПрочитанныеДанныеСценария["ДанныеСценария"]["УровеньОтчета1"]);
		ДанныеДляПолученияСценария.Вставить("УровеньОтчета2", ПрочитанныеДанныеСценария["ДанныеСценария"]["УровеньОтчета2"]);
	Иначе
		ДанныеРанееИзмененныхСценариев = ТестированиеКлиент.ДанныеРанееИзмененныхСценариев(Ветка, Проект);
		Для Каждого ПрочитанныеДанныеСценария Из ДанныеРанееИзмененныхСценариев.ИзмененныеМетаданныеИТекстСценария Цикл
			Если UIDСценария = ПрочитанныеДанныеСценария["ДанныеСценария"]["UID"] Тогда
				ДанныеДляПолученияСценария.Вставить("УровеньОтчета1", ПрочитанныеДанныеСценария["ДанныеСценария"]["УровеньОтчета1"]);
				ДанныеДляПолученияСценария.Вставить("УровеньОтчета2", ПрочитанныеДанныеСценария["ДанныеСценария"]["УровеньОтчета2"]);
				ДанныеДляПолученияСценария.Вставить("ЭтоНовыйЭлемент", Истина);
				Прервать;
			КонецЕсли;	 
		КонецЦикла;	 
	КонецЕсли;	 
	
	ДанныеДляПолученияСценария.Вставить("АдресСлужебныеДанныеСценариев", АдресСлужебныеДанныеСценариев);
	ДанныеДляПолученияСценария.Вставить("ТокенПользователя", ТокенПользователя);
	ДанныеДляПолученияСценария.Вставить("Ветка", Ветка);
	ДанныеДляПолученияСценария.Вставить("Проект", Проект);
	ДанныеДляПолученияСценария.Вставить("ИдентификаторКоммита", ИдентификаторКоммита);
	ТестированиеКлиент.ОткрытьСценарийДляРедактированияВРепозитории(ДанныеДляПолученияСценария);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтрокуТекстаПоПозиции(Текст,Знач Позиция,ПозицияНачала=Неопределено,ПозицияОкончания=Неопределено)
	ПозицияНачала    = -1;
	ПозицияОкончания = -1;
	
	Если Позиция > 0 Тогда
		Пока Истина Цикл
			Позиция = Позиция - 1;
			
			Если Позиция = 0 Тогда
				ПозицияНачала = Позиция+1;
				Прервать;
			КонецЕсли;	 
			
			Символ = Сред(Текст,Позиция,1);
			Если Символ = Символы.ПС Тогда
				ПозицияНачала = Позиция+1;
				Прервать;
			КонецЕсли;	 
			
		КонецЦикла;	
	Иначе 	
		ПозицияНачала = 1;
	КонецЕсли;	 
	
	Если ПозицияНачала = -1 Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	ДлинаТекста = СтрДлина(Текст);
	
	Пока Истина Цикл
		Позиция = Позиция + 1;
		
		Если Позиция > ДлинаТекста Тогда
			ПозицияОкончания = Позиция-1;
			Прервать;
		КонецЕсли;	 
		
		Символ = Сред(Текст,Позиция,1);
		Если Символ = Символы.ПС Тогда
			ПозицияОкончания = Позиция-1;
			Прервать;
		КонецЕсли;	 
		
	КонецЦикла;	
	
	Возврат Сред(Текст,ПозицияНачала,ПозицияОкончания-ПозицияНачала+1);
КонецФункции	

&НаСервереБезКонтекста
Функция СнипетПоСтроке(Стр)
	Если ТестированиеГрафическиеСхемыСервер.СнипетПоСтроке(Стр) Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Возврат Ложь;
КонецФункции	

&НаСервере
Функция ДанныеСценарияПоСнипету(АдресСлужебныеДанныеСценариев, Снипет)
	ДанныеСценариевКеш = ПолучитьИзВременногоХранилища(АдресСлужебныеДанныеСценариев);
	UID = ДанныеСценариевКеш.Снипеты[НРег(Снипет)];
	
	Если UID = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	ДанныеСценария = ДанныеСценариевКеш.UIDCценариев[UID];
	
	Данные = Новый Структура;
	Данные.Вставить("UIDСценария", UID);
	Данные.Вставить("ПолноеИмяФайла", ДанныеСценария.ПолноеИмяФайла);
	Данные.Вставить("ИмяСценария", ДанныеСценария.ИмяСценария);
	
	Если ДанныеСценария.Свойство("ЭтоНовыйЭлемент") И ДанныеСценария.ЭтоНовыйЭлемент Тогда
		Данные.Вставить("ДвоичныеДанныеТекстСценария", Неопределено);
		Данные.Вставить("ДвоичныеДанныеФайла", Неопределено);
	Иначе	
		ДанныеСценарияИзРепозитория = Тестирование.ДанныеСценарияИзРепозитория(Проект, ДанныеСценария, ТокенПользователя, Ветка, ИдентификаторКоммита);
		Данные.Вставить("ДвоичныеДанныеТекстСценария", ДанныеСценарияИзРепозитория.ДвоичныеДанныеТекстСценария);
		Данные.Вставить("ДвоичныеДанныеФайла", ДанныеСценарияИзРепозитория.ДвоичныеДанныеФайла);
	КонецЕсли;	 
	
	Возврат Данные;
КонецФункции	 

&НаКлиенте
Процедура ОбработкаВопросаОбОтменеИзмененийСценариев(Результат, ДополнительныеПараметры = Неопределено) Экспорт 
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		ТестированиеКлиент.УдалитьВременныеФайлыСценария(Ветка, ИмяПроектаСтрокой(Проект), Код, Неопределено);
		Оповестить("ОтменаИзмененийСценариевРаботыПользователя");
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("Закрыть", Истина);
		ОписаниеОповещенияПослеПредупреждения = Новый ОписаниеОповещения(
			"ПослеПредупреждения", ЭтаФорма, ДопПараметры);
		ПоказатьПредупреждение(ОписаниеОповещенияПослеПредупреждения, НСтр("ru = 'Изменения отменены.'"));
		Модифицированность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПредупреждения(ДопПараметры) Экспорт
	Если ДопПараметры.Закрыть Тогда
		Закрыть();
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОшибкуФорматированияСценария()
	ТекущееЗначение = ОписаниеОшибкиФорматирования;
	ОписаниеОшибкиФорматирования = Неопределено;
	
	ВызватьИсключение ТекущееЗначение;
КонецПроцедуры 

&НаКлиенте
Процедура ДобавитьСтрокиПрисвоенияПараметровСлужебный()
	ПозицияНачалаСтрокиВТексте = 0;
	ПозицияОкончанияСтрокиВТексте = 0;
	ТекущаяСтрокаТекста = ТекущаяСтрокаТекста(ПозицияНачалаСтрокиВТексте,ПозицияОкончанияСтрокиВТексте);
	
	Если ПустаяСтрока(ТекущаяСтрокаТекста) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Выберите не пустую строку текста.'"));
		Возврат;
	КонецЕсли;	 
	
	Стр = СокрЛП(ТекущаяСтрокаТекста);
	СмоглиОпределить = СнипетПоСтроке(Стр);
	Если Не СмоглиОпределить Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	 		НСтр("ru = 'Не найден сценарий по строке <%1>.'"),Стр));
		Возврат;
	КонецЕсли;	 
	
	ДанныеДляПолученияСценария = ДанныеСценарияПоСнипету(АдресСлужебныеДанныеСценариев, Стр);
	Если ДанныеДляПолученияСценария = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	 		НСтр("ru = 'Не найден сценарий по строке %1.'"),Стр));
		Возврат;
	КонецЕсли;	 
	
	ПрочитанныеДанныеСценария = Неопределено;
	Если ДанныеДляПолученияСценария.ДвоичныеДанныеФайла = Неопределено Тогда
		ДанныеРанееИзмененныхСценариев = ТестированиеКлиент.ДанныеРанееИзмененныхСценариев(Ветка, Проект);
		Для Каждого ТекПрочитанныеДанныеСценария Из ДанныеРанееИзмененныхСценариев.ИзмененныеМетаданныеИТекстСценария Цикл
			Если ДанныеДляПолученияСценария.UIDСценария = ТекПрочитанныеДанныеСценария["ДанныеСценария"]["UID"] Тогда
				ПрочитанныеДанныеСценария = ТекПрочитанныеДанныеСценария;
				Прервать;
			КонецЕсли;	 
		КонецЦикла;	 
	Иначе	
		ПрочитанныеДанныеСценария = ТестированиеКлиент.ДанныеСценарияИзYaml(
			ДанныеДляПолученияСценария.ДвоичныеДанныеФайла.ОткрытьПотокДляЧтения(),
			ДанныеДляПолученияСценария.ДвоичныеДанныеТекстСценария.ОткрытьПотокДляЧтения(), ДанныеДляПолученияСценария);
	КонецЕсли;	 
	
	Если ПрочитанныеДанныеСценария = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	ДанныеРанееИзмененныхСценариев = ТестированиеКлиент.ДанныеРанееИзмененныхСценариев(Ветка, Проект);	
	Для Каждого Элем Из ДанныеРанееИзмененныхСценариев.ИзмененныеМетаданныеИТекстСценария Цикл
		Если Элем["ДанныеСценария"]["UID"] = ДанныеДляПолученияСценария.UIDСценария Тогда
			ПрочитанныеДанныеСценария = Элем;
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	 
		
	ПараметрыСценария = ПрочитанныеДанныеСценария["ПараметрыСценария"];
	
	СтрокаПараметров = Символы.ПС;
	Для Каждого ПараметрСценария Из ПараметрыСценария Цикл
		Если НРег(ПараметрСценария["ИсходящийПараметр"]) = "да" Тогда
			СтрокаПараметров = СтрокаПараметров + "Возврат " + ПараметрСценария["Имя"] + " как $" + ПараметрСценария["Имя"] + "$" + Символы.ПС;
		Иначе	
			СтрокаПараметров = СтрокаПараметров + ПараметрСценария["Имя"] + " = '" + ПараметрСценария["Значение"] + "'" + Символы.ПС;
		КонецЕсли;	 
	КонецЦикла;	
	
	СтрокаПараметров = СтрокаПараметров + Символы.ПС;
	
	
	ПозицияДляВставки = СхемаПроцессаТекст.ПолучитьЗакладкуПоПозиции(ПозицияОкончанияСтрокиВТексте);
	СхемаПроцессаТекст.Вставить(ПозицияДляВставки,СтрокаПараметров);
	
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьПараметрыВходящиеСервер()
	ПараметрыВходящиеСервер = РеквизитФормыВЗначение("ПараметрыВходящие");
	КопияПараметров = ПараметрыВходящиеСервер.Скопировать();
	ПараметрыВходящиеСервер.Очистить();
	
	ДеревоСхемыИзформы = РеквизитФормыВЗначение("ДеревоСхемы");
	
	Текст = СхемаПроцессаТекст.ПолучитьТекст();
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДелатьРаскраску",ДелатьРаскраску);
	ДополнитьСтруктуруПараметровОбязятельнымиЗначениями(ДополнительныеПараметры);
		
	ТестированиеГрафическиеСхемыСервер.ДеревоСценарияИзТекста(Текст,
	                         ДеревоСхемыИзформы,Проект, Наименование, ДополнительныеПараметры);
	
	ТестированиеГрафическиеСхемыСервер.ПараметрыВходящиеИзДерева(ДеревоСхемыИзформы,
	       ПараметрыВходящиеСервер);
						
						
	ИменаПараметров = Новый Соответствие;
	Для Каждого СтрокаПараметрыВходящие Из ПараметрыВходящиеСервер Цикл
		ИменаПараметров.Вставить(СтрокаПараметрыВходящие.Имя,Истина);
		
		СтрокаТЧПараметрыВходящие = ПараметрыВходящиеСервер.Найти(СтрокаПараметрыВходящие.Имя,"Имя");
		Если СтрокаТЧПараметрыВходящие = Неопределено Тогда
			СтрокаТЧПараметрыВходящие = ПараметрыВходящие.Добавить();
			ЗаполнитьЗначенияСвойств(ПараметрыВходящиеСервер,СтрокаПараметрыВходящие);
		КонецЕсли;	 
	КонецЦикла;	 						
	
	СтрокиДляУдаления = Новый Массив;
	Для Каждого СтрокаТЧПараметрыВходящие Из ПараметрыВходящиеСервер Цикл
		Если ИменаПараметров[СтрокаТЧПараметрыВходящие.Имя] = Неопределено Тогда
			СтрокиДляУдаления.Добавить(СтрокаТЧПараметрыВходящие);
		КонецЕсли;	 
	КонецЦикла;	 
	
	Для Каждого Элем Из СтрокиДляУдаления Цикл
		ПараметрыВходящиеСервер.Удалить(Элем);
	КонецЦикла;	 
	
	НомСтр = 0;
		Для Каждого СтрокаПараметров Из ПараметрыВходящиеСервер Цикл
		НомСтр = НомСтр + 1;
		СтрокаПараметров.НомСтр = НомСтр;
		Если НЕ ЗначениеЗаполнено(СтрокаПараметров.Значение) Тогда
			СтрокаКопияПараметров = КопияПараметров.Найти(СтрокаПараметров.Имя, "Имя");
			Если СтрокаКопияПараметров <> Неопределено Тогда
				СтрокаПараметров.Значение = СтрокаКопияПараметров.Значение;
				СтрокаПараметров.ТипПараметра = СтрокаКопияПараметров.ТипПараметра;
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЦикла;	 
	
	ЗначениеВРеквизитФормы(ПараметрыВходящиеСервер, "ПараметрыВходящие"); 
						
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТестыПоUIDНастроек(UIDНастроекТестирования, Проект)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Тесты.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Тесты КАК Тесты
	               |ГДЕ
	               |	НЕ Тесты.ПометкаУдаления
	               |	И Тесты.UIDНастройкиСценария В(&UIDНастроекТестирования)
	               |	И Тесты.Владелец = &Владелец";
	Запрос.УстановитьПараметр("Владелец", Проект);
	Запрос.УстановитьПараметр("UIDНастроекТестирования", UIDНастроекТестирования);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Функция ТегиВыгружаемыеДляЗаписиВоВременныйФайл()
	// Обновление таблицы тегов из дополнительных реквизитов.
	
	ТаблицаТегов.Очистить();

	Для Каждого Набор Из Элементы.ГруппаВыгружаемые.ПодчиненныеЭлементы Цикл
		Для Каждого ЭлементДополнительногоРеквизита Из Набор.ПодчиненныеЭлементы Цикл
			ОписаниеРеквизитов = ЭтотОбъект.Свойства_ОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизитаЗначение", ЭлементДополнительногоРеквизита.Имя));
			Для Каждого ОписаниеРеквизита Из ОписаниеРеквизитов Цикл
				ЗначениеРеквизита = ЭтотОбъект[ОписаниеРеквизита.ИмяРеквизитаЗначение];
				Если ЗначениеРеквизита Тогда
					НоваяСтрока = ТаблицаТегов.Добавить();
					НоваяСтрока.Имя = ОписаниеРеквизита.Наименование;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ТегиСценария = Новый Массив;
	Индекс = 0;
	Для Каждого СтрокаТега Из ТаблицаТегов Цикл
		ДанныеТега = Новый Структура;
		Индекс = Индекс + 1;
		ДанныеТега.Вставить("НомерСтроки", Строка(Индекс));
		ДанныеТега.Вставить("Имя", СтрокаТега.Имя);
			
		ТегиСценария.Добавить(ДанныеТега);
	КонецЦикла;
	
	Возврат ТегиСценария;
КонецФункции

&НаСервере
Процедура УстановитьОписаниеСценария(ПарметрОписаниеСценария)
	Если ТипЗнч(ПарметрОписаниеСценария) = Тип("Массив") Тогда
		Стр = СтрСоединить(ПарметрОписаниеСценария, Символы.ПС);
	Иначе
		Стр = Строка(ПарметрОписаниеСценария);
	КонецЕсли;	 
	
	Описание.УстановитьHTML(Стр, Новый Структура);
КонецПроцедуры 

&НаКлиенте
Процедура ПерейтиКНужнойСтрокеСценарияОбработчикОжидания()
	ПереходКСтрокеСценария(ПерейтиКНужнойСтрокеСценария,Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСценарийНаРедактирование(ДанныеДляПолученияСценария)
	ДанныеДляПолученияСценария.Вставить("АдресСлужебныеДанныеСценариев", АдресСлужебныеДанныеСценариев);
	ДанныеДляПолученияСценария.Вставить("ТокенПользователя", ТокенПользователя);
	ДанныеДляПолученияСценария.Вставить("Ветка", Ветка);
	ДанныеДляПолученияСценария.Вставить("Проект", Проект);
	ДанныеДляПолученияСценария.Вставить("ИдентификаторКоммита", ИдентификаторКоммита);
	ТестированиеКлиент.ОткрытьСценарийДляРедактированияВРепозитории(ДанныеДляПолученияСценария);
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбновитьДанныеПоВызывающимСценариям()
	UIDВызывающихСценариев = Новый Соответствие;
	Для Каждого СтрокаВызывающиеСценарии Из ВызывающиеСценарии Цикл
		UIDВызывающихСценариев.Вставить(СтрокаВызывающиеСценарии.UID, Истина);
	КонецЦикла;	 
	
	ДанныеРанееИзмененныхСценариев = ТестированиеКлиент.ДанныеРанееИзмененныхСценариев(Ветка, Проект);
	Для Каждого ТекСценарий Из ДанныеРанееИзмененныхСценариев.ИзмененныеМетаданныеИТекстСценария Цикл
		UIDВызывающегоСценария = ТекСценарий["ДанныеСценария"]["UID"];
		Если UIDВызывающегоСценария = UIDСценария Тогда
			Продолжить;
		КонецЕсли;	 
		
		Для Каждого ТекВложенныйСценария Из ТекСценарий["ВложенныеСценарии"] Цикл
			Если ТекВложенныйСценария["UIDВложенныйСценарий"] = UIDСценария Тогда
				Если UIDВызывающихСценариев[UIDВызывающегоСценария] = Неопределено Тогда
					UIDВызывающихСценариев.Вставить(UIDВызывающегоСценария, Истина);
					СтрокаВызывающиеСценарии = ВызывающиеСценарии.Добавить();
					СтрокаВызывающиеСценарии.UID = UIDВызывающегоСценария;
					СтрокаВызывающиеСценарии.ИмяСценария = ТекСценарий["ДанныеСценария"]["Имя"];
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЦикла;	 
		
	КонецЦикла;	 
КонецПроцедуры 

&НаСервере
Функция ВызывающиеСценарииДляЗаписиВоВременныйФайл()
	Массив = Новый Массив;
	Для Каждого СтрокаВызывающиеСценарии Из ВызывающиеСценарии Цикл
		Структура = Новый Структура;
		Структура.Вставить("UIDВызывающийСценарий", СтрокаВызывающиеСценарии.UID);
		Структура.Вставить("ИмяСценария", СтрокаВызывающиеСценарии.ИмяСценария);
		
		Массив.Добавить(Структура);
	КонецЦикла;	 
	
	Возврат Массив;
КонецФункции	 

&НаСервереБезКонтекста
Функция СнипетИзСтрокиСервер(Стр)
	Возврат ТестированиеГрафическиеСхемыСервер.СнипетИзСтроки(Стр); 
КонецФункции	 

&НаКлиенте
Процедура ПроверитьНаименованиеНаУникальность()
	Стр = СокрЛП(Наименование);
	Снипет = СнипетИзСтрокиСервер(Стр);
	Если ПустаяСтрока(Снипет) Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		   НСтр("ru = 'Недопустимое имя сценария: %1'"), Наименование);
	КонецЕсли;	 
	
	UIDСценарияИзКешПоСнипету = UIDСценарияИзКешПоСнипету(Снипет);
	
	Если UIDСценарияИзКешПоСнипету <> Неопределено И UIDСценарияИзКешПоСнипету <> UIDСценария Тогда
		ДанныеДляПолученияСценария = ДанныеСценарияПоСнипету(АдресСлужебныеДанныеСценариев, Снипет);
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		   НСтр("ru = 'Уже существует сценарий с таким снипетом: <%1>. Путь в репозитории: %2'"),
		   	ДанныеДляПолученияСценария.ИмяСценария, ДанныеДляПолученияСценария.ПолноеИмяФайла);
	КонецЕсли;	 
	
КонецПроцедуры 

&НаСервере
Функция UIDСценарияИзКешПоСнипету(Снипет)
	ДанныеСценариевКеш = ПолучитьИзВременногоХранилища(АдресСлужебныеДанныеСценариев);
	Возврат ДанныеСценариевКеш.Снипеты[НРег(Снипет)];
КонецФункции

&НаСервере
Функция СлучайныйКод()
	ГСЧ = Новый ГенераторСлучайныхЧисел(ТекущаяУниверсальнаяДатаВМиллисекундах());
	Значение = XMLСтрока(ГСЧ.СлучайноеЧисло(5000, 1000000-1));
	Пока СтрДлина(Значение) < 9 Цикл
		Значение = "0" + Значение;
	КонецЦикла;	 
	Возврат Значение; 
КонецФункции	 

&НаСервере
Функция КодУникален(НовыйКод, ДанныеСценариевКеш)
	Если ДанныеСценариевКеш.КодыСценариев[НовыйКод] = Неопределено Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	 
КонецФункции	 

&НаСервере
Функция СгенерироватьНовыйКод()
	ДанныеСценариевКеш = ПолучитьИзВременногоХранилища(АдресСлужебныеДанныеСценариев);
	
	НовыйКод = СлучайныйКод();
	Пока НЕ КодУникален(НовыйКод, ДанныеСценариевКеш) Цикл
		НовыйКод = СлучайныйКод();
	КонецЦикла;	 
	
	Возврат НовыйКод;
КонецФункции	 

&НаСервере
Процедура ЗаписатьВКешНовыйПутьКСценарию(ПолноеИмяВДереве)
	ДанныеСценариевКеш = ПолучитьИзВременногоХранилища(АдресСлужебныеДанныеСценариев);
	ДанныеСценария = ДанныеСценариевКеш.UIDCценариев[UIDСценария];
	ДанныеСценария.Вставить("НовыйПутьВДереве", СтрЗаменить(ПолноеИмяВДереве, "\", "/"));
	ПоместитьВоВременноеХранилище(ДанныеСценариевКеш, АдресСлужебныеДанныеСценариев);
КонецПроцедуры 

&НаСервере
Функция СсылкаВРепозитории()
	ВеткаСтрокой = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ветка, "Имя");
	ДанныеСценариевКеш = ПолучитьИзВременногоХранилища(АдресСлужебныеДанныеСценариев);
	
	ДанныеПодключенияПроектаКGitСерверу = Тестирование.ДанныеПодключенияПроектаКGitСерверу(Проект);
	Стр = "https://" + ДанныеПодключенияПроектаКGitСерверу.РедактированиеСценариевВGitАдресСервера + "/"
		+ ДанныеПодключенияПроектаКGitСерверу.РедактированиеСценариевВGitИмяПроекта + "/-/blob/"
		+ ВеткаСтрокой + "/" + ДанныеПодключенияПроектаКGitСерверу.КаталогТестовВРепозитории + "/"
		+ СтрЗаменить(ДанныеСценариевКеш.UIDCценариев[UIDСценария].ПолноеИмяФайла, "meta.yaml", "scen.feature");
		
	Стр = СтрЗаменить(Стр, "%2F", "/");	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Открыть в репозитории'"),,,,Стр));
	Возврат Новый ФорматированнаяСтрока(МассивСтрок);
КонецФункции	 

&НаСервере
Процедура СменитьРедакторСценарияСервер()
	УправлениеВидимостьюЭлементовСервер();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСценарийДляРедактирование(ДанныеДляПолученияСценария)
	
	Если НЕ ДанныеДляПолученияСценария.Свойство("АдресСлужебныеДанныеСценариев") Тогда
		ДанныеДляПолученияСценария.Вставить("АдресСлужебныеДанныеСценариев", АдресСлужебныеДанныеСценариев);
	КонецЕсли;	 
	Если НЕ ДанныеДляПолученияСценария.Свойство("Ветка") Тогда
		ДанныеДляПолученияСценария.Вставить("Ветка", Ветка);
	КонецЕсли;	 
	Если НЕ ДанныеДляПолученияСценария.Свойство("ИдентификаторКоммита") Тогда
		ДанныеДляПолученияСценария.Вставить("ИдентификаторКоммита", ИдентификаторКоммита);
	КонецЕсли;	 
	ДанныеДляПолученияСценария.Вставить("ТокенПользователя", ТокенПользователя);
	ДанныеДляПолученияСценария.Вставить("Проект", Проект);
	ТестированиеКлиент.ОткрытьСценарийДляРедактированияВРепозитории(ДанныеДляПолученияСценария);
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ИмяПроектаСтрокой(Проект)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Проект, "Наименование"); 
КонецФункции	 

&НаКлиенте
Процедура СформироватьТекстСценарияДляПросмотра(ДелатьРаскраскуТекста)
	ОтформатироватьТекстСценарияЕслиЭтоНеобходимо(Истина);
	
	ДанныеРанееИзмененныхСценариев = ТестированиеКлиент.ДанныеРанееИзмененныхСценариев(Ветка, Проект);
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ДанныеРанееИзмененныхСценариев", ДанныеРанееИзмененныхСценариев);
	ДопПараметры.Вставить("ФорматироватьТолькоПервыйУровеньПодсценариев", Ложь);
	ТекстСценария = ПолучитьТекстыСценариевСервер(Модифицированность, ДопПараметры);
	Если ТекстСценария = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	Если НЕ ДелатьРаскраскуТекста Тогда
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.ДобавитьСтроку(ТекстСценария);
		ТекстовыйДокумент.Показать(Наименование);
		Возврат;
	КонецЕсли;	 
	
	ПараметрыСценария = Новый Структура;
	ПараметрыСценария.Вставить("ТекстСценария",ТекстСценария);
	ПараметрыСценария.Вставить("Проект",Проект);
	ПараметрыСценария.Вставить("Сценарий",Наименование);
	ПараметрыСценария.Вставить("ДанныеРанееИзмененныхСценариев",ДанныеРанееИзмененныхСценариев);
	ДопПараметры = Новый Структура;
	ДополнитьСтруктуруПараметровОбязятельнымиЗначениями(ДопПараметры);
	ПараметрыСценария.Вставить("ДопПараметры", ДопПараметры);
	
	ОткрытьФорму("Справочник.НастройкиЗапускаСценариев.Форма.Сценарии",ПараметрыСценария,,Истина);
КонецПроцедуры 

&НаКлиенте
Процедура ОткрытьСценарийВДругойВетке(ВыбраннаяВетка)
		ДанныеСценария = ДанныеСценарияДлаЗаписи();
		ДанныеСценария.Вставить("Ветка", ВыбраннаяВетка);
		ДанныеСценария.Вставить("UIDСценария", ДанныеСценария.UID);
		ДанныеСценария.Вставить("ИдентификаторКоммита", Неопределено);
		ДанныеСценария.Вставить("АдресСлужебныеДанныеСценариев", Неопределено);
		ОткрытьСценарийДляРедактирование(ДанныеСценария);
	КонецПроцедуры 
	
&НаСервереБезКонтекста
Функция ОсновнаяВеткаПроекта(Проект)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Ветки.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Ветки КАК Ветки
		|ГДЕ
		|	Ветки.Владелец = &Владелец
		|	И Ветки.Тип = &Тип";
	
	Запрос.УстановитьПараметр("Владелец", Проект);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыВеток.ОсновнаяВеткаПроекта);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции	 

&НаКлиенте
Процедура СкопирватьДанныеПоВложеннымСценариям()
	ВерсииШаблоновКопия.Очистить();
	Для Каждого СтрокаВерсииШаблонов Из ВерсииШаблонов Цикл
		СтрокаВерсииШаблоновКопия = ВерсииШаблоновКопия.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаВерсииШаблоновКопия, СтрокаВерсииШаблонов);
	КонецЦикла;	 
КонецПроцедуры 

&НаКлиенте
Процедура ОбновитьДанныеВызывающихСценариев(ДанныеСценария)
	КешВложенныхСценариев = Новый Соответствие;
	Для Каждого СтрокаВерсииШаблонов Из ВерсииШаблонов Цикл
		КешВложенныхСценариев.Вставить(СтрокаВерсииШаблонов.UID, Истина);
	КонецЦикла;
	КешВложенныхСценариевКопия = Новый Соответствие;
	Для Каждого СтрокаВерсииШаблонов Из ВерсииШаблоновКопия Цикл
		КешВложенныхСценариевКопия.Вставить(СтрокаВерсииШаблонов.UID, Истина);
	КонецЦикла;
	
	ДанныеРанееИзмененныхСценариев = Неопределено;
	
	Для Каждого Элем Из КешВложенныхСценариев Цикл
		Если КешВложенныхСценариевКопия[Элем.Ключ] = Неопределено Тогда
			Если ДанныеРанееИзмененныхСценариев = Неопределено Тогда
				ДанныеРанееИзмененныхСценариев = ТестированиеКлиент.ДанныеРанееИзмененныхСценариев(Ветка, Проект)
			КонецЕсли;	 
			ТестированиеКлиент.ДобавитьИнформациюВСценарийОВнешнемВызове(Элем.Ключ, ДанныеСценария, ДанныеРанееИзмененныхСценариев);
		КонецЕсли;	 
	КонецЦикла;	 
	
	Для Каждого Элем Из КешВложенныхСценариевКопия Цикл
		Если КешВложенныхСценариев[Элем.Ключ] = Неопределено Тогда
			Если ДанныеРанееИзмененныхСценариев = Неопределено Тогда
				ДанныеРанееИзмененныхСценариев = ТестированиеКлиент.ДанныеРанееИзмененныхСценариев(Ветка, Проект)
			КонецЕсли;	 
			ТестированиеКлиент.УдалитьИнформациюИзСценарияОВнешнемВызове(Элем.Ключ, ДанныеСценария, ДанныеРанееИзмененныхСценариев);
		КонецЕсли;	 
	КонецЦикла;	 
КонецПроцедуры 

&НаСервереБезКонтекста
Процедура ОпределитьУровниОтчетаПоСтроке(Знач Стр, УровеньОтчета1, УровеньОтчета2)
	
	Стр = СтрЗаменить(Стр, "\", "/");
	МассивСтрок = СтрРазделить(Стр, "/");
	Если МассивСтрок.Количество() > 0 Тогда
		УровеньОтчета1 = МассивСтрок[0];
	КонецЕсли;	 
	Если МассивСтрок.Количество() > 1 Тогда
		УровеньОтчета2 = МассивСтрок[1];
	КонецЕсли;	 
	
КонецПроцедуры 

&НаСервереБезКонтекста
Процедура СохранитьНастройкуВидимостиПанелиШагов(Значение)
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Справочник.СценарииРаботыПользователей.ФормаЭлемента",
	      "ВидимостьПанелиШагов", Значение);
КонецПроцедуры 

&НаКлиенте
Функция СформироватьЗаголовок(НужноЗафиксироватьИзменения = Ложь)
	
	Результат = Наименование + " (" + НСтр("ru = 'данные из ветки '") + Строка(Ветка)  + ")";
	Если СценарийИзмененЛокально ИЛИ НужноЗафиксироватьИзменения Тогда
		Результат = Наименование + " (" + НСтр("ru = 'Нужно зафиксировать изменения'") + ")";
	КонецЕсли;	 
	
	Возврат Результат; 
	
КонецФункции	 

&НаСервере
Процедура СменитьРедакторСценарияНаОбычныйТекстСервер()
	ОбычныйТекст = СхемаПроцессаТекст.ПолучитьТекст();
	ТипРедактора = ТестированиеКлиентСервер.ТипРедактораОбычныйТекст();
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
	    "Тестирование", "ТипРедактораВСценарииТестирования", ТипРедактора);
	
	ДелатьРаскраску = Ложь;
	УправлениеВидимостьюЭлементовСервер();
КонецПроцедуры

&НаСервере
Процедура СменитьРедакторСценарияНаРедакторСРаскраскойСервер()
	ТипРедактора = ТестированиеКлиентСервер.ТипРедактораФорматированныйДокумент();
	ДелатьРаскраску = Истина;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДелатьРаскраску",Истина);
	ДополнительныеПараметры.Вставить("Текст",ОбычныйТекст);
	ОтформатироватьСхемаПроцессаТекст(ДополнительныеПараметры);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
	    "Тестирование", "ТипРедактораВСценарииТестирования", ТипРедактора);
	
	УправлениеВидимостьюЭлементовСервер();
КонецПроцедуры

&НаСервере
Функция ДелатьРаскраску()
	Если ТипРедактора = ТестированиеКлиентСервер.ТипРедактораФорматированныйДокумент() Тогда
		Возврат Истина;
	Иначе	
		Возврат Ложь;
	КонецЕсли;	
КонецФункции	

&НаСервере
Процедура УправлениеВидимостьюЭлементовСервер()
	Элементы.СхемаПроцессаТекст.Видимость         = ДелатьРаскраску;
	Элементы.ОбычныйТекст.Видимость               = НЕ ДелатьРаскраску;
	Элементы.СменитьРедакторСценарияНаОбычныйТекст.Пометка
		= ТипРедактора = ТестированиеКлиентСервер.ТипРедактораОбычныйТекст();
	Элементы.СменитьРедакторСценарияНаРедакторСРаскраской.Пометка
		= ТипРедактора = ТестированиеКлиентСервер.ТипРедактораФорматированныйДокумент();
КонецПроцедуры
	
#КонецОбласти
