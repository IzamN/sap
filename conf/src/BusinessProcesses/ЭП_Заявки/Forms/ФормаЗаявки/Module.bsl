&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	СформироватьТекстПротоколаВзаимодействия();
    УстановитьСостояниеЗаявки();
	ДоступККомандам();
	
	Если НЕ Объект.ТипЗаявки.Пустая() Тогда
		
		Если Строка(Объект.ТипЗаявки) = Элементы.ЗапросНаОбслуживание.Заголовок Тогда
			Элементы.ЗапросНаОбслуживание.Видимость = ИСТИНА; 
		ИначеЕсли Строка(Объект.ТипЗаявки) = Элементы.УвольнениеСотрудника.Заголовок Тогда
			Элементы.УвольнениеСотрудника.Заголовок = ИСТИНА;  
		ИначеЕсли Строка(Объект.ТипЗаявки) = Элементы.НеработоспособностьСервиса.Заголовок Тогда
			Элементы.НеработоспособностьСервиса.Видимость = ИСТИНА;
		ИначеЕсли Строка(Объект.ТипЗаявки) = Элементы.ОрганизацияРабочегоМеста.Заголовок Тогда 
			Элементы.ОрганизацияРабочегоМеста.Видимость = ИСТИНА;  
		ИначеЕсли Строка(Объект.ТипЗаявки) = Элементы.ПредоставлениеДоступаККонтуру.Заголовок Тогда
			Элементы.ПредоставлениеДоступаККонтуру.Видимость = ИСТИНА;
		КонецЕсли; 
		
	КонецЕсли;
	
	Если Объект.Стартован Тогда
		ЗапретитьИзменениеЗаявки(Элементы.Заявка);
	КонецЕсли;
		
	КартаМаршрута = РеквизитФормыВЗначение("Объект").ПолучитьКартуМаршрута();	
	
	ЗаполнитьТехника();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередСтартом(Отказ) 
	
	Если не Объект.Стартован Тогда 
		ПервоеСообщение = Истина;
	КонецЕсли;

	Для каждого ЭлТехника из Техника Цикл
		СтрокаПредоставляемаяТехника = Объект.ПредоставляемаяТехника.Добавить();
		СтрокаПредоставляемаяТехника.Техника = ЭлТехника.Значение;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
		
	Если ПервоеСообщение Тогда
		ЭП_РаботаСЗаявкамиСервер.ДобавитьЗаписьВПротокол(ТекущийОбъект, ТекущийПользователь, "");
		ПервоеСообщение = Ложь;
		ЗапретитьИзменениеЗаявки(Элементы.Заявка);
		
	КонецЕсли;  

	ТекущийОбъект.ЧтоЯХочу = Новый ХранилищеЗначения(ОписаниеЧтоЯХочу);
    ТекущийОбъект.ЧтоЯДелаю = Новый ХранилищеЗначения(ОписаниеЧтоЯДелаю);
	ТекущийОбъект.ЧтоЯПолучаю = Новый ХранилищеЗначения(ОписаниеЧтоЯПолучаю);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ОбновитьФормуПрограммно();
    ДоступККомандам();

	Если Объект.Стартован Тогда
		ЗапретитьИзменениеЗаявки(Элементы.Заявка);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Объект.ТипЗаявки = Перечисления.ЭП_ТипЗаявки.ОрганизацияРабочегоМеста Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ФИО) ИЛИ НЕ ЗначениеЗаполнено(Объект.Организация) ИЛИ
			НЕ ЗначениеЗаполнено(Объект.Департамент) ИЛИ НЕ ЗначениеЗаполнено(Объект.Должность) ИЛИ 
			НЕ ЗначениеЗаполнено(Объект.Руководитель) ИЛИ НЕ ЗначениеЗаполнено(Объект.Телефон) Тогда 
			Отказ = ИСТИНА;
			Сообщить("Заполните все поля обязательные для заполнения");	
		КонецЕсли;
	ИначеЕсли Объект.ТипЗаявки = Перечисления.ЭП_ТипЗаявки.ПредоставлениеДоступаККонтуру Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Сотрудник) ИЛИ НЕ ЗначениеЗаполнено(Объект.Сервис) ИЛИ НЕ ЗначениеЗаполнено(Объект.Проект) Тогда
			Отказ = ИСТИНА;
			Сообщить("Заполните все поля обязательные для заполнения");
		ИначеЕсли Объект.Сотрудник.СтатусСотрудника <> Перечисления.ЭП_СтатусыСотрудников.Работает И 
						Объект.Сотрудник.СтатусСотрудника <> Перечисления.ЭП_СтатусыСотрудников.ИспытательныйСрок Тогда
			Отказ = ИСТИНА;
			Сообщить("Сотрудник не работает на данный момент");
		КонецЕсли;
	ИначеЕсли Объект.ТипЗаявки = Перечисления.ЭП_ТипЗаявки.НеработоспособностьСервиса Тогда 
		Если НЕ ЗначениеЗаполнено(Объект.Сервис) Тогда
			Отказ = ИСТИНА;
			Сообщить("Заполните все поля обязательные для заполнения");	
		КонецЕсли;
	ИначеЕсли  Объект.ТипЗаявки = Перечисления.ЭП_ТипЗаявки.УвольнениеСотрудника Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ФИО) ИЛИ НЕ ЗначениеЗаполнено(Объект.ДатаУвольнения) Тогда
			Отказ = ИСТИНА;
			Сообщить("Заполните все поля обязательные для заполнения");
		ИначеЕсли Объект.ФИО.ЭП_Сотрудник.СтатусСотрудника <> Перечисления.ЭП_СтатусыСотрудников.Работает И 
					Объект.ФИО.ЭП_Сотрудник.СтатусСотрудника <> Перечисления.ЭП_СтатусыСотрудников.ИспытательныйСрок Тогда
			Отказ = ИСТИНА;
			Сообщить("Сотрудник не работает на данный момент");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТехника()
	
	Для каждого ЭлТаблЧасти из Объект.ПредоставляемаяТехника Цикл 
		ЭлТехника = Техника.Добавить(ЭлТаблЧасти.Техника);
	КонецЦикла 
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеЗаявки()
	
	Если Объект.СтатусЗаявки = Перечисления.ЭП_СтатусыЗаявок.ЗапросНаОтмену Тогда
		Отменить = Новый ФорматированнаяСтрока("Отменить",,WebЦвета.Синий,,"Отменить");
		НеОтменять = Новый ФорматированнаяСтрока("Не отменять",,WebЦвета.Синий,,"НеОтменять");
		СтрокаСостояния = Новый ФорматированнаяСтрока(Строка(Объект.СтатусЗаявки), ",", Отменить, ", ", НеОтменять);
	ИначеЕсли Объект.СтатусЗаявки = Перечисления.ЭП_СтатусыЗаявок.НаПроверке  Тогда
		Выполнена = Новый ФорматированнаяСтрока("Выполнена",,WebЦвета.Синий,,"Выполнена");
		ПовторноеВыполнение = Новый ФорматированнаяСтрока("Повторное выполнение",,WebЦвета.Синий,,"ПовторноеВыполнение");
		СтрокаСостояния = Новый ФорматированнаяСтрока(Строка(Объект.СтатусЗаявки), ", ", Выполнена, ", ", ПовторноеВыполнение);
	Иначе
		СтрокаСостояния = Новый ФорматированнаяСтрока(Строка(Объект.СтатусЗаявки)); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФорму(Команда)
	
	ОбновитьФормуПрограммно();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьФормуПрограммно()
	
	ЭтаФорма.Прочитать();
	СформироватьТекстПротоколаВзаимодействия();
	УстановитьСостояниеЗаявки();
	ДоступККомандам();
		
КонецПроцедуры

&НаСервере
Процедура ЗапретитьИзменениеЗаявки(ЭлементГруппа)
	
	Для каждого Элемент из ЭлементГруппа.ПодчиненныеЭлементы Цикл 
		Если ТипЗнч(Элемент) =  Тип("ГруппаФормы") и ЗначениеЗаполнено(Элемент.ПодчиненныеЭлементы) Тогда
			ЗапретитьИзменениеЗаявки(Элемент);
		ИначеЕсли ТипЗнч(Элемент) =  Тип("ПолеФормы") Тогда
			Элемент.ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДоступККомандам()
	Если Объект.Стартован Тогда
		Элементы.Старт1.Доступность = Ложь; 
		Если Объект.Заявитель = ТекущийПользователь и не Объект.Завершен Тогда
			Элементы.ФормаОтменитьВыполнениеЗаявки.Доступность = Истина;
		Иначе
			Элементы.ФормаОтменитьВыполнениеЗаявки.Доступность = Ложь;
		КонецЕсли;
	Иначе
		Элементы.ФормаОтменитьВыполнениеЗаявки.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#Область ПротоколВзаимодействия

&НаСервере
Процедура СформироватьТекстПротоколаВзаимодействия()
	
	ПротоколВзаимодействия = 
		"<!DOCTYPE html>
		|<html>
		| <head>
		|  <meta charset=""utf-8"">
		|<style type=""text/css"">
		|.users {
		|	font-size: 10px;
		|	font-family: Arial, Helvetica, sans-serif;
		|	color: #afafaf;
		|}
		|.commentLeft {
		|	font-size: 14px;
		|	font-family: Arial, Helvetica, sans-serif;
		|	color: #484848;
		|	background-color: #eeffda;
		|	padding-top: 7px;
		|	padding-bottom: 8px;
		|	padding-left: 10px;
		|	padding-right: 15px;
		|	margin-left: 10%;
		|}
		|.commentRight {
		|	font-size: 14px;
		|	font-family: Arial, Helvetica, sans-serif;
		|	color: #484848;
		|	background-color: #ededed;
		|	padding-top: 7px;
		|	padding-bottom: 8px;
		|	padding-left: 10px;
		|	padding-right: 15px;
		|	margin-right: 10%; 
		|}
		|.status {
		|	font-size: 10px;
		|	font-family: Arial, Helvetica, sans-serif;
		|	color: #afafaf;
		|	width: 50%;
		|	float: left;
		|}
		|.text {
		|	padding-top: 7px;
		|	padding-bottom: 2px;
		|}
		|.date {
		|	font-size: 10px;
		|	font-family: Arial, Helvetica, sans-serif;
		|	color: #afafaf;
		|	text-align: right;
		|	margin-right: 30px;
		|	padding-top: 5px;
		|}
		|.time {
		|	font-size: 10px;
		|	font-family: Arial, Helvetica, sans-serif;
		|	color: #afafaf;
		|	text-align: right;
		|	padding: 0px;
		|}
		|.edit {
		|	border: none;
		|	margin-left: 5px;
		|}
		|.marginLeft {
		|	margin-left: 10%;
		|	margin-bottom: 1px;
		|}
		|.marginRight {
		|	margin-right: 10%;
		|	margin-bottom: 1px;
		|}
		|.mb {
		|margin-bottom: 15px;
		|}
		|a.user:link {
		|	color: #828282;
		|	margin-right: 7px;
		|	margin-left: 10px;
		|	padding-left: 1px;
		|}
		|a.user:visited {
		|	color: #828282;
		|	margin-right: 7px;
		|	margin-left: 10px;
		|	padding-left: 1px;
		|}
		|a.user2:link {
		|	color: #828282;
		|	margin-right: 7px;
		|	padding-left: 40px;
		|}
		|a.user2:visited {
		|	color: #828282;
		|	margin-right: 7px;
		|	padding-left: 1px;
		|	margin-left: 4px;
		|}
		|</style>
		| </head>
		| <body>";
	
	КартинкаНаправлена    = ПоместитьВоВременноеХранилище(БиблиотекаКартинок.КомуНаправлена, УникальныйИдентификатор);
	КартинкаРедактировать = ПоместитьВоВременноеХранилище(БиблиотекаКартинок.Редактировать, УникальныйИдентификатор);
	
	СтрокаСсылкаИзменить = "<a href=""#СсылкаИзменить"">%СсылкаИзменить%</a>";
	СтрокаСсылкаИзменить = СтрЗаменить(СтрокаСсылкаИзменить, "%СсылкаИзменить%", НСтр("ru = 'изменить комментарий'"));
	
	КоличествоСтрок = Объект.ПротоколВзаимодействия.Количество();
	Инд = КоличествоСтрок - 1;
	
	Пока Инд >= 0 Цикл
		
		СтрокаПротокол = Объект.ПротоколВзаимодействия.Получить(Инд);
		Инд = Инд -1;
		
		ТекстПорученияПротокола = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(СтрокаПротокол.ТекстСообщения, "");
		ТекстПорученияПротокола = СтрЗаменить(ТекстПорученияПротокола, Символы.ПС, "<br>");
		
		Если СтрокаПротокол.Автор <> ТекущийПользователь Тогда
			ИмяСтиляПользователи = "marginRight";
			ИмяСтиляКомментарий  = "commentRight mb";
		Иначе
			ИмяСтиляПользователи = "marginLeft";
			ИмяСтиляКомментарий  = "commentLeft mb";
		КонецЕсли;
		
		ТекстАвтор = СтрШаблон("<a href=""%1"" class=""user"">%2</a>",
		                                ПолучитьНавигационнуюСсылку(СтрокаПротокол.Автор),
		                                ПредставлениеПользователя(СтрокаПротокол.Автор, ТекущийПользователь, НСтр("ru = 'Я'")));
										
		ТекстКомуНаправлена = СтрШаблон("<a href=""%1"" class=""user"">%2</a>",
		                                ПолучитьНавигационнуюСсылку(СтрокаПротокол.ИсполнительЗадачи),
		                                ПредставлениеПользователя(СтрокаПротокол.ИсполнительЗадачи, ТекущийПользователь, НСтр("ru = 'Мне'")));							
										
										
		СтрокаПользователи = "<div class=""users"">" + ТекстАвтор;  
						
		Если ЗначениеЗаполнено(СтрокаПротокол.ИсполнительЗадачи) Тогда
			СтрокаПользователи = СтрокаПользователи + "<IMG src=""" + КартинкаНаправлена + """>" + ТекстКомуНаправлена +"</div>";
		Иначе
			СтрокаПользователи = СтрокаПользователи +"</div>";
		КонецЕсли;
		
		ПротоколВзаимодействия = ПротоколВзаимодействия + " 
			|<div class=""" + ИмяСтиляПользователи + """>" + СтрокаПользователи + "</div>";
		
		
		Если СтрокаПротокол.НомерСтроки = КоличествоСтрок И СтрокаПротокол.Автор = ТекущийПользователь Тогда
			СтрокаИзменить = "<a  href=""#СсылкаИзменить""><img class = ""edit"" src="""+ КартинкаРедактировать + """></a>";
		Иначе
			СтрокаИзменить = "";
		КонецЕсли;

		СтрокаСтатус    = "<div class=""status"">" + СтрокаПротокол.Статус +"</div>";
		ДатаПоручения   = ПредставлениеДаты(СтрокаПротокол.Дата);
		СтрокаДата      = "<div class=""time"">"   + ДатаПоручения + "</div>";
		СтрокаПоручение = "<div class=""text"">"   + ТекстПорученияПротокола + СтрокаИзменить + "</div>";
		
		ПротоколВзаимодействия = ПротоколВзаимодействия + "
			|<div class=""" + ИмяСтиляКомментарий + """>" + СтрокаСтатус + СтрокаДата + СтрокаПоручение + "</div>";
		
	КонецЦикла;
	
	ПротоколВзаимодействия = ПротоколВзаимодействия 
		+ "
		|</body>
		|</html>";
		
КонецПроцедуры

&НаСервере
Функция ПредставлениеПользователя(Пользователь, ТекущийПользователь, ПредставлениеЕслиТекущий)
	
	Если Пользователь = ТекущийПользователь Тогда
		Возврат ПредставлениеЕслиТекущий;
	Иначе
		Возврат Строка(Пользователь);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПредставлениеДаты(Дата)

	ДатаСеанса = ТекущаяДатаСеанса();
	
	Если НачалоДня(Дата) = НачалоДня(ДатаСеанса) Тогда 
		Возврат Формат(Дата, "ДЛФ=T");
	ИначеЕсли НачалоДня(Дата) = НачалоДня(ДатаСеанса) - 86400 Тогда
		Возврат НСтр("ru = 'Вчера'");
	Иначе
		Возврат Формат(Дата, "ДЛФ=D");
	КонецЕсли;

КонецФункции 

&НаКлиенте
Процедура ПротоколВзаимодействияHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если ДанныеСобытия.Href = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Найти(ДанныеСобытия.Href, "#СсылкаИзменить") > 0 Тогда
		Если Объект.ПротоколВзаимодействия.Количество() > 0 Тогда
			ИзменитьПоследнееПоручение();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	ПерейтиПоНавигационнойСсылке(ДанныеСобытия.Href);
	
КонецПроцедуры

&НаСервере
Процедура ОтправитьСообщениеНаСервере()

	КоличествоСтрокПротокола = Объект.ПротоколВзаимодействия.Количество();
	Если КоличествоСтрокПротокола > 0  Тогда
		ПоследняяСтрока = Объект.ПротоколВзаимодействия.Получить(КоличествоСтрокПротокола - 1);
		СтатусПоСтрокеПротокола = ПоследняяСтрока.Статус;
		НаправленаПоСтрокеПротокола = ПоследняяСтрока.ИсполнительЗадачи;
		ПоследнееПоручениеПротокола = ПоследняяСтрока.ТекстСообщения;
	КонецЕсли;
	
	Если НЕ Объект.СтатусЗаявки = СтатусПоСтрокеПротокола или 
		(НЕ ПоследнееПоручениеПротокола = ТекстСообщения И НЕ ТекстСообщения = "") Тогда
		ЭП_РаботаСЗаявкамиСервер.ДобавитьЗаписьВПротокол(Объект, ТекущийПользователь, СокрЛП(ТекстСообщения)); 
	КонецЕсли;
	
	ЭтаФорма.Записать();

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСообщение(Команда)
	ОтправитьСообщениеНаСервере();
	СформироватьТекстПротоколаВзаимодействия();
	ТекстСообщения = "";
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПоследнееПоручение()

	СтрокаТЧ = Объект.ПротоколВзаимодействия[Объект.ПротоколВзаимодействия.Количество() - 1];
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Автор", СтрокаТЧ.Автор);
	ПараметрыФормы.Вставить("Дата", СтрокаТЧ.Дата);
	ПараметрыФормы.Вставить("Статус", СтрокаТЧ.Статус);
	ПараметрыФормы.Вставить("ИсполнительЗадачи", СтрокаТЧ.ИсполнительЗадачи);
	ПараметрыФормы.Вставить("ТекстСообщения", СтрокаТЧ.ТекстСообщения);
	
	Структура = Новый Структура("СтрокаПротокола", СтрокаТЧ);
	 
	ОписаниеОповещения = Новый ОписаниеОповещения("ПротоколВыборЗавершение", ЭтотОбъект, Структура);
	
	ОткрытьФорму("БизнесПроцесс.ЭП_Заявки.Форма.ФормаСтрокаПротокола", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПротоколВыборЗавершение(РезультатДействия, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(РезультатДействия) = Тип("Строка") Тогда
		
		СтрокаТЧ = ДополнительныеПараметры.СтрокаПротокола;
		СтрокаТЧ.ТекстСообщения = РезультатДействия;
		
		СформироватьТекстПротоколаВзаимодействия();
		
		
		Модифицированность = Истина;
		Записать();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КартаМаршрута

&НаСервере
Процедура ОбновитьКартуМаршрутаНаСервере() 
	
	ЭтаФорма.Прочитать();
	КартаМаршрута = РеквизитФормыВЗначение("Объект").ПолучитьКартуМаршрута(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКартуМаршрута(Команда)
	ОбновитьКартуМаршрутаНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ОбратнаяСвязьИОтменаВыполнения

&НаСервере
Процедура СтрокаСостоянияОбработкаНавигационнойСсылкиНаСервере(НавигационнаяСсылкаФорматированнойСтроки)
	
	Если  НавигационнаяСсылкаФорматированнойСтроки = "Выполнена"  или НавигационнаяСсылкаФорматированнойСтроки = "ПовторноеВыполнение" Тогда
		Объект.Удовлетворительно = ?(НавигационнаяСсылкаФорматированнойСтроки = "Выполнена", Истина, Ложь);
		Объект.СтатусЗаявки = ?(Объект.Удовлетворительно, Перечисления.ЭП_СтатусыЗаявок.Выполнена,Перечисления.ЭП_СтатусыЗаявок.ВРаботе);
		СообщениеПротоколВзаимодействия = ?(Объект.Удовлетворительно, "Заявка выполнена.", Строка(Объект.Заявитель) + " отправил(а) на повторное выполнение." );
		ЭП_РаботаСЗаявкамиСервер.ДобавитьЗаписьВПротокол(Объект, Объект.Заявитель, СообщениеПротоколВзаимодействия);
		Записать();
		ВыполнитьЗадачуОбратнаяСвязь();   
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "Отменить" Тогда 
		ОтменитьВыполнениеЗаявкиНаСервере();
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "НеОтменять" Тогда
		Объект.СтатусЗаявки = Перечисления.ЭП_СтатусыЗаявок.ВРаботе;
		ЭП_РаботаСЗаявкамиСервер.ДобавитьЗаписьВПротокол(Объект, Объект.Заявитель, Строка(Объект.Заявитель) + " отменил(а) запрос на отмену заявки.");
		Записать(); 
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СтрокаСостоянияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка) 
	
	СтандартнаяОбработка = Ложь;
	СтрокаСостоянияОбработкаНавигационнойСсылкиНаСервере(НавигационнаяСсылкаФорматированнойСтроки); 
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗадачуОбратнаяСвязь() 
	
	Задача = ЭП_РаботаСЗаявкамиСервер.ПолучитьТекущуюЗадачу(Объект.Ссылка).ПолучитьОбъект();
	Задача.ВыполнитьЗадачу();	
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьВыполнениеЗаявкиНаСервере()

	Задача = ЭП_РаботаСЗаявкамиСервер.ПолучитьТекущуюЗадачу(Объект.Ссылка).ПолучитьОбъект();
	Объект.Завершен = Истина;
	Объект.СтатусЗаявки = Перечисления.ЭП_СтатусыЗаявок.Отменена;
	ЭП_РаботаСЗаявкамиСервер.ДобавитьЗаписьВПротокол(Объект, Объект.Заявитель, Строка(Объект.Заявитель) + " отменил(а) заявку");
	Записать();
	Задача.ВыполнитьЗадачу();
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВыполнениеЗаявки(Команда)
	
	Если Объект.Стартован Тогда
		ОтменитьВыполнениеЗаявкиНаСервере();
		ДоступККомандам();
	КонецЕсли;
	
	
КонецПроцедуры

#КонецОбласти

#Область ВыборТипаЗаявки

&НаСервере
Функция ДанныеДляВыбораТипаЗаявки(МенеджерПоПерсоналу)
	ДанныеВыбора = Новый СписокЗначений();
	Текст = "ВЫБРАТЬ
	        |	ЭП_ТипЗаявки.Ссылка КАК ТипЗаявки
	        |ИЗ
	        |	Перечисление.ЭП_ТипЗаявки КАК ЭП_ТипЗаявки
	        |ГДЕ
	        |	Не &МенеджерПоПерсоналу И ЭП_ТипЗаявки.Ссылка <> ЗНАЧЕНИЕ(Перечисление.ЭП_ТипЗаявки.ОрганизацияРабочегоМеста)
	        |	И ЭП_ТипЗаявки.Ссылка <> ЗНАЧЕНИЕ(Перечисление.ЭП_ТипЗаявки.УвольнениеСотрудника) или &МенеджерПоПерсоналу";
	Запрос = Новый Запрос();
	Запрос.Текст = Текст;
	Запрос.УстановитьПараметр("МенеджерПоПерсоналу", МенеджерПоПерсоналу); 
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		 ДанныеВыбора.Добавить(Выборка.ТипЗаявки);
	 КонецЦикла;
	 Возврат  ДанныеВыбора;
КонецФункции

&НаКлиенте
Процедура ТипЗаявкиНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка) 
	
	СтандартнаяОбработка = Ложь;   
	
	Если РольДоступнаМенеджерПоПерсоналу() Тогда
        МенеджерПоПерсоналу = Истина; 
	Иначе
		МенеджерПоПерсоналу = Ложь;	
	КонецЕсли; 	
	
	ДанныеВыбора = ДанныеДляВыбораТипаЗаявки(МенеджерПоПерсоналу);
	
КонецПроцедуры 

&НаСервере
Функция РольДоступнаМенеджерПоПерсоналу()   
	
	Возврат Пользователи.РолиДоступны("ЭП_МенеджерПоПерсоналу", Пользователи.ТекущийПользователь());  
	
КонецФункции

&НаКлиенте
Процедура ТипЗаявкиОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка) 
	//
	//СтандартнаяОбработка = Ложь;
	//Объект.ТипЗаявки = ВыбранноеЗначение; 
	//
	//ПоказатьФормуЗаявкиВыбранногоТипа();
		
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФормуЗаявкиВыбранногоТипа()
	
	Для каждого Элемент Из Элементы.ИнформацияПоТипуЗаявки.ПодчиненныеЭлементы Цикл
		Элемент.Видимость = ЛОЖЬ;
	КонецЦикла;		
	
	Если Строка(Объект.ТипЗаявки) = Элементы.ЗапросНаОбслуживание.Заголовок Тогда
		Элементы.ЗапросНаОбслуживание.Видимость = ИСТИНА; 
	ИначеЕсли Строка(Объект.ТипЗаявки) = Элементы.УвольнениеСотрудника.Заголовок Тогда
		Элементы.УвольнениеСотрудника.Видимость = ИСТИНА;	
	ИначеЕсли Строка(Объект.ТипЗаявки) = Элементы.НеработоспособностьСервиса.Заголовок Тогда
		Элементы.НеработоспособностьСервиса.Видимость = ИСТИНА;
	ИначеЕсли Строка(Объект.ТипЗаявки) = Элементы.ОрганизацияРабочегоМеста.Заголовок Тогда 
		Элементы.ОрганизацияРабочегоМеста.Видимость = ИСТИНА;  
	ИначеЕсли Строка(Объект.ТипЗаявки) = Элементы.ПредоставлениеДоступаККонтуру.Заголовок Тогда
		Элементы.ПредоставлениеДоступаККонтуру.Видимость = ИСТИНА; 
	ИначеЕсли Строка(Объект.ТипЗаявки) = Элементы.УвольнениеСотрудника.Заголовок Тогда
		Элементы.УвольнениеСотрудника.Видимость = ИСТИНА;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)  
	
	РедактируемыйОбъект = РеквизитФормыВЗначение("Объект");
	ДанныеХранилищаЧтоЯХочу = РедактируемыйОбъект.ЧтоЯХочу.Получить();
	Если ТипЗнч(ДанныеХранилищаЧтоЯХочу) = Тип("ФорматированныйДокумент") Тогда
		ОписаниеЧтоЯХочу = ДанныеХранилищаЧтоЯХочу;
	Иначе
		ОписаниеЧтоЯХочу = Новый ФорматированныйДокумент;
	КонецЕсли;
	
	ДанныеХранилищаЧтоЯДелаю = РедактируемыйОбъект.ЧтоЯДелаю.Получить();
	Если ТипЗнч(ДанныеХранилищаЧтоЯДелаю) = Тип("ФорматированныйДокумент") Тогда
		ОписаниеЧтоЯДелаю = ДанныеХранилищаЧтоЯДелаю;
	Иначе
		ОписаниеЧтоЯДелаю = Новый ФорматированныйДокумент;
	КонецЕсли;
	
	ДанныеХранилищаЧтоЯПолучаю = РедактируемыйОбъект.ЧтоЯПолучаю.Получить();
	Если ТипЗнч(ДанныеХранилищаЧтоЯПолучаю) = Тип("ФорматированныйДокумент") Тогда
		ОписаниеЧтоЯПолучаю = ДанныеХранилищаЧтоЯПолучаю;
	Иначе
		ОписаниеЧтоЯПолучаю = Новый ФорматированныйДокумент;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТипЗаявкиПриИзменении(Элемент)   
	
	Для каждого Элемент Из Элементы.ИнформацияПоТипуЗаявки.ПодчиненныеЭлементы Цикл
		Элемент.Видимость = ЛОЖЬ;
	КонецЦикла;		
	
	Если Строка(Объект.ТипЗаявки) = Элементы.ЗапросНаОбслуживание.Заголовок Тогда
		Элементы.ЗапросНаОбслуживание.Видимость = ИСТИНА; 
	ИначеЕсли Строка(Объект.ТипЗаявки) = Элементы.УвольнениеСотрудника.Заголовок Тогда
		Элементы.УвольнениеСотрудника.Видимость = ИСТИНА;	
	ИначеЕсли Строка(Объект.ТипЗаявки) = Элементы.НеработоспособностьСервиса.Заголовок Тогда
		Элементы.НеработоспособностьСервиса.Видимость = ИСТИНА;
	ИначеЕсли Строка(Объект.ТипЗаявки) = Элементы.ОрганизацияРабочегоМеста.Заголовок Тогда 
		Элементы.ОрганизацияРабочегоМеста.Видимость = ИСТИНА;  
	ИначеЕсли Строка(Объект.ТипЗаявки) = Элементы.ПредоставлениеДоступаККонтуру.Заголовок Тогда
		Элементы.ПредоставлениеДоступаККонтуру.Видимость = ИСТИНА; 
	ИначеЕсли Строка(Объект.ТипЗаявки) = Элементы.УвольнениеСотрудника.Заголовок Тогда
		Элементы.УвольнениеСотрудника.Видимость = ИСТИНА;
	КонецЕсли; 

КонецПроцедуры

#КонецОбласти

