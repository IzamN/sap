&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Задача = Параметры.Задача;
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь(); 
	ОбзорЗаявкиHTML = ЭП_РаботаСЗаявкамиСервер.СформироватьОбзорЗаявки(Объект.Ссылка);
	СформироватьТекстПротоколаВзаимодействия();
	ИзменитьДоступККомандам();
	Если ТекущийПользователь = Объект.Контролирующий Тогда
		Элементы.ИзменитьИсполнителя.Видимость = Истина;
	КонецЕсли
	
КонецПроцедуры 

&НаСервере 
Процедура ИзменитьДоступККомандам() 
	
	Если Задача.ТочкаМаршрута = БизнесПроцессы.ЭП_Заявки.ТочкиМаршрута.ВыполнениеЗаявки Тогда
		
		Элементы.ГруппаКомандыВыполнения.Видимость = Истина; 
		Элементы.ГруппаКомандыСогласования.Видимость = Ложь; 
		Если Объект.СтатусЗаявки = Перечисления.ЭП_СтатусыЗаявок.ВОчереди Тогда
			Элементы.ВзятьВРаботу.Доступность = Истина;
			Элементы.ВыполнитьЗаявку.Доступность = Ложь;
			Элементы.ОтменитьЗаявку.Доступность = Ложь;
		ИначеЕсли Объект.СтатусЗаявки = Перечисления.ЭП_СтатусыЗаявок.ВРаботе Тогда				
			Элементы.ВзятьВРаботу.Доступность = Ложь;
			Элементы.ВыполнитьЗаявку.Доступность = Истина;
			Элементы.ОтменитьЗаявку.Доступность = Истина;
		Иначе 
			Элементы.ВзятьВРаботу.Доступность = Ложь;
			Элементы.ВыполнитьЗаявку.Доступность = Ложь;
			Элементы.ОтменитьЗаявку.Доступность = Ложь;
		КонецЕсли;
		
		Если Объект.Контролирующий = ТекущийПользователь и (Объект.СтатусЗаявки = Перечисления.ЭП_СтатусыЗаявок.ВРаботе или Объект.СтатусЗаявки = Перечисления.ЭП_СтатусыЗаявок.ВОчереди) Тогда
			Элементы.ИзменитьИсполнителя.Доступность = Истина;
		Иначе
			Элементы.ИзменитьИсполнителя.Доступность = Ложь;
		КонецЕсли;
		
	ИначеЕсли Задача.ТочкаМаршрута = БизнесПроцессы.ЭП_Заявки.ТочкиМаршрута.СогласованиеГД или Задача.ТочкаМаршрута = БизнесПроцессы.ЭП_Заявки.ТочкиМаршрута.СогласованиеРП Тогда 
		
		Элементы.ГруппаКомандыВыполнения.Видимость = Ложь;
		Элементы.ГруппаКомандыСогласования.Видимость = Истина;
		
		Если Задача.Выполнена Тогда 
			Элементы.Согласовать.Доступность = Ложь; 
			Элементы.НеСогласовать.Доступность = Ложь;
		Иначе
			Элементы.Согласовать.Доступность = Истина; 
			Элементы.НеСогласовать.Доступность = Истина; 
		КонецЕсли;

		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПеречитатьФормуПрограммно() 
	
	ЭтаФорма.Прочитать();
	ОбзорЗаявкиHTML = ЭП_РаботаСЗаявкамиСервер.СформироватьОбзорЗаявки(Объект.Ссылка);
	СформироватьТекстПротоколаВзаимодействия();
	ИзменитьДоступККомандам();
	Если ТекущийПользователь = Объект.Контролирующий Тогда
		Элементы.ИзменитьИсполнителя.Видимость = Истина;
	КонецЕсли
	
КонецПроцедуры

#Область ПротоколВзаимодействия 

&НаСервере
Процедура СформироватьТекстПротоколаВзаимодействия()
	
	ПротоколВзаимодействия = 
		"<!DOCTYPE html>
		|<html>
		| <head>
		|  <meta charset=""utf-8"">
		|<style type=""text/css"">
		|.users {
		|	font-size: 10px;
		|	font-family: Arial, Helvetica, sans-serif;
		|	color: #afafaf;
		|}
		|.commentLeft {
		|	font-size: 14px;
		|	font-family: Arial, Helvetica, sans-serif;
		|	color: #484848;
		|	background-color: #eeffda;
		|	padding-top: 7px;
		|	padding-bottom: 8px;
		|	padding-left: 10px;
		|	padding-right: 15px;
		|	margin-left: 10%;
		|}
		|.commentRight {
		|	font-size: 14px;
		|	font-family: Arial, Helvetica, sans-serif;
		|	color: #484848;
		|	background-color: #ededed;
		|	padding-top: 7px;
		|	padding-bottom: 8px;
		|	padding-left: 10px;
		|	padding-right: 15px;
		|	margin-right: 10%; 
		|}
		|.status {
		|	font-size: 10px;
		|	font-family: Arial, Helvetica, sans-serif;
		|	color: #afafaf;
		|	width: 50%;
		|	float: left;
		|}
		|.text {
		|	padding-top: 7px;
		|	padding-bottom: 2px;
		|}
		|.date {
		|	font-size: 10px;
		|	font-family: Arial, Helvetica, sans-serif;
		|	color: #afafaf;
		|	text-align: right;
		|	margin-right: 30px;
		|	padding-top: 5px;
		|}
		|.time {
		|	font-size: 10px;
		|	font-family: Arial, Helvetica, sans-serif;
		|	color: #afafaf;
		|	text-align: right;
		|	padding: 0px;
		|}
		|.edit {
		|	border: none;
		|	margin-left: 5px;
		|}
		|.marginLeft {
		|	margin-left: 10%;
		|	margin-bottom: 1px;
		|}
		|.marginRight {
		|	margin-right: 10%;
		|	margin-bottom: 1px;
		|}
		|.mb {
		|margin-bottom: 15px;
		|}
		|a.user:link {
		|	color: #828282;
		|	margin-right: 7px;
		|	margin-left: 10px;
		|	padding-left: 1px;
		|}
		|a.user:visited {
		|	color: #828282;
		|	margin-right: 7px;
		|	margin-left: 10px;
		|	padding-left: 1px;
		|}
		|a.user2:link {
		|	color: #828282;
		|	margin-right: 7px;
		|	padding-left: 40px;
		|}
		|a.user2:visited {
		|	color: #828282;
		|	margin-right: 7px;
		|	padding-left: 1px;
		|	margin-left: 4px;
		|}
		|</style>
		| </head>
		| <body>";
	
	КартинкаНаправлена    = ПоместитьВоВременноеХранилище(БиблиотекаКартинок.КомуНаправлена, УникальныйИдентификатор);
	КартинкаРедактировать = ПоместитьВоВременноеХранилище(БиблиотекаКартинок.Редактировать, УникальныйИдентификатор);
	
	СтрокаСсылкаИзменить = "<a href=""#СсылкаИзменить"">%СсылкаИзменить%</a>";
	СтрокаСсылкаИзменить = СтрЗаменить(СтрокаСсылкаИзменить, "%СсылкаИзменить%", НСтр("ru = 'изменить комментарий'"));
	
	КоличествоСтрок = Объект.ПротоколВзаимодействия.Количество();
	Инд = КоличествоСтрок - 1;
	
	Пока Инд >= 0 Цикл
		
		СтрокаПротокол = Объект.ПротоколВзаимодействия.Получить(Инд);
		Инд = Инд -1;
		
		ТекстПорученияПротокола = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(СтрокаПротокол.ТекстСообщения, "");
		ТекстПорученияПротокола = СтрЗаменить(ТекстПорученияПротокола, Символы.ПС, "<br>");
		
		Если СтрокаПротокол.Автор <> ТекущийПользователь Тогда
			ИмяСтиляПользователи = "marginRight";
			ИмяСтиляКомментарий  = "commentRight mb";
		Иначе
			ИмяСтиляПользователи = "marginLeft";
			ИмяСтиляКомментарий  = "commentLeft mb";
		КонецЕсли;
		
		ТекстАвтор = СтрШаблон("<a href=""%1"" class=""user"">%2</a>",
		                                ПолучитьНавигационнуюСсылку(СтрокаПротокол.Автор),
		                                ПредставлениеПользователя(СтрокаПротокол.Автор, ТекущийПользователь, НСтр("ru = 'Я'")));
						
		ТекстКомуНаправлена = СтрШаблон("<a href=""%1"" class=""user"">%2</a>",
		                                ПолучитьНавигационнуюСсылку(СтрокаПротокол.ИсполнительЗадачи),
		                                ПредставлениеПользователя(СтрокаПротокол.ИсполнительЗадачи, ТекущийПользователь, НСтр("ru = 'Мне'")));
				
		СтрокаПользователи = "<div class=""users"">" + ТекстАвтор;  
						
		Если ЗначениеЗаполнено(СтрокаПротокол.ИсполнительЗадачи) Тогда
			СтрокаПользователи = СтрокаПользователи + "<IMG src=""" + КартинкаНаправлена + """>" + ТекстКомуНаправлена +"</div>";
		Иначе
			СтрокаПользователи = СтрокаПользователи +"</div>";
		КонецЕсли;
		
		ПротоколВзаимодействия = ПротоколВзаимодействия + " 
			|<div class=""" + ИмяСтиляПользователи + """>" + СтрокаПользователи + "</div>";
		
		
		Если СтрокаПротокол.НомерСтроки = КоличествоСтрок И СтрокаПротокол.Автор = ТекущийПользователь Тогда
			СтрокаИзменить = "<a  href=""#СсылкаИзменить""><img class = ""edit"" src="""+ КартинкаРедактировать + """></a>";
		Иначе
			СтрокаИзменить = "";
		КонецЕсли;


		СтрокаСтатус    = "<div class=""status"">" + СтрокаПротокол.Статус +"</div>";
		ДатаПоручения   = ПредставлениеДаты(СтрокаПротокол.Дата);
		СтрокаДата      = "<div class=""time"">"   + ДатаПоручения + "</div>";
		СтрокаПоручение = "<div class=""text"">"   + ТекстПорученияПротокола + СтрокаИзменить + "</div>";
		
		ПротоколВзаимодействия = ПротоколВзаимодействия + "
			|<div class=""" + ИмяСтиляКомментарий + """>" + СтрокаСтатус + СтрокаДата + СтрокаПоручение + "</div>";
		
	КонецЦикла;
	
	ПротоколВзаимодействия = ПротоколВзаимодействия 
		+ "
		|</body>
		|</html>";
		
КонецПроцедуры

&НаСервере
Функция ПредставлениеПользователя(Пользователь, ТекущийПользователь, ПредставлениеЕслиТекущий)
	
	Если Пользователь = ТекущийПользователь Тогда
		Возврат ПредставлениеЕслиТекущий;
	Иначе
		Возврат Строка(Пользователь);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПредставлениеДаты(Дата)

	ДатаСеанса = ТекущаяДатаСеанса();
	Если НачалоДня(Дата) = НачалоДня(ДатаСеанса) Тогда 
		Возврат Формат(Дата, "ДЛФ=T");
	ИначеЕсли НачалоДня(Дата) = НачалоДня(ДатаСеанса) - 86400 Тогда
		Возврат НСтр("ru = 'Вчера'");
	Иначе
		Возврат Формат(Дата, "ДЛФ=D");
	КонецЕсли;

КонецФункции 

&НаКлиенте
Процедура ПротоколВзаимодействияHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка) 
	
	СтандартнаяОбработка = Ложь;
	
	Если ДанныеСобытия.Href = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Найти(ДанныеСобытия.Href, "#СсылкаИзменить") > 0 Тогда
		Если Объект.ПротоколВзаимодействия.Количество() > 0 Тогда
			ИзменитьПоследнееПоручение();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	ПерейтиПоНавигационнойСсылке(ДанныеСобытия.Href);
	
КонецПроцедуры

&НаСервере
Процедура ОтправитьСообщениеНаСервере()

	КоличествоСтрокПротокола = Объект.ПротоколВзаимодействия.Количество();
	Если КоличествоСтрокПротокола > 0  Тогда
		ПоследняяСтрока = Объект.ПротоколВзаимодействия.Получить(КоличествоСтрокПротокола - 1);
		СтатусПоСтрокеПротокола = ПоследняяСтрока.Статус;
		НаправленаПоСтрокеПротокола = ПоследняяСтрока.ИсполнительЗадачи;
		ПоследнееПоручениеПротокола = ПоследняяСтрока.ТекстСообщения;
	КонецЕсли;
	
	Если НЕ Объект.СтатусЗаявки = СтатусПоСтрокеПротокола или 
		(НЕ ПоследнееПоручениеПротокола = ТекстСообщения И НЕ ТекстСообщения = "") Тогда
		ЭП_РаботаСЗаявкамиСервер.ДобавитьЗаписьВПротокол(Объект, ТекущийПользователь, СокрЛП(ТекстСообщения)); 
	КонецЕсли;
	
	ЭтаФорма.Записать();

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСообщение(Команда)
	
	ОтправитьСообщениеНаСервере();
	СформироватьТекстПротоколаВзаимодействия();
	ТекстСообщения = "";  
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПоследнееПоручение()

	СтрокаТЧ = Объект.ПротоколВзаимодействия[Объект.ПротоколВзаимодействия.Количество() - 1];
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Автор", СтрокаТЧ.Автор);
	ПараметрыФормы.Вставить("Дата", СтрокаТЧ.Дата);
	ПараметрыФормы.Вставить("Статус", СтрокаТЧ.Статус);
	ПараметрыФормы.Вставить("ИсполнительЗадачи", СтрокаТЧ.ИсполнительЗадачи);
	ПараметрыФормы.Вставить("ТекстСообщения", СтрокаТЧ.ТекстСообщения);
	
	Структура = Новый Структура("СтрокаПротокола", СтрокаТЧ);
	 
	ОписаниеОповещения = Новый ОписаниеОповещения("ПротоколВыборЗавершение", ЭтотОбъект, Структура);
	
	ОткрытьФорму("БизнесПроцесс.ЭП_Заявки.Форма.ФормаСтрокаПротокола", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПротоколВыборЗавершение(РезультатДействия, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(РезультатДействия) = Тип("Строка") Тогда
		
		СтрокаТЧ = ДополнительныеПараметры.СтрокаПротокола;
		СтрокаТЧ.ТекстСообщения = РезультатДействия;
		
		СформироватьТекстПротоколаВзаимодействия();
		
		Модифицированность = Истина;
		Записать();
		
	КонецЕсли;
	
КонецПроцедуры 

#КонецОбласти

#Область КомандыНаФорме 

&НаКлиенте
Процедура Обновить(Команда)
	
	ПеречитатьФормуПрограммно();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИсполнителя(Команда)
	
	Оповещение = Новый ОписаниеОповещения("УстановитьНовогоИсполнителя", ЭтотОбъект);
	ОткрытьФорму("БизнесПроцесс.ЭП_Заявки.Форма.ФормаВыбораСистемногоАдминистратора",,,,,,Оповещение); 
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьНовогоИсполнителя(Результат, ДополнительныеПараметры) экспорт 
	
	Если Результат <> Неопределено и Результат <> Объект.Исполнитель Тогда
		ЭП_РаботаСЗаявкамиСервер.ИзменитьИсполнителяЗаявки(Объект.Ссылка, Задача, Результат, ТекущийПользователь); 
		ПеречитатьФормуПрограммно();
	КонецЕсли; 
	
	
КонецПроцедуры

&НаКлиенте
Процедура ВзятьВРаботу(Команда)
	
	ЭП_РаботаСЗаявкамиСервер.ДействияСЗаявкой(Объект.Ссылка, ТекущийПользователь, ПредопределенноеЗначение("Перечисление.ЭП_СтатусыЗаявок.ВРаботе"), " взял(а) в работу.", Ложь);
	ПеречитатьФормуПрограммно();
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыполнитьЗаявку(Команда)  
	
	ЭП_РаботаСЗаявкамиСервер.ДействияСЗаявкой(Объект.Ссылка, ТекущийПользователь, ПредопределенноеЗначение("Перечисление.ЭП_СтатусыЗаявок.НаПроверке"), " отправил(а) на проверку.", Истина);	
	ПеречитатьФормуПрограммно(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьЗаявку(Команда)
	
	ЭП_РаботаСЗаявкамиСервер.ДействияСЗаявкой(Объект.Ссылка, ТекущийПользователь, ПредопределенноеЗначение("Перечисление.ЭП_СтатусыЗаявок.ЗапросНаОтмену"), " отправил(а) запрос на отмену.", Ложь);	
	ПеречитатьФормуПрограммно();
	
КонецПроцедуры

&НаКлиенте
Процедура Согласовать(Команда) 
	
	Свойства = Новый Структура("СогласиеНаВыполнениеЗаявки", Истина);
	ЭП_РаботаСЗаявкамиСервер.ДействияСЗаявкой(Объект.Ссылка, ТекущийПользователь, ПредопределенноеЗначение("Перечисление.ЭП_СтатусыЗаявок.ВОчереди"), " дал(а) согласие на выполнение.", Истина, Свойства);	
	ПеречитатьФормуПрограммно(); 
	
КонецПроцедуры

&НаКлиенте
Процедура НеСогласовать(Команда)
	
	Свойства = Новый Структура("СогласиеНаВыполнениеЗаявки", Ложь);
	ЭП_РаботаСЗаявкамиСервер.ДействияСЗаявкой(Объект.Ссылка, ТекущийПользователь, ПредопределенноеЗначение("Перечисление.ЭП_СтатусыЗаявок.Отклонена"), " отклонил(а) заявку.", Истина, Свойства);	
	ПеречитатьФормуПрограммно(); 
	
КонецПроцедуры

#КонецОбласти





