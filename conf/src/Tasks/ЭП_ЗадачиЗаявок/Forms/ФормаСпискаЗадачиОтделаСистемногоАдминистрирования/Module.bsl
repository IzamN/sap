&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка) 
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	ЗаполнитьСписок(ОтборПоСтатусу, ОтборПоТипу, ОтборПоИсполнителю, ПоказатьВсе); 
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОЖЬ; 
	ТекущаяЗадача = ВыбраннаяСтрока;
	ТекущаяЗаявка = ПолучитьЗаявку(ТекущаяЗадача);
    ПараметрыФормы = Новый Структура("Ключ, Задача", ТекущаяЗаявка, ТекущаяЗадача);
	ОткрытьФорму("БизнесПроцесс.ЭП_Заявки.Форма.ФормаЗаявкиПросмотр",ПараметрыФормы);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокПриАктивизацииСтрокиНаСервере(Заявка)
	
	Возврат ЭП_РаботаСЗаявкамиСервер.СформироватьОбзорЗаявки(Заявка);
	
КонецФункции 

&НаСервере
Функция ПолучитьЗаявку(Задача)
	
	Если ЗначениеЗаполнено(Задача) Тогда
		Возврат Задача.БизнесПроцесс;  
	Иначе
		БизнесПроцессы.ЭП_Заявки.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ФормированиеОбзораЗаявки();
		
КонецПроцедуры 

&НаКлиенте
Процедура ФормированиеОбзораЗаявки()  
	
	ТекущаяЗадача = Элементы.Список.ТекущаяСтрока;
	ТекущаяЗаявка = ПолучитьЗаявку(ТекущаяЗадача);
	
	Если Не ТекущаяЗадача.Пустая() Тогда 
		
		//Если ТекущаяЗаявка <> Неопределено Тогда 
			ОбзорЗаявкиHTML = СписокПриАктивизацииСтрокиНаСервере(ТекущаяЗаявка); 
			СформироватьТекстПротоколаВзаимодействия();
			ИзменитьДоступККомандам();
		//КонецЕсли; 
	Иначе 
		
		ОбзорЗаявкиHTML = Неопределено; 
		СформироватьТекстПротоколаВзаимодействия();
		ИзменитьДоступККомандам();	
	КонецЕсли;
	
КонецПроцедуры 	

&НаСервере 
Процедура ИзменитьДоступККомандам() 
	
	
	
	Если ТекущаяЗаявка.СтатусЗаявки = Перечисления.ЭП_СтатусыЗаявок.ВОчереди Тогда
		Элементы.ВзятьВРаботу.Доступность = Истина;
		Элементы.ВыполнитьЗаявку.Доступность = Ложь;
		Элементы.ОтменитьЗаявку.Доступность = Ложь; 
		Элементы.ИзменитьИсполнителя.Доступность = Истина;
	ИначеЕсли ТекущаяЗаявка.СтатусЗаявки = Перечисления.ЭП_СтатусыЗаявок.ВРаботе  Тогда  
		Элементы.ВзятьВРаботу.Доступность = Ложь;
		Элементы.ВыполнитьЗаявку.Доступность = Истина;
		Элементы.ОтменитьЗаявку.Доступность = Истина;
		Элементы.ИзменитьИсполнителя.Доступность = Истина;
	Иначе 
		Элементы.ВыполнитьЗаявку.Доступность = Ложь;
		Элементы.ОтменитьЗаявку.Доступность = Ложь;
		Элементы.ВзятьВРаботу.Доступность = Ложь;
		Элементы.ИзменитьИсполнителя.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры


#Область КомандыНаФорме

&НаКлиенте
Процедура ВзятьВРаботу(Команда)
	
	ЭП_РаботаСЗаявкамиСервер.ДействияСЗаявкой(ТекущаяЗаявка, ТекущийПользователь, ПредопределенноеЗначение("Перечисление.ЭП_СтатусыЗаявок.ВРаботе"), " взял(а) в работу.", Ложь);	
	Элементы.Список.Обновить();
	ИзменитьДоступККомандам();
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыполнитьЗаявку(Команда) 
	
	ЭП_РаботаСЗаявкамиСервер.ДействияСЗаявкой(ТекущаяЗаявка, ТекущийПользователь, ПредопределенноеЗначение("Перечисление.ЭП_СтатусыЗаявок.НаПроверке"), " отправил(а) на проверку.", Истина);	
	Элементы.Список.Обновить();
	ИзменитьДоступККомандам(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьЗаявку(Команда)
	
	ЭП_РаботаСЗаявкамиСервер.ДействияСЗаявкой(ТекущаяЗаявка, ТекущийПользователь, ПредопределенноеЗначение("Перечисление.ЭП_СтатусыЗаявок.ЗапросНаОтмену"), " отправил(а) запрос на отмену.", Ложь);	
	Элементы.Список.Обновить();
	ИзменитьДоступККомандам();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФорму(Команда)
	
	Элементы.Список.Обновить();
	ИзменитьДоступККомандам(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИсполнителя(Команда)
	
	Оповещение = Новый ОписаниеОповещения("УстановитьНовогоИсполнителя", ЭтотОбъект);
	ОткрытьФорму("БизнесПроцесс.ЭП_Заявки.Форма.ФормаВыбораСистемногоАдминистратора",,,,,,Оповещение);
		
КонецПроцедуры

&НаСервере
Процедура УстановитьНовогоИсполнителя(Результат, ДополнительныеПараметры) экспорт 
	
	Если ТекущаяЗадача <> Неопределено и Результат <> Неопределено и Результат <> ТекущаяЗадача.Исполнитель Тогда
 
		ЭП_РаботаСЗаявкамиСервер.ИзменитьИсполнителяЗаявки(ТекущаяЗаявка, ТекущаяЗадача, Результат, ТекущийПользователь);
		Элементы.Список.Обновить();
		ОбзорЗаявкиHTML = ЭП_РаботаСЗаявкамиСервер.СформироватьОбзорЗаявки(ТекущаяЗаявка);
    	ИзменитьДоступККомандам();

	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Отборы

&НаКлиенте
Процедура ОтборПоСтатусуДобавлениеМножественныхЗначений(Элемент, Значения, СтандартнаяОбработка) 
	
	МассивСтатусов = Новый Массив();
	Для каждого Статус из ОтборПоСтатусу Цикл
		МассивСтатусов.Добавить(Статус.Значение);
	КонецЦикла;
	МассивСтатусов.Добавить(Значения[0]);
	ИсторияИзмененияСтатусов.Добавить(ИсторияИзмененияСтатусов.Количество(),Значения[0]);
	ЗаполнитьСписок(МассивСтатусов, ОтборПоТипу, ОтборПоИсполнителю, ПоказатьВсе);  
	ФормированиеОбзораЗаявки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоСтатусуУдалениеМножественныхЗначений(Элемент, Идентификаторы, СтандартнаяОбработка) 
	
	МассивСтатусов = Новый Массив(); 
	УдалитьСтатус = ИсторияИзмененияСтатусов[Идентификаторы[0]].Представление;
	Для каждого Статус из ОтборПоСтатусу Цикл
		Если Строка(Статус.Значение) <> УдалитьСтатус Тогда
			МассивСтатусов.Добавить(Статус.Значение);
		КонецЕсли;
	КонецЦикла;
	ЗаполнитьСписок(МассивСтатусов, ОтборПоТипу, ОтборПоИсполнителю, ПоказатьВсе);
	ФормированиеОбзораЗаявки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоТипуДобавлениеМножественныхЗначений(Элемент, Значения, СтандартнаяОбработка) 
	
	МассивТипов = Новый Массив();
	Для каждого Тип из ОтборПоТипу Цикл
		МассивТипов.Добавить(Тип.Значение);
	КонецЦикла;
	МассивТипов.Добавить(Значения[0]);
	ИсторияИзмененияТипов.Добавить(ИсторияИзмененияТипов.Количество(),Значения[0]);
	ЗаполнитьСписок(ОтборПоСтатусу, МассивТипов, ОтборПоИсполнителю, ПоказатьВсе); 
	ФормированиеОбзораЗаявки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоТипуУдалениеМножественныхЗначений(Элемент, Идентификаторы, СтандартнаяОбработка) 
	
	МассивТипов = Новый Массив(); 
	УдалитьТип = ИсторияИзмененияТипов[Идентификаторы[0]].Представление;
	Для каждого Тип из ОтборПоТипу Цикл
		Если Строка(Тип.Значение) <> УдалитьТип Тогда
			МассивТипов.Добавить(Тип.Значение);
		КонецЕсли;
	КонецЦикла; 
	ЗаполнитьСписок(ОтборПоСтатусу, МассивТипов, ОтборПоИсполнителю, ПоказатьВсе); 
	ФормированиеОбзораЗаявки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоИсполнителюДобавлениеМножественныхЗначений(Элемент, Значения, СтандартнаяОбработка)
		
	МассивИсполнителей = Новый Массив();
	Для каждого Исполнитель из ОтборПоИсполнителю Цикл
		МассивИсполнителей.Добавить(Исполнитель.Значение);
	КонецЦикла;
	МассивИсполнителей.Добавить(Значения[0]);
	ИсторияИзмененияИсполнителей.Добавить(ИсторияИзмененияИсполнителей.Количество(), Значения[0]);
	ЗаполнитьСписок(ОтборПоСтатусу, ОтборПоТипу, МассивИсполнителей, ПоказатьВсе);
	ФормированиеОбзораЗаявки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоИсполнителюУдалениеМножественныхЗначений(Элемент, Идентификаторы, СтандартнаяОбработка) 
	
	МассивИсполнителей = Новый Массив(); 
	УдалитьИсполнителя = ИсторияИзмененияИсполнителей[Идентификаторы[0]].Представление;
	Для каждого Исполнитель из ОтборПоИсполнителю Цикл
		Если Строка(Исполнитель.Значение) <> УдалитьИсполнителя Тогда
			МассивИсполнителей.Добавить(Исполнитель.Значение);
		КонецЕсли;
	КонецЦикла; 
	ЗаполнитьСписок(ОтборПоСтатусу, ОтборПоТипу, МассивИсполнителей, ПоказатьВсе); 
	ФормированиеОбзораЗаявки();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписок(ОтборПоСтатусу, ОтборПоТипу, ОтборПоИсполнителю, ПоказатьВсе)
	
	ЭтаФорма.Список.Отбор.Элементы.Очистить();
	
	ГруппаОтбора = Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТипЗаявки");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.Использование = ЗначениеЗаполнено(ОтборПоТипу);
	ЭлементОтбора.ПравоеЗначение = ОтборПоТипу;
		
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтатусЗаявки");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.Использование = ЗначениеЗаполнено(ОтборПоСтатусу);
	ЭлементОтбора.ПравоеЗначение = ОтборПоСтатусу;
	
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Исполнитель");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.Использование = ЗначениеЗаполнено(ОтборПоИсполнителю);
	ЭлементОтбора.ПравоеЗначение = ОтборПоИсполнителю;
	
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Выполнена");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Не ПоказатьВсе;
	ЭлементОтбора.ПравоеЗначение = ПоказатьВсе;
	
	//Список.ТекстЗапроса = "ВЫБРАТЬ
	//|	ЭП_Заявки.Номер КАК Номер,
	//|	ЭП_Заявки.ТипЗаявки КАК ТипЗаявки,
	//|	ЭП_Заявки.СтатусЗаявки КАК СтатусЗаявки,
	//|	ЭП_Заявки.Заявитель КАК Заявитель,
	//|	ВЫБОР
	//|		КОГДА ЭП_ЗадачиЗаявок.Исполнитель = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	//|			ТОГДА ЭП_ЗадачиЗаявок.Отдел
	//|		ИНАЧЕ ЭП_ЗадачиЗаявок.Исполнитель
	//|	КОНЕЦ КАК Исполнитель
	//|ИЗ
	//|	Задача.ЭП_ЗадачиЗаявок КАК ЭП_ЗадачиЗаявок
	//|		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.ЭП_Заявки КАК ЭП_Заявки
	//|		ПО ЭП_ЗадачиЗаявок.БизнесПроцесс = ЭП_Заявки.Ссылка
	//|ГДЕ
	//|	(&НеИспользоватьСтатусыЗаявок
	//|			ИЛИ ЭП_Заявки.СтатусЗаявки В (&МассивСтатусовЗаявки))
	//|	И (&НеИспользоватьОтборПоИсполнителю
	//|			ИЛИ ЭП_ЗадачиЗаявок.Исполнитель В (&МассивИсполнителей))
	//|	И (&НеИспользоватьТипыЗаявок
	//|			ИЛИ ЭП_Заявки.ТипЗаявки В (&МассивТиповЗаявки))
	//|	И ЭП_ЗадачиЗаявок.ТочкаМаршрута = ЗНАЧЕНИЕ(БизнесПроцесс.ЭП_Заявки.ТочкаМаршрута.ВыполнениеЗаявки)
	//|   И (&ПоказатьВсе
	//|			ИЛИ не ЭП_ЗадачиЗаявок.Выполнена)
	//|"; 
	//
	//Список.Параметры.УстановитьЗначениеПараметра("МассивСтатусовЗаявки", ОтборПоСтатусу);
	//Список.Параметры.УстановитьЗначениеПараметра("МассивТиповЗаявки", ОтборПоТипу);
	//Список.Параметры.УстановитьЗначениеПараметра("МассивИсполнителей", ОтборПоИсполнителю);
	//
	//Если ОтборПоСтатусу.Количество() = 0 Тогда
	//	Список.Параметры.УстановитьЗначениеПараметра("НеИспользоватьСтатусыЗаявок", Истина);
	//Иначе
	//	Список.Параметры.УстановитьЗначениеПараметра("НеИспользоватьСтатусыЗаявок", Ложь);
	//КонецЕсли;
	//
	//Если ОтборПоТипу.Количество() = 0 Тогда
	//	Список.Параметры.УстановитьЗначениеПараметра("НеИспользоватьТипыЗаявок", Истина);
	//Иначе
	//	Список.Параметры.УстановитьЗначениеПараметра("НеИспользоватьТипыЗаявок", Ложь);
	//КонецЕсли;
	//
	//Если ОтборПоИсполнителю.Количество() = 0 Тогда
	//	Список.Параметры.УстановитьЗначениеПараметра("НеИспользоватьОтборПоИсполнителю", Истина);
	//Иначе
	//	Список.Параметры.УстановитьЗначениеПараметра("НеИспользоватьОтборПоИсполнителю", Ложь);
	//КонецЕсли; 
	//
	//Если ПоказатьВсе Тогда	
	//	Список.Параметры.УстановитьЗначениеПараметра("ПоказатьВсе", Истина);
	//Иначе
	//	Список.Параметры.УстановитьЗначениеПараметра("ПоказатьВсе", Ложь);	
	//КонецЕсли;

	
КонецПроцедуры

&НаСервере
Функция ДанныеДляВыбораДляИсполнителя()  
	
	ДанныеВыбора = Новый СписокЗначений();
	Текст = "ВЫБРАТЬ
	        |	ЭП_НастройкиАдресацииДляВыполненияЗаявок.Пользователь КАК Пользователь
	        |ИЗ
	        |	РегистрСведений.ЭП_НастройкиАдресацииДляВыполненияЗаявок КАК ЭП_НастройкиАдресацииДляВыполненияЗаявок
	        |ГДЕ
	        |	ЭП_НастройкиАдресацииДляВыполненияЗаявок.ТипУчастникаЗаявок = ЗНАЧЕНИЕ(Перечисление.ЭП_ИсполнителиЗаявок.СистемныйАдминистратор)";
	Запрос = Новый Запрос();
	Запрос.Текст = Текст;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		 ДанныеВыбора.Добавить(Выборка.Пользователь);
	 КонецЦикла;
	 Возврат  ДанныеВыбора;
	 
КонецФункции

&НаКлиенте
Процедура ОтборПоИсполнителюНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;  
	ДанныеВыбора = ДанныеДляВыбораДляИсполнителя();

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВсеПриИзменении(Элемент)  
	
	ЗаполнитьСписок(ОтборПоСтатусу, ОтборПоТипу, ОтборПоИсполнителю, ПоказатьВсе);
    ФормированиеОбзораЗаявки();
	
КонецПроцедуры

#КонецОбласти  

#Область ПротоколВзаимодействия

&НаСервере
Процедура СформироватьТекстПротоколаВзаимодействия()
	
	ПротоколВзаимодействия = 
		"<!DOCTYPE html>
		|<html>
		| <head>
		|  <meta charset=""utf-8"">
		|<style type=""text/css"">
		|.users {
		|	font-size: 10px;
		|	font-family: Arial, Helvetica, sans-serif;
		|	color: #afafaf;
		|}
		|.commentLeft {
		|	font-size: 14px;
		|	font-family: Arial, Helvetica, sans-serif;
		|	color: #484848;
		|	background-color: #eeffda;
		|	padding-top: 7px;
		|	padding-bottom: 8px;
		|	padding-left: 10px;
		|	padding-right: 15px;
		|	margin-left: 10%;
		|}
		|.commentRight {
		|	font-size: 14px;
		|	font-family: Arial, Helvetica, sans-serif;
		|	color: #484848;
		|	background-color: #ededed;
		|	padding-top: 7px;
		|	padding-bottom: 8px;
		|	padding-left: 10px;
		|	padding-right: 15px;
		|	margin-right: 10%; 
		|}
		|.status {
		|	font-size: 10px;
		|	font-family: Arial, Helvetica, sans-serif;
		|	color: #afafaf;
		|	width: 50%;
		|	float: left;
		|}
		|.text {
		|	padding-top: 7px;
		|	padding-bottom: 2px;
		|}
		|.date {
		|	font-size: 10px;
		|	font-family: Arial, Helvetica, sans-serif;
		|	color: #afafaf;
		|	text-align: right;
		|	margin-right: 30px;
		|	padding-top: 5px;
		|}
		|.time {
		|	font-size: 10px;
		|	font-family: Arial, Helvetica, sans-serif;
		|	color: #afafaf;
		|	text-align: right;
		|	padding: 0px;
		|}
		|.edit {
		|	border: none;
		|	margin-left: 5px;
		|}
		|.marginLeft {
		|	margin-left: 10%;
		|	margin-bottom: 1px;
		|}
		|.marginRight {
		|	margin-right: 10%;
		|	margin-bottom: 1px;
		|}
		|.mb {
		|margin-bottom: 15px;
		|}
		|a.user:link {
		|	color: #828282;
		|	margin-right: 7px;
		|	margin-left: 10px;
		|	padding-left: 1px;
		|}
		|a.user:visited {
		|	color: #828282;
		|	margin-right: 7px;
		|	margin-left: 10px;
		|	padding-left: 1px;
		|}
		|a.user2:link {
		|	color: #828282;
		|	margin-right: 7px;
		|	padding-left: 40px;
		|}
		|a.user2:visited {
		|	color: #828282;
		|	margin-right: 7px;
		|	padding-left: 1px;
		|	margin-left: 4px;
		|}
		|</style>
		| </head>
		| <body>";
	
	КартинкаНаправлена    = ПоместитьВоВременноеХранилище(БиблиотекаКартинок.КомуНаправлена, УникальныйИдентификатор);
	КартинкаРедактировать = ПоместитьВоВременноеХранилище(БиблиотекаКартинок.Редактировать, УникальныйИдентификатор);
	
	СтрокаСсылкаИзменить = "<a href=""#СсылкаИзменить"">%СсылкаИзменить%</a>";
	СтрокаСсылкаИзменить = СтрЗаменить(СтрокаСсылкаИзменить, "%СсылкаИзменить%", НСтр("ru = 'изменить комментарий'"));
	
	КоличествоСтрок = ТекущаяЗаявка.ПротоколВзаимодействия.Количество();
	Инд = КоличествоСтрок - 1;
	
	Пока Инд >= 0 Цикл
		
		СтрокаПротокол = ТекущаяЗаявка.ПротоколВзаимодействия.Получить(Инд);
		Инд = Инд -1;
		
		ТекстПорученияПротокола = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(СтрокаПротокол.ТекстСообщения, "");
		ТекстПорученияПротокола = СтрЗаменить(ТекстПорученияПротокола, Символы.ПС, "<br>");
		
		Если СтрокаПротокол.Автор <> ТекущийПользователь Тогда
			ИмяСтиляПользователи = "marginRight";
			ИмяСтиляКомментарий  = "commentRight mb";
		Иначе
			ИмяСтиляПользователи = "marginLeft";
			ИмяСтиляКомментарий  = "commentLeft mb";
		КонецЕсли;
		
		ТекстАвтор = СтрШаблон("<a href=""%1"" class=""user"">%2</a>",
		                                ПолучитьНавигационнуюСсылку(СтрокаПротокол.Автор),
		                                ПредставлениеПользователя(СтрокаПротокол.Автор, ТекущийПользователь, НСтр("ru = 'Я'")));
										
		ТекстКомуНаправлена = СтрШаблон("<a href=""%1"" class=""user"">%2</a>",
		                                ПолучитьНавигационнуюСсылку(СтрокаПротокол.ИсполнительЗадачи),
		                                ПредставлениеПользователя(СтрокаПротокол.ИсполнительЗадачи, ТекущийПользователь, НСтр("ru = 'Мне'")));							
										
										
		СтрокаПользователи = "<div class=""users"">" + ТекстАвтор;  
						
		Если ЗначениеЗаполнено(СтрокаПротокол.ИсполнительЗадачи) Тогда
			СтрокаПользователи = СтрокаПользователи + "<IMG src=""" + КартинкаНаправлена + """>" + ТекстКомуНаправлена +"</div>";
		Иначе
			СтрокаПользователи = СтрокаПользователи +"</div>";
		КонецЕсли;
		
		ПротоколВзаимодействия = ПротоколВзаимодействия + " 
			|<div class=""" + ИмяСтиляПользователи + """>" + СтрокаПользователи + "</div>";
		
		
		Если СтрокаПротокол.НомерСтроки = КоличествоСтрок И СтрокаПротокол.Автор = ТекущийПользователь Тогда
			СтрокаИзменить = "<a  href=""#СсылкаИзменить""><img class = ""edit"" src="""+ КартинкаРедактировать + """></a>";
		Иначе
			СтрокаИзменить = "";
		КонецЕсли;

		СтрокаСтатус    = "<div class=""status"">" + СтрокаПротокол.Статус +"</div>";
		ДатаПоручения   = ПредставлениеДаты(СтрокаПротокол.Дата);
		СтрокаДата      = "<div class=""time"">"   + ДатаПоручения + "</div>";
		СтрокаПоручение = "<div class=""text"">"   + ТекстПорученияПротокола + СтрокаИзменить + "</div>";
		
		ПротоколВзаимодействия = ПротоколВзаимодействия + "
			|<div class=""" + ИмяСтиляКомментарий + """>" + СтрокаСтатус + СтрокаДата + СтрокаПоручение + "</div>";
		
	КонецЦикла;
	
	ПротоколВзаимодействия = ПротоколВзаимодействия 
		+ "
		|</body>
		|</html>";
		
КонецПроцедуры

&НаСервере
Функция ПредставлениеПользователя(Пользователь, ТекущийПользователь, ПредставлениеЕслиТекущий)
	
	Если Пользователь = ТекущийПользователь Тогда
		Возврат ПредставлениеЕслиТекущий;
	Иначе
		Возврат Строка(Пользователь);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПредставлениеДаты(Дата)

	ДатаСеанса = ТекущаяДатаСеанса();
	
	Если НачалоДня(Дата) = НачалоДня(ДатаСеанса) Тогда 
		Возврат Формат(Дата, "ДЛФ=T");
	ИначеЕсли НачалоДня(Дата) = НачалоДня(ДатаСеанса) - 86400 Тогда
		Возврат НСтр("ru = 'Вчера'");
	Иначе
		Возврат Формат(Дата, "ДЛФ=D");
	КонецЕсли;

КонецФункции 

&НаКлиенте
Процедура ПротоколВзаимодействияHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если ДанныеСобытия.Href = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Найти(ДанныеСобытия.Href, "#СсылкаИзменить") > 0 Тогда
		Если ПротоколВзаимодействияКоличество() > 0 Тогда
			ИзменитьПоследнееПоручение();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	ПерейтиПоНавигационнойСсылке(ДанныеСобытия.Href);
	
КонецПроцедуры  

&НаСервере
Функция ПротоколВзаимодействияКоличество()
	
	Возврат ТекущаяЗаявка.ПротоколВзаимодействия.Количество();
	
КонецФункции

&НаСервере
Процедура ОтправитьСообщениеНаСервере(ЗаявкаСсылка) 
	
	Если не ЗаявкаСсылка = БизнесПроцессы.ЭП_Заявки.ПустаяСсылка() Тогда  
	    Объект = ЗаявкаСсылка.ПолучитьОбъект();
		КоличествоСтрокПротокола = Объект.ПротоколВзаимодействия.Количество();
		Если КоличествоСтрокПротокола > 0  Тогда
			ПоследняяСтрока = Объект.ПротоколВзаимодействия.Получить(КоличествоСтрокПротокола - 1);
			СтатусПоСтрокеПротокола = ПоследняяСтрока.Статус;
			НаправленаПоСтрокеПротокола = ПоследняяСтрока.ИсполнительЗадачи;
			ПоследнееПоручениеПротокола = ПоследняяСтрока.ТекстСообщения;
		КонецЕсли;
		
		Если НЕ Объект.СтатусЗаявки = СтатусПоСтрокеПротокола или 
			(НЕ ПоследнееПоручениеПротокола = ТекстСообщения И НЕ ТекстСообщения = "") Тогда
			ЭП_РаботаСЗаявкамиСервер.ДобавитьЗаписьВПротокол(Объект, ТекущийПользователь, СокрЛП(ТекстСообщения)); 
		КонецЕсли;
		Объект.Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСообщение(Команда) 
	
	ОтправитьСообщениеНаСервере(ТекущаяЗаявка);
	СформироватьТекстПротоколаВзаимодействия();
	ТекстСообщения = "";   
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПоследнееПоручение()
	
	ПараметрыФормы = ДанныеПоследнийСтрокиПротоколаВзаимодействия();	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПротоколВыборЗавершение", ЭтаФорма);
	ОткрытьФорму("БизнесПроцесс.ЭП_Заявки.Форма.ФормаСтрокаПротокола", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения);
	
КонецПроцедуры 

&НаСервере
Функция ДанныеПоследнийСтрокиПротоколаВзаимодействия()
	
	СтруктураДанных = Новый Структура;
	СтрокаТЧ = ТекущаяЗаявка.ПротоколВзаимодействия[ТекущаяЗаявка.ПротоколВзаимодействия.Количество() - 1];
	СтруктураДанных.Вставить("Автор", СтрокаТЧ.Автор);
	СтруктураДанных.Вставить("Дата", СтрокаТЧ.Дата);
	СтруктураДанных.Вставить("Статус", СтрокаТЧ.Статус);
	СтруктураДанных.Вставить("ИсполнительЗадачи", СтрокаТЧ.ИсполнительЗадачи);
	СтруктураДанных.Вставить("ТекстСообщения", СтрокаТЧ.ТекстСообщения);
	Возврат СтруктураДанных;
	
КонецФункции

&НаКлиенте
Процедура ПротоколВыборЗавершение(РезультатДействия, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(РезультатДействия) = Тип("Строка") Тогда
		
		ИзменитьПоследнееСообщение(РезультатДействия);
		СформироватьТекстПротоколаВзаимодействия();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьПоследнееСообщение(РезультатДействия)
	
	Объект = ТекущаяЗаявка.ПолучитьОбъект();
	СтрокаТЧ = Объект.ПротоколВзаимодействия[Объект.ПротоколВзаимодействия.Количество() - 1];
	СтрокаТЧ.ТекстСообщения = РезультатДействия;
	Объект.Записать();
	
КонецПроцедуры

#КонецОбласти










