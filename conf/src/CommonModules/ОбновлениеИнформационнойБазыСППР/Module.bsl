
#Область ПрограммныйИнтерфейс

#Область СведенияОБиблиотекеИлиКонфигурации

// Заполняет основные сведения о библиотеке или основной конфигурации.
// Библиотека, имя которой имя совпадает с именем конфигурации в метаданных, определяется как основная конфигурация.
// 
// Параметры:
//  Описание - Структура - сведения о библиотеке:
//
//   Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.1".
//
//   ТребуемыеПодсистемы - Массив - имена других библиотек (Строка), от которых зависит данная библиотека.
//                                  Обработчики обновления таких библиотек должны быть вызваны ранее
//                                  обработчиков обновления данной библиотеки.
//                                  При циклических зависимостях или, напротив, отсутствии каких-либо зависимостей,
//                                  порядок вызова обработчиков обновления определяется порядком добавления модулей
//                                  в процедуре ПриДобавленииПодсистем общего модуля ПодсистемыКонфигурацииПереопределяемый.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя    = "СистемаПроектированияПрикладныхРешений";
	Описание.Версия = "2.0.6.10";
	Описание.РежимВыполненияОтложенныхОбработчиков = "Параллельно";
	Описание.ПараллельноеОтложенноеОбновлениеСВерсии = "1.1.17.9";
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОбновленияИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	// Подключаются процедуры-обработчики обновления конфигурации
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыСППР.ПервыйЗапуск";
	
	// Обработчики обновления обменов данными
	ОбменДаннымиСППР.ПриДобавленииОбработчиковОбновления(Обработчики);
	
	// Обработчики обновления новых версий
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.4.2";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыСведений.ЗаписиПлана.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("3f158d1d-c878-495f-bc55-3d66593b3ea1");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.ЗаписиПлана.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.БлокируемыеОбъекты = "РегистрСведений.ЗаписиПлана";
	Обработчик.ЧитаемыеОбъекты = "РегистрСведений.ЗаписиПлана";
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.ЗаписиПлана";
	Обработчик.Комментарий = НСтр("ru = 'Добавляет в планы группировки для работ.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.0.5.2";
	Обработчик.Процедура           = "Константы.МаксимальныйПорядокПриоритетаРаботы.НачальноеЗаполнение";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.5.2";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыСведений.СостоянияЗадачПроцессов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("3f158d2d-c878-495f-bc55-3d66593b3ea1");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.СостоянияЗадачПроцессов.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.БлокируемыеОбъекты = "Справочник.ЗадачиПроцесса";
	Обработчик.ЧитаемыеОбъекты = "РегистрСведений.СостоянияЗадачПроцессов";
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.СостоянияЗадачПроцессов";
	Обработчик.Комментарий = НСтр("ru = 'Добавляет хранение рассчитанного состояния и даты готовности к выполнению.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.5.4";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыСведений.ИзмененияВВетках.ОбработатьДанныеДляПереносаИзмененийВВетки";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.ИзмененияВВетках.ЗарегистрироватьДанныеКОбработкеПереносаИзмененийВВетки";
	Обработчик.ОчередьОтложеннойОбработки = 2;
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет информацию об изменении в ветках в регистре сведений ""Изменения в ветках"".'");
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("24516ef3-d01e-4a6d-97b1-10467786316b");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.5.4";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Справочники.ОбъектыМетаданных.ОбработатьДанныеДляЗаполненияВеткиИсточника";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.ОбъектыМетаданных.ЗарегистрироватьДанныеКОбработкеЗаполненияВеткиИсточника";
	Обработчик.ОчередьОтложеннойОбработки = 3;
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет информацию о ветке-источнике в справочнике ""Объекты метаданных"".'");
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("c3323658-c47d-4ad7-abd7-0ec79d594ece");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.5.4";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Справочники.Подсистемы.ОбработатьДанныеДляЗаполненияВеткиИсточника";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.Подсистемы.ЗарегистрироватьДанныеКОбработкеЗаполненияВеткиИсточника";
	Обработчик.ОчередьОтложеннойОбработки = 4;
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет информацию о ветке-источнике в справочнике ""Подсистемы"".'");
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("70438364-4aa1-4b87-800e-3bd887d10393");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.5.4";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Справочники.КомандыОбъектовМетаданных.ОбработатьДанныеДляЗаполненияВеткиИсточника";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.КомандыОбъектовМетаданных.ЗарегистрироватьДанныеКОбработкеЗаполненияВеткиИсточника";
	Обработчик.ОчередьОтложеннойОбработки = 5;
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет информацию о ветке-источнике в справочнике ""Команды объектов метаданных"".'");
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("07d8bc90-a493-406b-94c5-edf9b4a1271c");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.5.4";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Справочники.МакетыОбъектовМетаданных.ОбработатьДанныеДляЗаполненияВеткиИсточника";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.МакетыОбъектовМетаданных.ЗарегистрироватьДанныеКОбработкеЗаполненияВеткиИсточника";
	Обработчик.ОчередьОтложеннойОбработки = 6;
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет информацию о ветке-источнике в справочнике ""Макеты объектов метаданных"".'");
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("ea54093b-abc0-488e-a830-d0171b469bf2");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.5.4";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Справочники.РеквизитыОбъектовМетаданных.ОбработатьДанныеДляЗаполненияВеткиИсточника";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.РеквизитыОбъектовМетаданных.ЗарегистрироватьДанныеКОбработкеЗаполненияВеткиИсточника";
	Обработчик.ОчередьОтложеннойОбработки = 7;
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет информацию о ветке-источнике в справочнике ""Реквизиты объектов метаданных"".'");
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("5a142dc1-eabd-4ca3-b854-a38463193e33");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.5.4";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Справочники.ФормыОбъектовМетаданных.ОбработатьДанныеДляЗаполненияВеткиИсточника";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.ФормыОбъектовМетаданных.ЗарегистрироватьДанныеКОбработкеЗаполненияВеткиИсточника";
	Обработчик.ОчередьОтложеннойОбработки = 8;
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет информацию о ветке-источнике в справочнике ""Формы объектов метаданных"".'");
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("5ade3cde-c29e-4ab5-8e95-ca1e0f258672");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.5.4";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Справочники.ПредопределенныеДанные.ОбработатьДанныеДляЗаполненияВеткиИсточника";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.ПредопределенныеДанные.ЗарегистрироватьДанныеКОбработкеЗаполненияВеткиИсточника";
	Обработчик.ОчередьОтложеннойОбработки = 9;
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет информацию о ветке-источнике в справочнике ""Предопределенные данные"".'");
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("8c617600-c4bc-4eb1-a156-62d84dfa9135");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.5.9";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Справочники.Проекты.ОбработатьДанныеДляЗаполненияНаборовСвойств";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.Проекты.ЗарегистрироватьДанныеКОбработкеЗаполненияНаборовСвойств";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Создает группы наборов свойств для справочников с доп. реквизитами.'");
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("9ba37431-3083-47d7-95f8-d7b153b27a59");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.5.10";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыСведений.РезультатыРегистрацииОшибок.ОбработатьДанныеДляЗаполненияПроекта";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.РезультатыРегистрацииОшибок.ЗарегистрироватьДанныеКОбработкеДляЗаполненияПроекта";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет измерение проект.'");
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a7af2373-e7b4-4b54-9290-021a0e039fb4");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.5.10";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыСведений.РезультатыВыполненияТестов.ОбработатьДанныеДляЗаполненияПроекта";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.РезультатыВыполненияТестов.ЗарегистрироватьДанныеКОбработкеДляЗаполненияПроекта";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет измерение проект.'");
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("71539e38-b953-47a0-ad7f-4d6c6c90fc58");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.6.2";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Справочники.ВидыПланов.ОбработатьДанныеДляПереносаВладельцевВТабличнуюЧасть";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.ВидыПланов.ЗарегистрироватьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 9;
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Переносит владельца плана в табличную часть в справочнике ""Виды планов"".'");
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("8c617600-c4bc-4eb1-a156-62d84dfa8135"); 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.6.3";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Справочники.ВидыСогласуемыхРесурсов.ОбработатьДанныеДляУстановкиПризнакаВедетсяСогласование";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.ВидыСогласуемыхРесурсов.ЗарегистрироватьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Устанавливает признак ведется согласование для справочника ""Виды планируемых ресурсов"".'");
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("8c617800-c4bc-4eb1-a156-62d84dfa8135");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.6.4";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Справочники.Проекты.ОбработатьДанныеДляЗаполненияНаборовСвойств_206";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.Проекты.ЗарегистрироватьДанныеКОбработкеЗаполненияНаборовСвойств";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Создает группы наборов свойств для справочников с доп. реквизитами.'");
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("0ebe705f-df6b-4436-a9e1-b3e61fd30d8c"); 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.6.5";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыСведений.ЭтапыПроцесса.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.ЭтапыПроцесса.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет новый реквизит ""Максимальная дата окончания этапов"" в регистре сведений ""Этапы процесса"".'");
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("71639e38-b953-47a0-ad7f-4d6c6c90fc58");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.6.8";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыСведений.Планы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.Планы.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Преобразует записи по этапам не по шаблону в записи по техническим проектам в регистре сведений ""Записи плана"".'");
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("71639e38-b953-44a0-ad7f-4d6c6c90fc58");
	
КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры

// Вызывается после завершения обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления,
//                                             сгруппированных по номеру версии.
//   ВыводитьОписаниеОбновлений - Булево - (возвращаемое значение) если установить Истина,
//                                то будет выведена форма с описанием обновлений. По умолчанию, Истина.
//   МонопольныйРежим           - Булево - Истина, если обновление выполнялось в монопольном режиме.
//
// Пример обхода выполненных обработчиков обновления:
//
//	Для Каждого Версия Из ВыполненныеОбработчики.Строки Цикл
//		
//		Если Версия.Версия = "*" Тогда
//			// Обработчик, который может выполнятся при каждой смене версии.
//		Иначе
//			// Обработчик, который выполняется для определенной версии.
//		КонецЕсли;
//		
//		Для Каждого Обработчик Из Версия.Строки Цикл
//			...
//		КонецЦикла;
//		
//	КонецЦикла;
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы ПредыдущееИмяКонфигурации. 
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, 
	Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииОбновленияИБ

#Область ЗаполненияПустойИб
Процедура ПервыйЗапуск() Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти
