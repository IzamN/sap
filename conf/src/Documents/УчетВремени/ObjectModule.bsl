#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ЭтоНовый() Тогда
		Пользователь = Пользователи.ТекущийПользователь();
		ЗаполнитьПоДаннымКалендаря();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	СписокВидовДеятельности = ЭтотОбъект.ЗатратыВремени.ВыгрузитьКолонку("ВидДеятельности");
	
	РеквизитыВидовДеятельности = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(СписокВидовДеятельности, "ВидВремени, ТребуемаяДетализация");
	
	ТекущаяСтрока = Неопределено;
	
	Для Каждого СтрокаТЧ из ЗатратыВремени Цикл
		
		Если ЗначениеЗаполнено(СтрокаТЧ.ВидДеятельности) Тогда
			ДанныеВидаДеятельности = РеквизитыВидовДеятельности.Получить(СтрокаТЧ.ВидДеятельности);
		Иначе
			ДанныеВидаДеятельности  = Новый Структура;
			ДанныеВидаДеятельности.Вставить("ТребуемаяДетализация", Перечисления.ДетализацияВПланированииИУчетеВремени.ПустаяСсылка());
			ДанныеВидаДеятельности.Вставить("ВидВремени", Перечисления.ВидыВремени.ПустаяСсылка());
		КонецЕсли;
		
		ТребуемаяДетализация = ДанныеВидаДеятельности.ТребуемаяДетализация;
		
		Если ТребуемаяДетализация = Перечисления.ДетализацияВПланированииИУчетеВремени.РаботаИлиОписание
			И НЕ ЗначениеЗаполнено(СтрокаТЧ.ОписаниеРаботы) И НЕ ЗначениеЗаполнено(СтрокаТЧ.Работа)
			И НЕ ЗначениеЗаполнено(СтрокаТЧ.ТехническийПроект) Тогда
			
			ТекстСообщения = НСтр("ru='В строке %НомерСтроки% не указано описание работы, или сама работа (задача, ошибка, технический проект).'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СтрокаТЧ.НомерСтроки);
				
			ПутьКРеквизиту = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЗатратыВремени", СтрокаТЧ.НомерСтроки, "ОписаниеРаботы");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,ЭтотОбъект, ПутьКРеквизиту);
			
			Отказ = Истина;
			
		КонецЕсли;
		
		Если ТребуемаяДетализация = Перечисления.ДетализацияВПланированииИУчетеВремени.Работа
			И НЕ ЗначениеЗаполнено(СтрокаТЧ.Работа) И НЕ ЗначениеЗаполнено(СтрокаТЧ.ТехническийПроект) Тогда
			
			ТекстСообщения = НСтр("ru='В строке %НомерСтроки% не указана работа (задача, ошибка, технический проект).'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СтрокаТЧ.НомерСтроки);
				
			ПутьКРеквизиту = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЗатратыВремени", СтрокаТЧ.НомерСтроки, "РаботаДляУчета");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,ЭтотОбъект, ПутьКРеквизиту);
			
			Отказ = Истина;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Проект) Тогда
			
			ВидВремени = ДанныеВидаДеятельности.ВидВремени;
			
			Если ВидВремени <> Перечисления.ВидыВремени.Нерабочее Тогда
				
				ТекстСообщения = НСтр("ru='В строке %НомерСтроки% не указан проект.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СтрокаТЧ.НомерСтроки);
				
				ПутьКРеквизиту = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЗатратыВремени", СтрокаТЧ.НомерСтроки, "Проект");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,ЭтотОбъект, ПутьКРеквизиту);
				
				Отказ = Истина;
				
			КонецЕсли; 
			
		Иначе
			
			ПроектСопровождение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТЧ.Проект, "ЭП_ПроектСопровождение");
			
			Если ПроектСопровождение Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ТехническийПроект) Тогда
					
					ТекстСообщения = НСтр("ru='В строке %НомерСтроки% не указан технический проект.'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СтрокаТЧ.НомерСтроки);
					
					ПутьКРеквизиту = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЗатратыВремени", СтрокаТЧ.НомерСтроки, "Проект");
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,ЭтотОбъект, ПутьКРеквизиту);
					
					Отказ = Истина;
					
				КонецЕсли; 
			КонецЕсли;
						
		КонецЕсли; 
		
				
		Если СтрокаТЧ.Окончание < СтрокаТЧ.Начало Тогда
			
			ТекстСообщения = НСтр("ru='В строке %НомерСтроки% начало работы указано позже окончания.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СтрокаТЧ.НомерСтроки);
				
			ПутьКРеквизиту = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЗатратыВремени", СтрокаТЧ.НомерСтроки, "Начало");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,ЭтотОбъект, ПутьКРеквизиту);
			
			Отказ = Истина;
			
		КонецЕсли;
		
		Если ТекущаяСтрока <> Неопределено Тогда
			Если УчетВремениКлиентСервер.ВременныеИнтервалыПересекаются(ТекущаяСтрока.Начало, ТекущаяСтрока.Окончание,
				                                                           СтрокаТЧ.Начало, СтрокаТЧ.Окончание) Тогда
				
				ТекстСообщения = НСтр("ru='В строках %НомерСтроки1% и %НомерСтроки2% указаны пересекающиеся интервалы времени.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки1%", ТекущаяСтрока.НомерСтроки);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки2%", СтрокаТЧ.НомерСтроки);
				
				ПутьКРеквизиту = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЗатратыВремени", ТекущаяСтрока.НомерСтроки, "Окончание");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,ЭтотОбъект, ПутьКРеквизиту);
				
				Отказ = Истина;
				
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Этап) Тогда
			
		    ТекстСообщения = НСтр("ru='В строке %НомерСтроки% не указан этап.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СтрокаТЧ.НомерСтроки);
			
			ПутьКРеквизиту = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЗатратыВремени", СтрокаТЧ.НомерСтроки, "Этап");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,ЭтотОбъект, ПутьКРеквизиту);
			
			Отказ = Истина;
			
		КонецЕсли; 
				
		ТекущаяСтрока = СтрокаТЧ;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)        	 
		
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ТекПользователь = Пользователи.ТекущийПользователь();
	
	Для каждого СтрокаТЧ Из ЗатратыВремени Цикл	
		Если НЕ СтрокаТЧ.Проект.ВидДеятельности = СтрокаТЧ.ВидДеятельности Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтрШаблон("В строке %1 вид деятельности не совпадает с видом деятельности проекта. Перезаполните строку.", СтрокаТЧ.НомерСтроки);
			Сообщение.Сообщить();
			Отказ = Истина;
		    Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЕСТЬNULL(ЭП_ДатыЗакрытияРедактированияПоказателейСрезПоследних.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК Период
		|ИЗ
		|	Справочник.ЭП_Сотрудники.РасчетныеПрофили КАК ЭП_СотрудникиРасчетныеПрофили
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭП_ДатыЗакрытияРедактированияПоказателей.СрезПоследних КАК ЭП_ДатыЗакрытияРедактированияПоказателейСрезПоследних
		|		ПО ЭП_СотрудникиРасчетныеПрофили.Профиль = ЭП_ДатыЗакрытияРедактированияПоказателейСрезПоследних.РасчетныйПрофиль
		|ГДЕ
		|	ЭП_СотрудникиРасчетныеПрофили.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ТекПользователь.ЭП_Сотрудник); 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если НЕ ТекПользователь.ЭП_Сотрудник.ДоговорГПХ Тогда
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Если Дата < КонецМесяца(ВыборкаДетальныеЗаписи.Период) Тогда
				ОбщегоНазначения.СообщитьПользователю("Период редактирования учета времени закрыт!");
				Отказ = Истина;
				Возврат;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;	
	
	Если НЕ Пользователи.ЭтоПолноправныйПользователь() Тогда
		
		ПроверкаПодтвержденныхЧасовПоПроектам(Отказ); 
		Если ПроверитьДоступностьВидовДеятельности() Тогда	
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли; 
	
	УстановитьПривилегированныйРежим(Ложь);
	БлокировкаВремениВключена = Константы.ЭП_БлокировкаУчетаВремени.Получить();
	Если Дата <= КонецДня(БлокировкаВремениВключена) Тогда	
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не верно заполнена дата учета времени. Проведение невозможно.";        
		Сообщение.Сообщить();		
		Отказ = Истина;						
		Возврат;
	КонецЕсли;
	
	ЗатратыВремени.Сортировать("Начало,Окончание");
	
	Если НЕ ПометкаУдаления Тогда
		ПроверитьОтчетыНаДату(Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Запись Тогда 
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
	КонецЕсли;
	
	РассчитатьДлительность();
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Движения.УчетВремени.Загрузить(ДанныеДляЗаписиУчетаВремени());
	Движения.УчетВремени.Записывать = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 	 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УчетВремениЗатратыВремени.Проект КАК Проект
	|ИЗ
	|	Документ.УчетВремени.ЗатратыВремени КАК УчетВремениЗатратыВремени
	|ГДЕ
	|	УчетВремениЗатратыВремени.Ссылка = &Ссылка
	|	И НЕ УчетВремениЗатратыВремени.Проект.ЭП_Архивный = &ЭП_Архивный";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ЭП_Архивный", Перечисления.ЭП_СтатусПроекта.Действующий);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не возможно создать учет времени по проекту " + ВыборкаДетальныеЗаписи.Проект + " так как он переведен в архив";
		Сообщение.Сообщить();
		Отказ = Истина;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПоДаннымКалендаря(ДополнитьИмеющиесяДанные=Ложь) Экспорт
	
	Если ЗатратыВремени.Количество()>0 И НЕ ДополнитьИмеющиесяДанные Тогда
		ЗатратыВремени.Очистить();
	КонецЕсли;
	
	ВидДеятельностиДляОшибок = Константы.ВидДеятельностиДляРаботыСОшибками.Получить();
	ВидДеятельностиДляОшибокАвтотестирования = Константы.ВидДеятельностиДляРаботыСОшибкамиАвтотестирования.Получить();
	ВидДеятельностиДляОшибокАудита = Константы.ВидДеятельностиДляРаботыСОшибкамиАудита.Получить();
	
	ДанныеПоВидамДеятельности = Новый Структура;
	ДанныеПоВидамДеятельности.Вставить("ВидДеятельностиДляОшибок", ВидДеятельностиДляОшибок);
	ДанныеПоВидамДеятельности.Вставить("ВидДеятельностиДляОшибокАвтотестирования", ВидДеятельностиДляОшибокАвтотестирования);
	ДанныеПоВидамДеятельности.Вставить("ВидДеятельностиДляОшибокАудита", ВидДеятельностиДляОшибокАудита);
	
	ПроектПоУмолчанию = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("УчетВремени", "ПроектПоУмолчанию");
	
	Если ЗначениеЗаполнено(ПроектПоУмолчанию) Тогда
		Если НЕ УправлениеДоступом.ЧтениеРазрешено(ПроектПоУмолчанию) Тогда
			ПроектПоУмолчанию = Справочники.Проекты.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	ИспользоватьПроектПоУмолчаниюДляВсехРабот = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Документ.УчетВремени",
	                                                        "ИспользоватьПроектПоУмолчаниюДляВсехРабот",
	                                                        Ложь);

	ДатаДокумента = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДата());
	
	ДанныеКалендаря = РегистрыСведений.КалендариПользователей.ДанныеКалендаряДляУчетаВремени(Пользователь, ДатаДокумента);
	
	ВидыДеятельности = Новый Массив;
	
	Для Каждого СтрокаДанных из ДанныеКалендаря Цикл
		
		Если ДополнитьИмеющиесяДанные Тогда
			
			ДоступныеИнтервалы = СвободныеИнтервалы(СтрокаДанных.Начало, СтрокаДанных.Окончание);
			
			Для Каждого ДоступныйИнтервал из ДоступныеИнтервалы Цикл
				ДобавитьСтрокуПоДаннымКалендаря(СтрокаДанных, ДоступныйИнтервал.Начало, ДоступныйИнтервал.Окончание,
				                                ИспользоватьПроектПоУмолчаниюДляВсехРабот,
			                                    ПроектПоУмолчанию, ВидыДеятельности, ДанныеПоВидамДеятельности);
			КонецЦикла;
			
		Иначе
			
			ДобавитьСтрокуПоДаннымКалендаря(СтрокаДанных,СтрокаДанных.Начало, СтрокаДанных.Окончание,
			                                ИспользоватьПроектПоУмолчаниюДляВсехРабот,
			                                ПроектПоУмолчанию, ВидыДеятельности, ДанныеПоВидамДеятельности);
	
		КонецЕсли;
		
	КонецЦикла;
	
	ЗатратыВремени.Сортировать("Начало,Окончание");
	Длительность = ЗатратыВремени.Итог("Длительность");
	
	// Заполняется проект при необходимости
	Если ВидыДеятельности.Количество()>0 Тогда
		
		ВидыВремени = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВидыДеятельности, "ВидВремени");
		
		Для Каждого СтрокаТЧ из ЗатратыВремени Цикл
			
			ВидВремени = ВидыВремени.Получить(СтрокаТЧ.ВидДеятельности);
			Если ВидВремени <> Перечисления.ВидыВремени.Нерабочее
				И НЕ ЗначениеЗаполнено(СтрокаТЧ.Проект) И ЗначениеЗаполнено(ПроектПоУмолчанию) Тогда
				СтрокаТЧ.Проект = ПроектПоУмолчанию;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// При необходимости пустые интервалы между работами в пределах допустимых
	// настроек удаляются
	СократитьПустыеИнтервалы();
	
КонецПроцедуры

Процедура РассчитатьДлительность()
	
	ВидыДеятельности = ЗатратыВремени.ВыгрузитьКолонку("ВидДеятельности");
	
	ВидыВремени = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВидыДеятельности, "ВидВремени");
	
	ОбщаяДлительность  = 0;
	РабочаяДлительность = 0;
	
	Для Каждого СтрокаТЧ из ЗатратыВремени Цикл
		
		ВидВремени = ВидыВремени.Получить(СтрокаТЧ.ВидДеятельности);
		
		Если СтрокаТЧ.Окончание > СтрокаТЧ.Начало Тогда
			
			СтрокаТЧ.Длительность = НачалоМинуты(СтрокаТЧ.Окончание) - НачалоМинуты(СтрокаТЧ.Начало);
			
			Если ВидВремени = Перечисления.ВидыВремени.Рабочее Тогда
				РабочаяДлительность = РабочаяДлительность + СтрокаТЧ.Длительность;
			КонецЕсли;
			
		Иначе
			СтрокаТЧ.Длительность = 0;
		КонецЕсли;
		
		ОбщаяДлительность = ОбщаяДлительность + СтрокаТЧ.Длительность;
		
	КонецЦикла;
	
	Длительность = ОбщаяДлительность;
	ДлительностьРабочая = РабочаяДлительность;
	
КонецПроцедуры

Процедура ПроверитьОтчетыНаДату(Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДокументыУчетВремени.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.УчетВремени КАК ДокументыУчетВремени
	|ГДЕ
	|	НЕ ДокументыУчетВремени.ПометкаУдаления
	|	И ДокументыУчетВремени.Ссылка <> &Ссылка
	|	И ДокументыУчетВремени.Пользователь = &Пользователь
	|	И НАЧАЛОПЕРИОДА(ДокументыУчетВремени.Дата, ДЕНЬ) = &ДатаДокумента"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("ДатаДокумента", НачалоДня(Дата));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ТекстСообщения = НСтр("ru='На данную дату уже существует документ для данного пользователя'");
		ВызватьИсключение(ТекстСообщения);
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ТаблицаДляДвижений()
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Регистратор", Новый ОписаниеТипов("ДокументСсылка.УчетВремени"));
	Таблица.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	Таблица.Колонки.Добавить("Пользователь", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	Таблица.Колонки.Добавить("ВидДеятельности", Новый ОписаниеТипов("СправочникСсылка.ВидыДеятельности"));
	Таблица.Колонки.Добавить("Проект", Новый ОписаниеТипов("СправочникСсылка.Проекты"));
	Таблица.Колонки.Добавить("ТехническийПроект", Новый ОписаниеТипов("СправочникСсылка.ТехническиеПроекты"));
	Таблица.Колонки.Добавить("Ошибка", Новый ОписаниеТипов("СправочникСсылка.Ошибки"));
	Таблица.Колонки.Добавить("Задача", Новый ОписаниеТипов("СправочникСсылка.ЗадачиПроцесса"));
	Таблица.Колонки.Добавить("ОписаниеРаботы", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Длительность", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("Этап", Новый ОписаниеТипов("СправочникСсылка.РазделыПроекта"));

	
	Возврат Таблица;
	
КонецФункции

Функция ДанныеДляЗаписиУчетаВремени()
	
	Таблица = ТаблицаДляДвижений();
	
	ЗадачиСсылки = Новый Массив;
	
	СписокПолей = "ВидДеятельности,Проект,ТехническийПроект,ОписаниеРаботы,Длительность";
	
	Для Каждого СтрокаТЧ из ЗатратыВремени Цикл
		
		НоваяСтрока = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ, СписокПолей);
       	
		НоваяСтрока.Регистратор = Ссылка;
		НоваяСтрока.Период = Дата;
		НоваяСтрока.Пользователь = Пользователь;
		НоваяСтрока.Этап = СтрокаТЧ.Этап;
		Если ЗначениеЗаполнено(СтрокаТЧ.Работа) Тогда
			
			Если ТипЗнч(СтрокаТЧ.Работа) = Тип("СправочникСсылка.ЗадачиПроцесса") Тогда
				НоваяСтрока.Задача = СтрокаТЧ.Работа;  
				ЗадачиСсылки.Добавить(СтрокаТЧ.Работа);
			ИначеЕсли ТипЗнч(СтрокаТЧ.Работа) = Тип("СправочникСсылка.Ошибки") Тогда
				НоваяСтрока.Ошибка = СтрокаТЧ.Работа;
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	
	ДополнительныеДанные = ДанныеЗадач(ЗадачиСсылки);
	
	Если ДополнительныеДанные.Количество()>0 Тогда
		
		Для Каждого СтрокаТаблицы из Таблица Цикл
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.Задача) Тогда
				
				СтрокаДопДанных = ДополнительныеДанные.Найти(СтрокаТаблицы.Задача, "Ссылка");
				Если СтрокаДопДанных <> Неопределено Тогда
					
					Если ТипЗнч(СтрокаДопДанных.Предмет) = Тип("СправочникСсылка.Ошибки") Тогда
						СтрокаТаблицы.Ошибка= СтрокаДопДанных.Предмет;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Таблица.Свернуть("Регистратор,Период,Пользователь,ВидДеятельности,Проект,ТехническийПроект,Ошибка,Задача,ОписаниеРаботы,Этап", "Длительность");
	
	Возврат Таблица;
	
КонецФункции

Функция ДанныеЗадач(ЗадачиСсылки)
	
	ТекстЗапроса=
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиПроцесса.Ссылка КАК Ссылка,
	|	ЗадачиПроцесса.Предмет КАК Предмет
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|ГДЕ
	|	ЗадачиПроцесса.Ссылка В(&Задачи)
	|	И (ЗадачиПроцесса.Предмет ССЫЛКА Справочник.Ошибки)"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Задачи", ЗадачиСсылки);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура СократитьПустыеИнтервалы()
	
	СокращатьПустыеИнтервалыМеждуРаботами = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Документ.УчетВремени",
	                                                        "СокращатьПустыеИнтервалыМеждуРаботами",
	                                                        Ложь);
															
	ДопустимыйИнтервал = Константы.ДопустимыйИнтервалОкругленияВУчетеВремени.Получить()*60;
	
	Если НЕ СокращатьПустыеИнтервалыМеждуРаботами ИЛИ ДопустимыйИнтервал = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ДопустимыйИнтервал > 0  И СокращатьПустыеИнтервалыМеждуРаботами Тогда
		
		КоличествоСтрок = ЗатратыВремени.Количество();
		
		Если КоличествоСтрок>1 Тогда
			
			ИндексСтроки = КоличествоСтрок-1;
			
			НачалоОбработаннойРаботы = '00010101';
			
			Пока ИндексСтроки >=0 Цикл
				
				Если ИндексСтроки < КоличествоСтрок-1 Тогда
					
					ТекущаяСтрока = ЗатратыВремени[ИндексСтроки];
					
					Если ТекущаяСтрока.Окончание < НачалоОбработаннойРаботы
						И (НачалоОбработаннойРаботы - ТекущаяСтрока.Окончание) <= ДопустимыйИнтервал Тогда
						
						ТекущаяСтрока.Окончание = НачалоОбработаннойРаботы;
						ТекущаяСтрока.Длительность = ТекущаяСтрока.Окончание - ТекущаяСтрока.Начало;
					КонецЕсли;
					
				КонецЕсли;
				
				НачалоОбработаннойРаботы = ЗатратыВремени[ИндексСтроки].Начало;
				ИндексСтроки = ИндексСтроки-1;
				
			КонецЦикла;
			
			Длительность = ЗатратыВремени.Итог("Длительность");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СвободныеИнтервалы(Начало, Окончание)
	
	КвалификаторыВремя = Новый КвалификаторыДаты(ЧастиДаты.Время);
	ОписаниеТипаВремя = Новый ОписаниеТипов("Дата",,,,, КвалификаторыВремя);
	
	ТаблицаИнтервалов = Новый ТаблицаЗначений;
	ТаблицаИнтервалов.Колонки.Добавить("Начало", ОписаниеТипаВремя);
	ТаблицаИнтервалов.Колонки.Добавить("Окончание", ОписаниеТипаВремя);
	
	ОкончаниеПредыдущегоИнтервала = '00010101';
	
	Для Каждого СтрокаТЧ из ЗатратыВремени Цикл
		
		Если СтрокаТЧ.Начало > ОкончаниеПредыдущегоИнтервала Тогда
			
			Если Начало >= ОкончаниеПредыдущегоИнтервала И Начало <= СтрокаТЧ.Начало
				ИЛИ Окончание >= ОкончаниеПредыдущегоИнтервала И Окончание <= СтрокаТЧ.Начало
				ИЛИ Начало <= ОкончаниеПредыдущегоИнтервала И Окончание >= СтрокаТЧ.Начало Тогда
			
				НоваяСтрока = ТаблицаИнтервалов.Добавить();
				
				НоваяСтрока.Начало = Макс(Начало, ОкончаниеПредыдущегоИнтервала);
				НоваяСтрока.Окончание = Мин(СтрокаТч.Начало, Окончание);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ОкончаниеПредыдущегоИнтервала = СтрокаТЧ.Окончание;
		
	КонецЦикла;
	
	Если Начало >= ОкончаниеПредыдущегоИнтервала
		ИЛИ Окончание > ОкончаниеПредыдущегоИнтервала
		ИЛИ Начало <= ОкончаниеПредыдущегоИнтервала И Окончание >= ОкончаниеПредыдущегоИнтервала Тогда
		
		НоваяСтрока = ТаблицаИнтервалов.Добавить();
		
		НоваяСтрока.Начало = Макс(Начало, ОкончаниеПредыдущегоИнтервала);
		НоваяСтрока.Окончание = Окончание;
		
	КонецЕсли;
			
	Возврат ТаблицаИнтервалов;
	
КонецФункции

Процедура ДобавитьСтрокуПоДаннымКалендаря(СтрокаДанных, Начало, Окончание, ИспользоватьПроектПоУмолчаниюДляВсехРабот, ПроектПоУмолчанию, ВидыДеятельности, ДанныеПоВидамДеятельности)
	
	ВидДеятельностиДляОшибок = ДанныеПоВидамДеятельности.ВидДеятельностиДляОшибок;
	ВидДеятельностиДляОшибокАвтотестирования = ДанныеПоВидамДеятельности.ВидДеятельностиДляОшибокАвтотестирования;
	ВидДеятельностиДляОшибокАудита = ДанныеПоВидамДеятельности.ВидДеятельностиДляОшибокАудита;
	
	НоваяСтрока = ЗатратыВремени.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных,,"Начало,Окончание");
	
	НоваяСтрока.Начало = Начало;
	НоваяСтрока.Окончание = Окончание;
	
	Если ЗначениеЗаполнено(СтрокаДанных.Задача) Тогда
				
		НоваяСтрока.Работа = СтрокаДанных.Задача;
		
		Если Не ЗначениеЗаполнено(СтрокаДанных.ВидДеятельности)
			И ЗначениеЗаполнено(СтрокаДанных.ВидДеятельностиПоЗадаче) Тогда
			НоваяСтрока.ВидДеятельности = СтрокаДанных.ВидДеятельностиПоЗадаче;
		КонецЕсли;
		
		Если ИспользоватьПроектПоУмолчаниюДляВсехРабот И ЗначениеЗаполнено(ПроектПоУмолчанию) Тогда
			НоваяСтрока.Проект = ПроектПоУмолчанию;
			НоваяСтрока.ВидДеятельности = ПроектПоУмолчанию.ВидДеятельности;
		Иначе
			НоваяСтрока.Проект = СтрокаДанных.Проект;
			НоваяСтрока.ВидДеятельности = СтрокаДанных.Проект.ВидДеятельности;
		КонецЕсли;

			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА ЗадачиПроцесса.Предмет ССЫЛКА Справочник.ТехническиеПроекты
			|			ТОГДА ВЫРАЗИТЬ(ЗадачиПроцесса.Предмет КАК Справочник.ТехническиеПроекты).РазделПроекта
			|	КОНЕЦ КАК Этап
			|ИЗ
			|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
			|ГДЕ
			|	ЗадачиПроцесса.Ссылка = &Ссылка
			|	И ЗадачиПроцесса.ЭП_Проект = &ЭП_Проект";
			
			Запрос.УстановитьПараметр("Ссылка", 	НоваяСтрока.Работа);
			Запрос.УстановитьПараметр("ЭП_Проект",  НоваяСтрока.Проект);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				НоваяСтрока.Этап = Выборка.Этап;
			КонецЦикла;
	
	ИначеЕсли ЗначениеЗаполнено(СтрокаДанных.Ошибка) Тогда
		
		НоваяСтрока.Работа = СтрокаДанных.Ошибка;
		
		Если НЕ ЗначениеЗаполнено(СтрокаДанных.ВидДеятельности) Тогда
			
			Если СтрокаДанных.МетодВыявленияОшибки = Перечисления.МетодыВыявленияОшибок.Автотесты
				И ЗначениеЗаполнено(ВидДеятельностиДляОшибокАвтоТестирования) Тогда
				НоваяСтрока.ВидДеятельности = ВидДеятельностиДляОшибокАвтотестирования;
			ИначеЕсли СтрокаДанных.МетодВыявленияОшибки = Перечисления.МетодыВыявленияОшибок.АудитКода
				И ЗначениеЗаполнено(ВидДеятельностиДляОшибокАудита) Тогда
				НоваяСтрока.ВидДеятельности = ВидДеятельностиДляОшибокАудита;
			ИначеЕсли ЗначениеЗаполнено(ВидДеятельностиДляОшибок) Тогда
				НоваяСтрока.ВидДеятельности = ВидДеятельностиДляОшибок;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИспользоватьПроектПоУмолчаниюДляВсехРабот И ЗначениеЗаполнено(ПроектПоУмолчанию) Тогда
			НоваяСтрока.Проект = ПроектПоУмолчанию;
		Иначе
			НоваяСтрока.Проект = СтрокаДанных.Проект;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Ошибки.РазделПроекта КАК Этап
		|ИЗ
		|	Справочник.Ошибки КАК Ошибки
		|ГДЕ
		|	Ошибки.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка",  НоваяСтрока.Работа);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НоваяСтрока.Этап = Выборка.Этап;	
		КонецЦикла;
		
	ИначеЕсли ЗначениеЗаполнено(СтрокаДанных.ТехническийПроект) Тогда
		
		Если ИспользоватьПроектПоУмолчаниюДляВсехРабот И ЗначениеЗаполнено(ПроектПоУмолчанию) Тогда
			НоваяСтрока.Проект = ПроектПоУмолчанию;
			НоваяСтрока.ВидДеятельности = ПроектПоУмолчанию.ВидДеятельности;
		Иначе
			НоваяСтрока.Проект = СтрокаДанных.Проект;
			НоваяСтрока.ВидДеятельности = СтрокаДанных.Проект.ВидДеятельности;
		КонецЕсли; 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТехническиеПроекты.РазделПроекта КАК Этап
		|ИЗ
		|	Справочник.ТехническиеПроекты КАК ТехническиеПроекты
		|ГДЕ
		|	ТехническиеПроекты.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", СтрокаДанных.ТехническийПроект);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НоваяСтрока.Этап = Выборка.Этап;	
		КонецЦикла;
		
	КонецЕсли;
	
	Если НоваяСтрока.Окончание > НоваяСтрока.Начало Тогда
		НоваяСтрока.Длительность = НоваяСтрока.Окончание - НоваяСтрока.Начало;
	Иначе
		НоваяСтрока.Длительность = 0;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НоваяСтрока.ВидДеятельности)
		И ВидыДеятельности.Найти(НоваяСтрока.ВидДеятельности) = Неопределено Тогда
		ВидыДеятельности.Добавить(НоваяСтрока.ВидДеятельности);
	КонецЕсли;
		
КОнецПроцедуры

Функция ПроверитьДоступностьВидовДеятельности()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущийСотрудник = Пользователь.ЭП_Сотрудник;
	
	//ПользовательГПХ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийСотрудник,"ДоговорГПХ");
	//
	//Если ПользовательГПХ Тогда
	//
	//	Возврат Ложь;		
	//
	//КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВидыДеятельности.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ВТ_ДоступныеРабочиеВидыВремени
	               |ИЗ
	               |	Справочник.ЭП_Сотрудники.РасчетныеПрофили КАК ЭП_СотрудникиРасчетныеПрофили
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыДеятельности КАК ВидыДеятельности
	               |		ПО ЭП_СотрудникиРасчетныеПрофили.Профиль.ВидДеятельности = ВидыДеятельности.Ссылка
	               |ГДЕ
	               |	ЭП_СотрудникиРасчетныеПрофили.Ссылка = &Ссылка
	               |	И ВидыДеятельности.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.Рабочее)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВидыДеятельности.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ВТ_ВидыИзДокумента
	               |ИЗ
	               |	Справочник.ВидыДеятельности КАК ВидыДеятельности
	               |ГДЕ
	               |	ВидыДеятельности.Ссылка В(&МассивВидов)
	               |	И ВидыДеятельности.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.Рабочее)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ВидыИзДокумента.Ссылка КАК Ссылка
	               |ИЗ
	               |	ВТ_ВидыИзДокумента КАК ВТ_ВидыИзДокумента
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДоступныеРабочиеВидыВремени КАК ВТ_ДоступныеРабочиеВидыВремени
	               |		ПО ВТ_ВидыИзДокумента.Ссылка = ВТ_ДоступныеРабочиеВидыВремени.Ссылка
	               |ГДЕ
	               |	ВТ_ДоступныеРабочиеВидыВремени.Ссылка ЕСТЬ NULL";
	Запрос.УстановитьПараметр("МассивВидов", ЗатратыВремени.ВыгрузитьКолонку("ВидДеятельности")); 
	Запрос.УстановитьПараметр("Ссылка", ТекущийСотрудник);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
	
		Возврат Ложь;		
	
	КонецЕсли;       
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "Вам недоступны следующие виды деятельности";        
	Сообщение.Сообщить();	
	
	Пока Выборка.Следующий() Цикл
	
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ""+ Выборка.Ссылка;        
		Сообщение.Сообщить();	
	
	КонецЦикла;
	
	Возврат Истина;
    УстановитьПривилегированныйРежим(Ложь);
КонецФункции


Процедура ПроверкаПодтвержденныхЧасовПоПроектам(Отказ)	
	
	ТаблицаЗатратыВремени = ЗатратыВремени.Выгрузить();
	
	Запрос = Новый Запрос;  
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ТекущиеЗатратыВремени", ТаблицаЗатратыВремени);  	
	Запрос.УстановитьПараметр("Ответственный", Пользователь); 
	Запрос.УстановитьПараметр("ДатаДокумента",Дата);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчетВремени.Дата КАК Дата
	|ИЗ
	|	Документ.УчетВремени КАК УчетВремени
	|ГДЕ
	|	УчетВремени.Ссылка = &Ссылка";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ДатаДляЗапроса = ТекущаяДата();
	Иначе                  
		Выборка = РезультатЗапроса.Выбрать(); Выборка.Следующий();
		ДатаДляЗапроса = Выборка.Дата;
	КонецЕсли;
	
	ДатаДляЗапроса = Мин(ДатаДляЗапроса,Дата);
	
	Запрос.УстановитьПараметр("ДатаДляЗапроса", ДатаДляЗапроса);
	Запрос.Текст = ПолучитьТекстЗапросаЗапрещенныеКРедактирвоаниюПроекты();
	РезультатЗапроса = Запрос.Выполнить();	
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
		
	ТекстСообщения = "Невозможно сохранить изменённые данные, так как по проектам:" + Символы.ПС;
		
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения = ТекстСообщения + " - " + Выборка.Проект + Символы.ПС;
			
	КонецЦикла;
		
	ТекстСообщения = ТекстСообщения + "были созданы документы ""Утверждение фактических трудозатрат"" за период, " + 
					"который включает дату текущего документа.";
	
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		
		
КонецПроцедуры     

Функция ПолучитьТекстЗапросаЗапрещенныеКРедактирвоаниюПроекты()
	
	Возврат  
	
		"ВЫБРАТЬ
		|	ТекущиеЗатратыВремени.Проект КАК Проект,
		|	ТекущиеЗатратыВремени.Работа КАК Работа,
		|	ТекущиеЗатратыВремени.ОписаниеРаботы КАК ОписаниеРаботы,
		|	ТекущиеЗатратыВремени.ТехническийПроект КАК ТехническийПроект,
		|	ТекущиеЗатратыВремени.ВидДеятельности КАК ВидДеятельности,
		|	ТекущиеЗатратыВремени.Длительность КАК Длительность,
		|	&ДатаДокумента КАК ДатаДокумента
		|ПОМЕСТИТЬ ВТ_ТекущиеЗатратыВремениДокумент
		|ИЗ
		|	&ТекущиеЗатратыВремени КАК ТекущиеЗатратыВремени
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТекущиеЗатратыВремениДокумент.Проект КАК Проект,
		|	ВТ_ТекущиеЗатратыВремениДокумент.Работа КАК Работа,
		|	ВТ_ТекущиеЗатратыВремениДокумент.ОписаниеРаботы КАК ОписаниеРаботы,
		|	ВТ_ТекущиеЗатратыВремениДокумент.ТехническийПроект КАК ТехническийПроект,
		|	ВТ_ТекущиеЗатратыВремениДокумент.ВидДеятельности КАК ВидДеятельности,
		|	СУММА(ВТ_ТекущиеЗатратыВремениДокумент.Длительность) КАК Длительность,
		|	ВТ_ТекущиеЗатратыВремениДокумент.ДатаДокумента КАК ДатаДокумента
		|ПОМЕСТИТЬ ВТ_ТекущиеЗатратыВремени
		|ИЗ
		|	ВТ_ТекущиеЗатратыВремениДокумент КАК ВТ_ТекущиеЗатратыВремениДокумент
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ТекущиеЗатратыВремениДокумент.Проект,
		|	ВТ_ТекущиеЗатратыВремениДокумент.ОписаниеРаботы,
		|	ВТ_ТекущиеЗатратыВремениДокумент.ВидДеятельности,
		|	ВТ_ТекущиеЗатратыВремениДокумент.ТехническийПроект,
		|	ВТ_ТекущиеЗатратыВремениДокумент.Работа,
		|	ВТ_ТекущиеЗатратыВремениДокумент.ДатаДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УчетВремениЗатратыВремени.Проект КАК Проект,
		|	УчетВремениЗатратыВремени.Работа КАК Работа,
		|	УчетВремениЗатратыВремени.ОписаниеРаботы КАК ОписаниеРаботы,
		|	УчетВремениЗатратыВремени.ТехническийПроект КАК ТехническийПроект,
		|	УчетВремениЗатратыВремени.ВидДеятельности КАК ВидДеятельности,
		|	СУММА(УчетВремениЗатратыВремени.Длительность) КАК Длительность,
		|	УчетВремениЗатратыВремени.Ссылка.Дата КАК Дата
		|ПОМЕСТИТЬ ВТ_ДокументБД
		|ИЗ
		|	Документ.УчетВремени.ЗатратыВремени КАК УчетВремениЗатратыВремени
		|ГДЕ
		|	УчетВремениЗатратыВремени.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	УчетВремениЗатратыВремени.ВидДеятельности,
		|	УчетВремениЗатратыВремени.ТехническийПроект,
		|	УчетВремениЗатратыВремени.Проект,
		|	УчетВремениЗатратыВремени.Работа,
		|	УчетВремениЗатратыВремени.ОписаниеРаботы,
		|	УчетВремениЗатратыВремени.Ссылка.Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭП_ПодтвержденныеЧасыПоСотрудникамВПроектеСрезПоследних.Проект КАК Проект
		|ПОМЕСТИТЬ ВТ_ПроектыЗапрещенныеКИзменению
		|ИЗ
		|	РегистрСведений.ЭП_ПодтвержденныеЧасыПоСотрудникамВПроекте.СрезПоследних(
		|			,
		|			Проект В
		|					(ВЫБРАТЬ
		|						А.Проект
		|					ИЗ
		|						ВТ_ТекущиеЗатратыВремени КАК А)
		|				И ВЫБОР
		|					КОГДА Проект.Ответственный = &Ответственный
		|						ТОГДА ВидОперации = ЗНАЧЕНИЕ(Перечисление.ЭП_ВидыОперацийНадФактическимиТрудозатратами.ТрудозатратыРП)
		|					ИНАЧЕ ВидОперации = ЗНАЧЕНИЕ(Перечисление.ЭП_ВидыОперацийНадФактическимиТрудозатратами.ТрудозатратыКоманды)
		|				КОНЕЦ) КАК ЭП_ПодтвержденныеЧасыПоСотрудникамВПроектеСрезПоследних
		|ГДЕ
		|	ЭП_ПодтвержденныеЧасыПоСотрудникамВПроектеСрезПоследних.Период >= &ДатаДляЗапроса
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭП_ПодтвержденныеЧасыПоСотрудникамВПроектеСрезПоследних.Проект
		|ИЗ
		|	РегистрСведений.ЭП_ПодтвержденныеЧасыПоСотрудникамВПроекте.СрезПоследних(
		|			,
		|			Проект В
		|					(ВЫБРАТЬ
		|						А.Проект
		|					ИЗ
		|						ВТ_ДокументБД КАК А)
		|				И ВЫБОР
		|					КОГДА Проект.Ответственный = &Ответственный
		|						ТОГДА ВидОперации = ЗНАЧЕНИЕ(Перечисление.ЭП_ВидыОперацийНадФактическимиТрудозатратами.ТрудозатратыРП)
		|					ИНАЧЕ ВидОперации = ЗНАЧЕНИЕ(Перечисление.ЭП_ВидыОперацийНадФактическимиТрудозатратами.ТрудозатратыКоманды)
		|				КОНЕЦ) КАК ЭП_ПодтвержденныеЧасыПоСотрудникамВПроектеСрезПоследних
		|ГДЕ
		|	ЭП_ПодтвержденныеЧасыПоСотрудникамВПроектеСрезПоследних.Период >= &ДатаДляЗапроса
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТекущиеЗатратыВремени.Проект КАК Проект
		|ПОМЕСТИТЬ ВТ_ЗапрещенныеИзменения
		|ИЗ
		|	ВТ_ТекущиеЗатратыВремени КАК ВТ_ТекущиеЗатратыВремени
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДокументБД КАК ВТ_ДокументБД
		|		ПО ВТ_ТекущиеЗатратыВремени.Проект = ВТ_ДокументБД.Проект
		|			И ВТ_ТекущиеЗатратыВремени.Работа = ВТ_ДокументБД.Работа
		|			И ВТ_ТекущиеЗатратыВремени.ОписаниеРаботы = ВТ_ДокументБД.ОписаниеРаботы
		|			И ВТ_ТекущиеЗатратыВремени.ТехническийПроект = ВТ_ДокументБД.ТехническийПроект
		|			И ВТ_ТекущиеЗатратыВремени.ВидДеятельности = ВТ_ДокументБД.ВидДеятельности
		|			И ВТ_ТекущиеЗатратыВремени.Длительность = ВТ_ДокументБД.Длительность
		|			И ВТ_ТекущиеЗатратыВремени.ДатаДокумента = ВТ_ДокументБД.Дата
		|ГДЕ
		|	ВТ_ДокументБД.Проект ЕСТЬ NULL
		|	И ВТ_ТекущиеЗатратыВремени.Проект В
		|			(ВЫБРАТЬ
		|				А.Проект
		|			ИЗ
		|				ВТ_ПроектыЗапрещенныеКИзменению КАК А)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ДокументБД.Проект
		|ИЗ
		|	ВТ_ДокументБД КАК ВТ_ДокументБД
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТекущиеЗатратыВремени КАК ВТ_ТекущиеЗатратыВремени
		|		ПО ВТ_ДокументБД.Проект = ВТ_ТекущиеЗатратыВремени.Проект
		|			И ВТ_ДокументБД.Работа = ВТ_ТекущиеЗатратыВремени.Работа
		|			И ВТ_ДокументБД.ОписаниеРаботы = ВТ_ТекущиеЗатратыВремени.ОписаниеРаботы
		|			И ВТ_ДокументБД.ТехническийПроект = ВТ_ТекущиеЗатратыВремени.ТехническийПроект
		|			И ВТ_ДокументБД.ВидДеятельности = ВТ_ТекущиеЗатратыВремени.ВидДеятельности
		|			И ВТ_ДокументБД.Длительность = ВТ_ТекущиеЗатратыВремени.Длительность
		|			И ВТ_ДокументБД.Дата = ВТ_ТекущиеЗатратыВремени.ДатаДокумента
		|ГДЕ
		|	ВТ_ДокументБД.Проект В
		|			(ВЫБРАТЬ
		|				А.Проект
		|			ИЗ
		|				ВТ_ПроектыЗапрещенныеКИзменению КАК А)
		|	И ВТ_ТекущиеЗатратыВремени.Проект ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_ЗапрещенныеИзменения.Проект КАК Проект
		|ИЗ
		|	ВТ_ЗапрещенныеИзменения КАК ВТ_ЗапрещенныеИзменения";
	
	
КонецФункции

#КонецОбласти

#КонецЕсли