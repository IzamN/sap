#Область ОбработкиСобытийФормы  

// ++ Спиридонов А.И. 09.12.2024
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ИнициализироватьДокумент();
	ПроверитьЗакрытиеПериода();		
	ОбновитьСтатусПереработок();
	СформироватьТекстПротоколаВзаимодействия();		
	УстановитьУсловноеОформлениеПоРолям();
				
КонецПроцедуры

// ++ Спиридонов А.И. 09.12.2024
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПроверитьДокументНаКорекктностьДанных(Отказ);
	
	СтатусПоСтрокеПротокола         = ПредопределенноеЗначение("Перечисление.ЭП_СтатусыДокументаУтверждениеПереработок.ПустаяСсылка");
	НаправленаПоСтрокеПротокола     = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	ПоследнееПоручениеПротокола     = ""; 
	
	КоличествоСтрокПротокола = ТекущийОбъект.ПротоколВзаимодействия.Количество();
	Если КоличествоСтрокПротокола > 0 Тогда
		ПоследняяСтрока = ТекущийОбъект.ПротоколВзаимодействия.Получить(КоличествоСтрокПротокола - 1);
		СтатусПоСтрокеПротокола        = ПоследняяСтрока.Статус;
		НаправленаПоСтрокеПротокола    = ПоследняяСтрока.ИсполнительУтвержденияПереработок;
		Комментарий    = ПоследняяСтрока.ТекстПоручения; 
		АвторИзменений = ТекущийПользователь;
	КонецЕсли;
	
	Если ТекстПоручения <> "" Тогда	
		Документы.ЭП_ПланированиеТрудозатрат.ДобавитьЗаписьВПротокол(ТекущийОбъект, ТекущийПользователь, ТекстПоручения, Объект.Статус, ИсполнительУтвержденияПереработок)
	КонецЕсли;
	
КонецПроцедуры 

// ++ Спиридонов А.И. 09.12.2024
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
    УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
    // Конец СтандартныеПодсистемы.УправлениеДоступом
			
	ОбновитьСтатусПереработок();
	СформироватьТекстПротоколаВзаимодействия();
	ТекстПоручения = "";
	
	Если Не Объект.ОповещениеСообщений
		И Объект.Статус = ПредопределенноеЗначение("Перечисление.ЭП_СтатусыДокументаУтверждениеПереработок.НаСогласовании") Тогда
		СформироватьЗаписьВРегистреИсторияСообщений(Объект.Проект, Объект.Ссылка);
		ОтправитьПисьмаОтветственным();
	КонецЕсли;
    
КонецПроцедуры

// ++ Спиридонов А.И. 09.12.2024
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
    Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
        МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
        МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
    КонецЕсли;
    // Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

// ++ Спиридонов А.И. 09.12.2024
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Параметры.Ключ.Пустая() Тогда
		Объект.ОповещениеСообщений = Ложь; 
		Объект.Статус = ПредопределенноеЗначение("Перечисление.ЭП_СтатусыДокументаУтверждениеПереработок.НовыйДокумент");
		ПрошлыйСтатус = ПредопределенноеЗначение("Перечисление.ЭП_СтатусыДокументаУтверждениеПереработок.НовыйДокумент");
	КонецЕсли;
	Если Не Параметры.Ключ.Пустая() Тогда 		
		Объект.ОповещениеСообщений = Истина;
	КонецЕсли;	
	Если Не Параметры.Ключ.Пустая() 
		И ПрошлыйСтатус = ПредопределенноеЗначение("Перечисление.ЭП_СтатусыДокументаУтверждениеПереработок.Отменен") Тогда
		Объект.ОповещениеСообщений = Ложь;
		ПрошлыйСтатус = ПредопределенноеЗначение("Перечисление.ЭП_СтатусыДокументаУтверждениеПереработок.НаСогласовании"); 
	КонецЕсли;
	Если Не Параметры.Ключ.Пустая() 
		И ПрошлыйСтатус = ПредопределенноеЗначение("Перечисление.ЭП_СтатусыДокументаУтверждениеПереработок.НовыйДокумент") 
		И Объект.Статус =  ПредопределенноеЗначение("Перечисление.ЭП_СтатусыДокументаУтверждениеПереработок.НаСогласовании") Тогда
		Объект.ОповещениеСообщений = Ложь;
		ПрошлыйСтатус = ПредопределенноеЗначение("Перечисление.ЭП_СтатусыДокументаУтверждениеПереработок.НаСогласовании"); 
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПротоколВзаимодействия 

// ++ Спиридонов А.И. 09.12.2024
&НаСервере
Процедура ДобавитьЗаписьВПротокол(ТекущийОбъект, АвторИзменений, Комментарий, СтатусПоСтрокеПротокола, НаправленаПоСтрокеПротокола)
	
	Дата = ТекущаяДатаСеанса();
	НоваяСтрока = ТекущийОбъект.ПротоколВзаимодействия.Добавить();
	НоваяСтрока.Автор = АвторИзменений;
	НоваяСтрока.Дата = Дата;
	НоваяСтрока.ТекстПоручения = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(Комментарий, "");
	НоваяСтрока.ИсполнительУтвержденияПереработок = НаправленаПоСтрокеПротокола;
	НоваяСтрока.Статус = СтатусПоСтрокеПротокола;
	
КонецПроцедуры

// ++ Спиридонов А.И. 09.12.2024
&НаКлиенте
Процедура Ответить(Команда)
	
	АвторПоследнегоСообщения = АвторПоследнегоСообщения(ЭтотОбъект);
	
	Если АвторПоследнегоСообщения <> Неопределено Тогда
		ИсполнительУтвержденияПереработок = АвторПоследнегоСообщения;
	КонецЕсли;
	
КонецПроцедуры

// ++ Спиридонов А.И. 09.12.2024
&НаКлиентеНаСервереБезКонтекста
Функция АвторПоследнегоСообщения(Форма)

	АвторПоследнегоСообщения = Неопределено;
	КоличествоСтрокПротокола = Форма.Объект.ПротоколВзаимодействия.Количество();
	
	Для Инд = 1 По КоличествоСтрокПротокола Цикл
		АвторСообщения = Форма.Объект.ПротоколВзаимодействия[КоличествоСтрокПротокола - Инд].Автор;
		
		Если ЗначениеЗаполнено(АвторСообщения)
			И АвторСообщения <> Форма.ТекущийПользователь Тогда 
			
			АвторПоследнегоСообщения = АвторСообщения;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат АвторПоследнегоСообщения;

КонецФункции

// ++ Спиридонов А.И. 09.12.2024
&НаСервере
Процедура СформироватьТекстПротоколаВзаимодействия()
	
	ПротоколВзаимодействия = 
		"<!DOCTYPE html>
		|<html>
		| <head>
		|  <meta charset=""utf-8"">
		|<style type=""text/css"">
		|.users {
		|	font-size: 10px;
		|	font-family: Arial, Helvetica, sans-serif;
		|	color: #afafaf;
		|}
		|.commentLeft {
		|	font-size: 14px;
		|	font-family: Arial, Helvetica, sans-serif;
		|	color: #484848;
		|	background-color: #eeffda;
		|	padding-top: 7px;
		|	padding-bottom: 8px;
		|	padding-left: 10px;
		|	padding-right: 15px;
		|	margin-left: 10%;
		|}
		|.commentRight {
		|	font-size: 14px;
		|	font-family: Arial, Helvetica, sans-serif;
		|	color: #484848;
		|	background-color: #ededed;
		|	padding-top: 7px;
		|	padding-bottom: 8px;
		|	padding-left: 10px;
		|	padding-right: 15px;
		|	margin-right: 10%; 
		|}
		|.status {
		|	font-size: 10px;
		|	font-family: Arial, Helvetica, sans-serif;
		|	color: #afafaf;
		|	width: 50%;
		|	float: left;
		|}
		|.text {
		|	padding-top: 7px;
		|	padding-bottom: 2px;
		|}
		|.date {
		|	font-size: 10px;
		|	font-family: Arial, Helvetica, sans-serif;
		|	color: #afafaf;
		|	text-align: right;
		|	margin-right: 30px;
		|	padding-top: 5px;
		|}
		|.time {
		|	font-size: 10px;
		|	font-family: Arial, Helvetica, sans-serif;
		|	color: #afafaf;
		|	text-align: right;
		|	padding: 0px;
		|}
		|.edit {
		|	border: none;
		|	margin-left: 5px;
		|}
		|.marginLeft {
		|	margin-left: 10%;
		|	margin-bottom: 1px;
		|}
		|.marginRight {
		|	margin-right: 10%;
		|	margin-bottom: 1px;
		|}
		|.mb {
		|margin-bottom: 15px;
		|}
		|a.user:link {
		|	color: #828282;
		|	margin-right: 7px;
		|	margin-left: 10px;
		|	padding-left: 1px;
		|}
		|a.user:visited {
		|	color: #828282;
		|	margin-right: 7px;
		|	margin-left: 10px;
		|	padding-left: 1px;
		|}
		|a.user2:link {
		|	color: #828282;
		|	margin-right: 7px;
		|	padding-left: 40px;
		|}
		|a.user2:visited {
		|	color: #828282;
		|	margin-right: 7px;
		|	padding-left: 1px;
		|	margin-left: 4px;
		|}
		|</style>
		| </head>
		| <body>";
		
	КартинкаНаправлена    = ПоместитьВоВременноеХранилище(БиблиотекаКартинок.КомуНаправлена, УникальныйИдентификатор);
	КартинкаРедактировать = ПоместитьВоВременноеХранилище(БиблиотекаКартинок.Редактировать, УникальныйИдентификатор);
	
	СтрокаСсылкаИзменить = "<a href=""#СсылкаИзменить"">%СсылкаИзменить%</a>";
	СтрокаСсылкаИзменить = СтрЗаменить(СтрокаСсылкаИзменить, "%СсылкаИзменить%", НСтр("ru = 'изменить комментарий'"));
	
	КоличествоСтрок = Объект.ПротоколВзаимодействия.Количество();
	Инд = КоличествоСтрок - 1;
	
	Пока Инд >= 0 Цикл
		
		СтрокаПротокол = Объект.ПротоколВзаимодействия.Получить(Инд);
		Инд = Инд - 1;
		
		ТекстПорученияПротокола = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(СтрокаПротокол.ТекстПоручения, "");
		ТекстПорученияПротокола = СтрЗаменить(ТекстПорученияПротокола, Символы.ПС, "<br>");
		
		Если  СтрокаПротокол.Автор <> ТекущийПользователь Тогда
			ИмяСтиляПользователи = "marginRight";
			ИмяСтиляКомментарий  = "commentRight mb";
		Иначе
			ИмяСтиляПользователи = "marginLeft";
			ИмяСтиляКомментарий  = "commentLeft mb";
		КонецЕсли;
		
		ТекстАвтор          = СтрШаблон("<a href=""%1"" class=""user"">%2</a>",
		                                ПолучитьНавигационнуюСсылку(СтрокаПротокол.Автор),
		                                ПредставлениеПользователя(СтрокаПротокол.Автор, ТекущийПользователь, НСтр("ru = 'Я'")));
		
		ТекстКомуНаправлена = СтрШаблон("<a href=""%1"" class=""user"">%2</a>",
		                                ПолучитьНавигационнуюСсылку(СтрокаПротокол.ИсполнительУтвержденияПереработок),
		                                ПредставлениеПользователя(СтрокаПротокол.ИсполнительУтвержденияПереработок, ТекущийПользователь, НСтр("ru = 'Мне'")));
		
		СтрокаПользователи     = "<div class=""users"">" + ТекстАвтор;  
		
		Если ЗначениеЗаполнено(СтрокаПротокол.ИсполнительУтвержденияПереработок) Тогда
			СтрокаПользователи = СтрокаПользователи + "<IMG src=""" + КартинкаНаправлена + """>" + ТекстКомуНаправлена + "</div>";
		Иначе
			СтрокаПользователи = СтрокаПользователи + "</div>";
		КонецЕсли;
		
		ПротоколВзаимодействия = ПротоколВзаимодействия + " 
			|<div class=""" + ИмяСтиляПользователи + """>" + СтрокаПользователи + "</div>";
			
		Если СтрокаПротокол.НомерСтроки = КоличествоСтрок И СтрокаПротокол.Автор = ТекущийПользователь Тогда
			СтрокаИзменить = "<a  href=""#СсылкаИзменить""><img class = ""edit"" src=""" + КартинкаРедактировать + """></a>";
		Иначе
			СтрокаИзменить = "";
		КонецЕсли;
		
		СтрокаСтатус    = "<div class=""status"">" + СтрокаПротокол.Статус + "</div>";
		ДатаПоручения   = ПредставлениеДаты(СтрокаПротокол.Дата);
		СтрокаДата      = "<div class=""time"">"   + ДатаПоручения + "</div>";
		СтрокаПоручение = "<div class=""text"">"   + ТекстПорученияПротокола + СтрокаИзменить + "</div>";
		
		ПротоколВзаимодействия = ПротоколВзаимодействия + "
			|<div class=""" + ИмяСтиляКомментарий + """>" + СтрокаСтатус + СтрокаДата + СтрокаПоручение + "</div>";
		
	КонецЦикла;
	
	ПротоколВзаимодействия = ПротоколВзаимодействия 
		+ "
		|</body>
		|</html>";
		
КонецПроцедуры

// ++ Спиридонов А.И. 09.12.2024
&НаСервере
Функция ПредставлениеПользователя(Пользователь, ТекущийПользователь, ПредставлениеЕслиТекущий)
	
	Если Пользователь = ТекущийПользователь Тогда
		Возврат ПредставлениеЕслиТекущий;
	Иначе
		Возврат Строка(Пользователь);
	КонецЕсли;
	
КонецФункции

// ++ Спиридонов А.И. 09.12.2024
&НаСервере
Функция ПредставлениеДаты(Дата)

	ДатаСеанса = ТекущаяДатаСеанса();
	
	Если НачалоДня(Дата) = НачалоДня(ДатаСеанса) Тогда 
		Возврат Формат(Дата, "ДЛФ=T");
	ИначеЕсли НачалоДня(Дата) = НачалоДня(ДатаСеанса) - 86400 Тогда
		Возврат НСтр("ru = 'Вчера'");
	Иначе
		Возврат Формат(Дата, "ДЛФ=D");
	КонецЕсли;

КонецФункции 

// ++ Спиридонов А.И. 09.12.2024
&НаКлиенте
Процедура ПротоколВзаимодействияHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если ДанныеСобытия.Href = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если СтрНайти(ДанныеСобытия.Href, "#СсылкаИзменить") > 0 Тогда
		
		Если Объект.ПротоколВзаимодействия.Количество() > 0 Тогда
			
			ИзменитьПоследнееПоручение();
			Возврат;
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПерейтиПоНавигационнойСсылке(ДанныеСобытия.Href);
	
КонецПроцедуры

// ++ Спиридонов А.И. 09.12.2024
&НаКлиенте
Процедура ИзменитьПоследнееПоручение()

	СтрокаТЧ = Объект.ПротоколВзаимодействия[Объект.ПротоколВзаимодействия.Количество() - 1];
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Автор", СтрокаТЧ.Автор);
	ПараметрыФормы.Вставить("Дата", СтрокаТЧ.Дата);
	ПараметрыФормы.Вставить("Статус", СтрокаТЧ.Статус);
	ПараметрыФормы.Вставить("ИсполнительУтвержденияПереработок", СтрокаТЧ.ИсполнительУтвержденияПереработок);
	ПараметрыФормы.Вставить("ТекстПоручения", СтрокаТЧ.ТекстПоручения);
	
	Структура = Новый Структура("СтрокаПротокола", СтрокаТЧ);
	 
	ОписаниеОповещения = Новый ОписаниеОповещения("ПротоколВыборЗавершение", ЭтотОбъект, Структура);
	
	ОткрытьФорму("Документ.ЭП_ПланированиеТрудозатрат.Форма.СтрокаПротокола", ПараметрыФормы, ЭтаФорма , , , , ОписаниеОповещения);
	
КонецПроцедуры 

// ++ Спиридонов А.И. 09.12.2024
&НаКлиенте
Процедура ПротоколВыборЗавершение(РезультатДействия, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(РезультатДействия) = Тип("Строка") Тогда
		
		СтрокаТЧ = ДополнительныеПараметры.СтрокаПротокола;
		СтрокаТЧ.ТекстПоручения = РезультатДействия;
		
		СформироватьТекстПротоколаВзаимодействия();
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийШапкиФормы 

// ++ Спиридонов А.И. 09.12.2024
&НаКлиенте
Процедура ПроектПриИзменении(Элемент)
	
	Элементы.ИсполнительУтвержденияПереработок.СписокВыбора.ЗагрузитьЗначения(ПолучитьМассивВыбора(Объект.Проект));
	Объект.Сотрудники.Очистить()
	
КонецПроцедуры

#КонецОбласти

#Область Статус 

// ++ Спиридонов А.И. 09.12.2024
&НаКлиенте
Процедура СтатусОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущийСтатус = Объект.Статус;
	Если НавигационнаяСсылкаФорматированнойСтроки = "Согласовать" Тогда
		СогласоватьПереработки();	
	//ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "Утвердить" Тогда
	//	УтвердитьПереработкиИтог();
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтправитьНаСогласование" Тогда
		ОтправитьНаСогласование();
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "Отменить" Тогда
		ОтменитьСогласование();	
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтменитьИтог" Тогда
		ОтменитьСогласованиеИтог(); 
	КонецЕсли;
	
	Попытка
		ЗаписьВыполненаУспешно = Записать(); 
	Исключение
		ЗаписьВыполненаУспешно = Ложь;		
	КонецПопытки;
	//
	//Если Не ЗаписьВыполненаУспешно Тогда
	//	Объект.Статус = ТекущийСтатус;
	//Иначе
	//	Модифицированность = Ложь;
	//КонецЕсли;
	
КонецПроцедуры

// ++ Спиридонов А.И. 09.12.2024
&НаКлиенте
Процедура СогласоватьПереработки()
	
	ПрошлыйСтатус = Объект.Статус;
	
	Если ПолучитьРольСогласованиеПереработок(ТекущийПользователь) Тогда 
			Объект.Статус = ПредопределенноеЗначение("Перечисление.ЭП_СтатусыДокументаУтверждениеПереработок.СогласованОтветственными");
			Если ТекстПоручения = "" Тогда
				ИсполнительУтвержденияПереработок = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
				ТекстПоручения = "Переработки по документу согласованы: " + ТекущийПользователь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// ++ Спиридонов А.И. 09.12.2024
&НаКлиенте
Процедура УтвердитьПереработкиИтог()
	
	ПрошлыйСтатус = Объект.Статус;
	
	Для Каждого СтрокаТЗ Из Объект.Сотрудники Цикл
		Если НЕ (ЗначениеЗаполнено(СтрокаТЗ.ЧасыПереработок))  
			Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Вы заполнили не все поля!";
			Сообщение.Сообщить();
			Возврат;				   
		КонецЕсли;	
	КонецЦикла;	
		
	//Если ПолучитьРольУтвержденияПереработок(ТекущийПользователь) Или ПолучитьРольСогласованиеПереработок(ТекущийПользователь) Тогда	
	//	СоздатьЗаписьВРегистреИтогов(Истина, Истина, Истина);
	//	Объект.Статус = ПредопределенноеЗначение("Перечисление.ЭП_СтатусыДокументаУтверждениеПереработок.Утвержден");
	//	Если ТекстПоручения = "" Тогда
	//		ИсполнительУтвержденияПереработок = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	//		ТекстПоручения = "Окончательно утвержден: " + ТекущийПользователь;
	//	КонецЕсли;
	//Иначе
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'У вас нет прав для утверждения переработок'"));
	//	Возврат;
	//КонецЕсли;
	
КонецПроцедуры 

// ++ Спиридонов А.И. 09.12.2024
&НаКлиенте
Процедура ОтправитьНаСогласование() 
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПрошлыйСтатус = Объект.Статус;
	КонецЕсли;
	
	Объект.Статус = ПредопределенноеЗначение("Перечисление.ЭП_СтатусыДокументаУтверждениеПереработок.НаСогласовании");
	Если ТекстПоручения = "" И ЗначениеЗаполнено(Объект.Сотрудники) И ЗначениеЗаполнено(Объект.Проект) Тогда
		ИсполнительУтвержденияПереработок = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
		ТекстПоручения = "Документ отправлен " +
		ТекущийПользователь + "  на согласование ответственными";
	КонецЕсли;

КонецПроцедуры

// ++ Спиридонов А.И. 09.12.2024
&НаКлиенте
Процедура ОтменитьСогласование()
	
	ПрошлыйСтатус = Объект.Статус;
	
    СоздатьЗаписьВРегистреИтогов(Ложь, Ложь, Ложь);
	Объект.Статус = ПредопределенноеЗначение("Перечисление.ЭП_СтатусыДокументаУтверждениеПереработок.Отменен");
	Если ТекстПоручения = "" Тогда
		ИсполнительУтвержденияПереработок = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
		ТекстПоручения = "Переработки по документу отменены: " + ТекущийПользователь; 
		Объект.ОповещениеСообщений = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// ++ Спиридонов А.И. 09.12.2024
&НаКлиенте
Процедура ОтменитьСогласованиеИтог()
	
    СоздатьЗаписьВРегистреИтогов(Ложь, Ложь, Ложь);
	Объект.Статус = ПредопределенноеЗначение("Перечисление.ЭП_СтатусыДокументаУтверждениеПереработок.Отменен");	
	Если ТекстПоручения = "" Тогда
		ИсполнительУтвержденияПереработок = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
		ТекстПоручения = "Переработки по документу отменены: " + ТекущийПользователь;
	КонецЕсли;
	
КонецПроцедуры

// ++ Спиридонов А.И. 09.12.2024
&НаСервере
Процедура ОбновитьСтатусПереработок()
	
	ДоступнаРольПланированиеПереработок = ПолучитьРольПланированиеПереработок(ТекущийПользователь); 
	ДоступнаРольСогласованиеПереработок = ПолучитьРольСогласованиеПереработок(ТекущийПользователь);
	ДоступнаРольУтверждениеПереработок = ПолучитьРольУтвержденияПереработок(ТекущийПользователь);

	ТекСтатус = Объект.Статус;
	СтрокаСтатуса = Строка(ТекСтатус);
	
	Если Объект.Ссылка.Пустая() Тогда	
		Если ДоступнаРольПланированиеПереработок 
			Или ДоступнаРольСогласованиеПереработок Или ДоступнаРольУтверждениеПереработок Тогда
			//СтрокаДальнейшееДействие = ФорматированнаяСтрокаСГиперссылкой(НРег(НСтр("ru = 'Отправить на согласование'")), "ОтправитьНаСогласование", , ЦветаСтиля.ЗонаЗадачиЗеленый);
			СтрокаСтатуса = Новый ФорматированнаяСтрока(НСтр("ru = 'Новый документ'"));
			//Статус = Новый ФорматированнаяСтрока(СтрокаСтатуса, ", ", СтрокаДальнейшееДействие); 
			Статус = Новый ФорматированнаяСтрока(СтрокаСтатуса);
			Возврат;
		Иначе
			Статус = Новый ФорматированнаяСтрока(НСтр("ru = 'Новый документ'"));
			Возврат;
		КонецЕсли; 
	ИначеЕсли Не Объект.Ссылка.Пустая()
		И ТекСтатус = ПредопределенноеЗначение("Перечисление.ЭП_СтатусыДокументаУтверждениеПереработок.НовыйДокумент") Тогда
		Если ДоступнаРольПланированиеПереработок 
			Или ДоступнаРольСогласованиеПереработок Или ДоступнаРольУтверждениеПереработок Тогда
			СтрокаДальнейшееДействие = ФорматированнаяСтрокаСГиперссылкой(НРег(НСтр("ru = 'Отправить на согласование'")), "ОтправитьНаСогласование", , ЦветаСтиля.ЗонаЗадачиЗеленый);
			СтрокаСтатуса = Новый ФорматированнаяСтрока(НСтр("ru = 'Новый документ'"));
			Статус = Новый ФорматированнаяСтрока(СтрокаСтатуса, ", ", СтрокаДальнейшееДействие);
			Возврат;
		Иначе
			Статус = Новый ФорматированнаяСтрока(НСтр("ru = 'Новый документ'"));
			Возврат;
		КонецЕсли; 	
	КонецЕсли;
	
	Если ТекСтатус = ПредопределенноеЗначение("Перечисление.ЭП_СтатусыДокументаУтверждениеПереработок.НаСогласовании") Тогда 	
		Если ДоступнаРольПланированиеПереработок Тогда 
			СтрокаСтатуса = Новый ФорматированнаяСтрока("На согласовании ответственными."); 
		КонецЕсли;
		Если ДоступнаРольУтверждениеПереработок Тогда
			СтрокаСтатуса = Новый ФорматированнаяСтрока("На согласовании ответственными.");
		КонецЕсли;
		Если ДоступнаРольСогласованиеПереработок Тогда
			СтрокаДальнейшееДействие = ФорматированнаяСтрокаСГиперссылкой(НСтр("ru = 'Согласовать переработки'"), "Согласовать", , ЦветаСтиля.ЗонаЗадачиЗеленый);
			СтрокаДальнейшееДействиеОтмена = ФорматированнаяСтрокаСГиперссылкой(НРег(НСтр("ru = 'Отменить'")), "Отменить", , ЦветаСтиля.ЗонаЗадачиКрасный);
			СтрокаСтатуса = Новый ФорматированнаяСтрока(СтрокаДальнейшееДействие, " или ", СтрокаДальнейшееДействиеОтмена);
		КонецЕсли; 
	ИначеЕсли ТекСтатус = ПредопределенноеЗначение("Перечисление.ЭП_СтатусыДокументаУтверждениеПереработок.СогласованОтветственными") Тогда 	
		Если ДоступнаРольУтверждениеПереработок Тогда 
			//СтрокаДальнейшееДействие = ФорматированнаяСтрокаСГиперссылкой(НСтр("ru = 'Утвердить документ'"), "Утвердить", , ЦветаСтиля.ЗонаЗадачиЗеленый);
			СтрокаДальнейшееДействиеОтмена = ФорматированнаяСтрокаСГиперссылкой(НРег(НСтр("ru = 'Согласовано. Отменить'")), "Отменить", , ЦветаСтиля.ЗонаЗадачиКрасный);
			СтрокаСтатуса = Новый ФорматированнаяСтрока(СтрокаДальнейшееДействиеОтмена);
		ИначеЕсли ДоступнаРольСогласованиеПереработок Тогда 
			//СтрокаДальнейшееДействие = ФорматированнаяСтрокаСГиперссылкой(НСтр("ru = 'Утвердить документ'"), "Утвердить", , ЦветаСтиля.ЗонаЗадачиЗеленый);
			СтрокаДальнейшееДействиеОтмена = ФорматированнаяСтрокаСГиперссылкой(НРег(НСтр("ru = 'Согласовано. Отменить'")), "Отменить", , ЦветаСтиля.ЗонаЗадачиКрасный);
			СтрокаСтатуса = Новый ФорматированнаяСтрока(СтрокаДальнейшееДействиеОтмена);
		Иначе
			СтрокаСтатуса = Новый ФорматированнаяСтрока("На согласовании ответственными.");
		КонецЕсли;
	//ИначеЕсли ТекСтатус = ПредопределенноеЗначение("Перечисление.ЭП_СтатусыДокументаУтверждениеПереработок.Утвержден") Тогда 
	//	СтрокаСтатуса = Новый ФорматированнаяСтрока("Утвержден", , ЦветаСтиля.ЗонаЗадачиЗеленый);	
	ИначеЕсли ТекСтатус = ПредопределенноеЗначение("Перечисление.ЭП_СтатусыДокументаУтверждениеПереработок.Отменен") Тогда	
		СтрокаДальнейшееДействие = ФорматированнаяСтрокаСГиперссылкой(НРег(НСтр("ru = 'Отправить на повторное согласование'")), "ОтправитьНаСогласование", , ЦветаСтиля.ЗонаЗадачиЗеленый);
		СтрокаТекущееСостояние = Новый ФорматированнаяСтрока("Отменен", , ЦветаСтиля.ЗонаЗадачиКрасный);
		СтрокаСтатуса = Новый ФорматированнаяСтрока(СтрокаТекущееСостояние, ", ", СтрокаДальнейшееДействие);
	КонецЕсли;	
	
	Статус = СтрокаСтатуса;
	
	УстановитьУсловноеОформлениеПоРолям();
		
КонецПроцедуры

// ++ Спиридонов А.И. 09.12.2024
Функция ФорматированнаяСтрокаСГиперссылкой(ТекстСтроки, ТекстГиперссылки, ВыводитьГиперссылку = Истина, ЦветТекста = Неопределено)
	
	Если ЦветТекста = Неопределено Тогда
		ЦветТекста = ЦветаСтиля.ЦветГиперссылкиЗадачи;
	КонецЕсли;
	
	Если ВыводитьГиперссылку Тогда	
		СформированнаяСтрока =  Новый ФорматированнаяСтрока(ТекстСтроки, , ЦветТекста, , ТекстГиперссылки);
	Иначе
		СформированнаяСтрока = Новый ФорматированнаяСтрока(ТекстСтроки, , ЦветТекста);	
	КонецЕсли;

	Возврат СформированнаяСтрока;
	
КонецФункции 

#КонецОбласти

#Область ОбработчикиСобытийТабличнойЧастиСотрудники

// ++ Спиридонов А.И. 09.12.2024
 &НаКлиенте
Процедура СотрудникиСотрудникНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
    	
	Если Не Объект.Проект.Пустая() И ЗначениеЗаполнено(Элементы.Сотрудники.ТекущиеДанные.Департамент) Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПередачи = Объект.Проект;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Проект", ПараметрыПередачи);
		ПараметрыФормы.Вставить("Департамент", Элементы.Сотрудники.ТекущиеДанные.Департамент);
		ОткрытьФорму("Справочник.ЭП_Сотрудники.Форма.ФормаВыбораПереработки", ПараметрыФормы, ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс); 	
	Иначе                                                                                                    
		СтандартнаяОбработка = Ложь;
		ПоказатьПредупреждение(, "Не заполнен проект или поле табличной части департамент, работа подбора не возможна", , "Предупреждение"); 
		Возврат;
		
	КонецЕсли;
		
КонецПроцедуры

// ++ Спиридонов А.И. 09.12.2024
&НаКлиенте
Процедура СотрудникиДатаПриИзменении(Элемент) 
	
	Суббота = 6;
	Воскресенье = 7;
	ИндексСтроки = Элементы.Сотрудники.ТекущаяСтрока;
	СтрокаТЧ = Объект.Сотрудники.НайтиПоИдентификатору(ИндексСтроки);
    День = ДеньНедели(СтрокаТЧ.Дата); 
	
	Если СтрокаТЧ.Дата < НачалоМесяца(Объект.Дата) Или СтрокаТЧ.Дата > КонецМесяца(Объект.Дата) + 86400*14 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выбрана дата не входящая в расчетный период");		
		СтрокаТЧ.Дата = Дата(1 , 1, 1);		
	ИначеЕсли День = Суббота Или День = Воскресенье Тогда		
		СтрокаТЧ.ЧасыПоТабелю = 0;		
	Иначе
		СотрудникиДатаПриИзмененииНаСервере(Элементы.Сотрудники.ТекущиеДанные.Сотрудник, Элементы.Сотрудники.ТекущаяСтрока,  
		Элементы.Сотрудники.ТекущиеДанные.Дата); 		
	КонецЕсли;
	
КонецПроцедуры

// ++ Спиридонов А.И. 09.12.2024
&НаКлиенте
Процедура СотрудникиЗадачаНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	Если НЕ Объект.Проект.Пустая() И ЗначениеЗаполнено(Элементы.Сотрудники.ТекущиеДанные.Департамент)  Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПередачи = Объект.Проект;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЭП_Проект", ПараметрыПередачи);
		ПараметрыФормы.Вставить("Предмет", Элементы.Сотрудники.ТекущиеДанные.ТехническийПроект);
		ПараметрыФормы.Вставить("РазделПроекта", Элементы.Сотрудники.ТекущиеДанные.Этап);
		ПараметрыФормы.Вставить("Сотрудник", Элементы.Сотрудники.ТекущиеДанные.Сотрудник);
		ОткрытьФорму("Справочник.ЗадачиПроцесса.Форма.ФормаВыбораЗадачиПланированиеПереработок", ПараметрыФормы, 
		ЭтотОбъект, , , , ,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс); 	
	Иначе
		СтандартнаяОбработка = Ложь;
		ПоказатьПредупреждение(,"Не заполнен проект или поле табличной части департамент, работа подбора не возможна",,"Предупреждение"); 
		Возврат; 
	КонецЕсли;

КонецПроцедуры


#КонецОбласти

#Область КомандФормы  

// ++ Спиридонов А.И. 09.12.2024
&НаКлиенте
Процедура ПослеПоказаПредупреждения(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда	
		Объект.Сотрудники.Очистить();
		Если НЕ ЗначениеЗаполнено(Объект.Сотрудники) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Переработок по этому проекту у сотрудников нет.";
			Сообщение.Сообщить();	
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

// ++ Спиридонов А.И. 09.12.2024
&НаКлиенте
Процедура ИсполнительУтвержденияПереработокОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка)
	
	ИсполнительУтвержденияПереработок = ВыбранноеЗначение; 
	
КонецПроцедуры 
// ++ Спиридонов А.И. 19.12.2024
&НаКлиенте
Процедура ПодобратьЧасыПереработок(Команда)
	
	ПодобратьЧасыПереработокНаСервере();
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедуры 

#Область ОтправкаПочтовыхСообщений

// ++ Спиридонов А.И. 09.12.2024
&НаСервере
Процедура ОтправитьПисьмаОтветственным() 
	
	МассивДанныхПользователей = ЭП_ПочтовыеФункции.ПолучитьМассивОтветственных(Объект.Проект);
	//МассивДанныхПользователей.Удалить(0);
	//МассивДанныхПользователей.Удалить(0);
	УстановитьПривилегированныйРежим(Истина);

	Если МассивДанныхПользователей.Количество() Тогда 
								
		Для Каждого СтрокаМассиваДанныхПользователей Из МассивДанныхПользователей Цикл
			
			ТекстПисьма = ЭП_ПочтовыеФункции.СоздатьТекстПисьма(СтрокаМассиваДанныхПользователей.Ответственный, 
			СтрокаМассиваДанныхПользователей.Департамент, Объект.Сотрудники, Объект.Проект, Объект.Ссылка);
			
			СформироватьЗаписьВРегистреОтправкиПочты(СтрокаМассиваДанныхПользователей.АдресЭП, Объект.Ссылка, 
			СтрокаМассиваДанныхПользователей.Ответственный, ТекстПисьма, Ложь, Ложь);
											
		КонецЦикла;
		
	Иначе 
		
		ТекстПисьма = "";
		АдресЭП = "";
		Ответственный = Справочники.ЭП_Сотрудники.ПустаяСсылка();
		СформироватьЗаписьВРегистреОтправкиПочты(АдресЭП, Объект.Ссылка, Ответственный, ТекстПисьма, Истина, Ложь);
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// ++ Спиридонов А.И. 09.12.2024     
&НаСервере
Функция СоздатьТекстПисьма(Ответственный, Департамент)
		
	HTMLТекст = 
	"<html>
	|<head>
	|<meta http-equiv=Content-Type content=""text/html; charset=windows-1251"">
	|<meta name=Generator content=""Microsoft Word 14 (filtered)"">
	|<style type=""text/css"">
	|
	|    body {
	|         margin-top: 2px;
	|         margin-left: 2px;
	|         margin-right: 2px;
	|         font-family: Arial; 
	|         font-size: 12pt;}
	|    table {
	|          border: 1px solid #000;
	|          border-collapse: collapse;
	|        	text-align: center;}
	|    td {
	|       border: 1px solid;
	|		text-align: center;}
	|    th {
	|       border: 1px solid;
	|		text-align: center;}
	|    a:link {
	|           color: #006699;} 
	|    a:hover {
	|            color: #006699; 
	|            text-decoration: underline;}
	|    p {
	|      margin-top: 10px;}
	|    img {
	|        width: 150;
	|        height: 150}
	|
	|</style>
	|</head>";
		
	HTMLТекст = HTMLТекст + "<body>";
	
	HTMLТекст = HTMLТекст + "<font color=#413003>";
	HTMLТекст = HTMLТекст + "Здравствуйте, ";
	HTMLТекст = HTMLТекст + "</font>";
	HTMLТекст = HTMLТекст + Ответственный;
	HTMLТекст = HTMLТекст + "<br>"; 
	
	HTMLТекст = HTMLТекст + "<font color=#413003>";
	HTMLТекст = HTMLТекст + "Создано утверждение переработок по проекту: ";
	HTMLТекст = HTMLТекст + "</font>";
	HTMLТекст = HTMLТекст + Объект.Проект;
	HTMLТекст = HTMLТекст + "<br>";  
	
	HTMLТекст = HTMLТекст + "<font color=#413003>";
	HTMLТекст = HTMLТекст + "Ссылка на документ в тонком клиенте: ";
	HTMLТекст = HTMLТекст + "</font>";
	HTMLТекст = HTMLТекст + ПолучитьНавигационнуюСсылку(Объект.Ссылка);
	HTMLТекст = HTMLТекст + "<br>";
	
	HTMLТекст = HTMLТекст + "<font color=#413003>";
	HTMLТекст = HTMLТекст + "Ссылка на документ в веб-клиенте: ";
	HTMLТекст = HTMLТекст + "</font>";
	HTMLТекст = HTMLТекст + "<a href=";
	HTMLТекст = HTMLТекст + "http://prod-1c.edit-pro.ru/prod_ep_sppr/#e1cib/data/";
	HTMLТекст = HTMLТекст + СтрЗаменить(ПолучитьНавигационнуюСсылку(Объект.Ссылка),"e1cib/data/",""); 	
	HTMLТекст = HTMLТекст + "target=""_blank""";
	HTMLТекст = HTMLТекст + ">";
	HTMLТекст = HTMLТекст + "Ссылка";
	HTMLТекст = HTMLТекст + "</a>";
	HTMLТекст = HTMLТекст + "<br>";
	
	HTMLТекст = HTMLТекст + "<font color=#413003>";
	HTMLТекст = HTMLТекст + "Следующие сотрудники имеют переработки:";
	HTMLТекст = HTMLТекст + "</font>";
	HTMLТекст = HTMLТекст + "<br>";
	
	HTMLТекст = HTMLТекст + "<table>";
	HTMLТекст = HTMLТекст + "<tr>";   
	HTMLТекст = HTMLТекст + "<th>Департамент</th>";
	HTMLТекст = HTMLТекст + "<th>Сотрудник</th>";
	HTMLТекст = HTMLТекст + "<th>Этап</th>";
	HTMLТекст = HTMLТекст + "<th>Технический проект</th>";
	HTMLТекст = HTMLТекст + "<th>Задача</th>";
	HTMLТекст = HTMLТекст + "<th>Дата</th>";
	HTMLТекст = HTMLТекст + "<th>Часы по табелю</th>";
	HTMLТекст = HTMLТекст + "<th>Часы переработок</th>";
	HTMLТекст = HTMLТекст + "<th>Часы фактические</th>";
	HTMLТекст = HTMLТекст + "<th>Отгул</th>";
	HTMLТекст = HTMLТекст + "</tr>";
	
	Для Каждого Элемент Из Объект.Сотрудники Цикл
		
		Если Департамент = 0 ИЛИ Элемент.Департамент = Департамент Тогда
			
			HTMLТекст = HTMLТекст + "<tr>";
			HTMLТекст = HTMLТекст + "<td>" + Элемент.Департамент + "</td>";
			HTMLТекст = HTMLТекст + "<td>" + Элемент.Сотрудник + "</td>"; 
			HTMLТекст = HTMLТекст + "<td>" + Элемент.Этап + "</td>";
			HTMLТекст = HTMLТекст + "<td>" + Элемент.ТехническийПроект + "</td>";
			HTMLТекст = HTMLТекст + "<td>" + Элемент.Задача + "</td>";
			HTMLТекст = HTMLТекст + "<td>" + Элемент.Дата + "</td>";
			HTMLТекст = HTMLТекст + "<td>" + Элемент.ЧасыПоТабелю + "</td>";
			HTMLТекст = HTMLТекст + "<td>" + Элемент.ЧасыПереработок + "</td>";
			HTMLТекст = HTMLТекст + "<td>" + Элемент.Отгул + "</td>";
			HTMLТекст = HTMLТекст + "</tr>";
			
		КонецЕсли;
		
	КонецЦикла;
	
	HTMLТекст = HTMLТекст + "</table>";
	
	Возврат HTMLТекст;
	
КонецФункции

// ++ Спиридонов А.И. 09.12.2024
&НаСервереБезКонтекста
Процедура СформироватьЗаписьВРегистреОтправкиПочты(АдресЭП, ДокументРегистратор, Пользователь, ТекстПисьма, ОтсутсвуютДругиеПользователиВРассылке, Отправлен)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ОтсутсвуютДругиеПользователиВРассылке Тогда
		МенеджерЗаписи = РегистрыСведений.ЭП_СостоянияОтправкиПочтовыхПием.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ТекстПисьма = Новый ХранилищеЗначения(ТекстПисьма, Новый СжатиеДанных()); 
		МенеджерЗаписи.Почта = АдресЭП;
		МенеджерЗаписи.ОтсутсвуютДругиеПользователиВРассылке = ОтсутсвуютДругиеПользователиВРассылке;
		МенеджерЗаписи.ДокументРегситратор = ДокументРегистратор;
		МенеджерЗаписи.Пользователь = Пользователь;
		МенеджерЗаписи.Период = ТекущаяДатаСеанса();
		МенеджерЗаписи.Отправлен = Отправлен;
		МенеджерЗаписи.Записать();
	Иначе
		МенеджерЗаписи = РегистрыСведений.ЭП_СостоянияОтправкиПочтовыхПием.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ТекстПисьма = Новый ХранилищеЗначения(ТекстПисьма, Новый СжатиеДанных()); 
		МенеджерЗаписи.Почта = АдресЭП;
		МенеджерЗаписи.ОтсутсвуютДругиеПользователиВРассылке = ОтсутсвуютДругиеПользователиВРассылке;
		МенеджерЗаписи.ДокументРегситратор = ДокументРегистратор;
		МенеджерЗаписи.Пользователь = Пользователь;
		МенеджерЗаписи.Период = ТекущаяДатаСеанса();
		МенеджерЗаписи.Отправлен = Отправлен;
		МенеджерЗаписи.Записать();	
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

#КонецОбласти

#Область ТабличнаяЧастьСотрудники

// ++ Спиридонов А.И. 09.12.2024
 &НаСервере
Процедура СотрудникиДатаПриИзмененииНаСервере(Знач Сотрудник, Знач ТекущаяСтрока, Знач Дата)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭП_ДанныеТабельногоУчетаРабочегоВремениСотрудников.Часы КАК Часы
		|ИЗ
		|	РегистрСведений.ЭП_ДанныеТабельногоУчетаРабочегоВремениСотрудников КАК ЭП_ДанныеТабельногоУчетаРабочегоВремениСотрудников
		|ГДЕ
		|	ЭП_ДанныеТабельногоУчетаРабочегоВремениСотрудников.Сотрудник = &Сотрудник
		|	И НАЧАЛОПЕРИОДА(ЭП_ДанныеТабельногоУчетаРабочегоВремениСотрудников.ПериодРегистрацииДень, ДЕНЬ) = НАЧАЛОПЕРИОДА(&ПериодРегистрацииДень, ДЕНЬ)";
		
	Запрос.УстановитьПараметр("ПериодРегистрацииДень", Дата);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	
	РезультатЗапроса = Запрос.Выполнить();	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаТЧ = Объект.Сотрудники.НайтиПоИдентификатору(ТекущаяСтрока);
		СтрокаТЧ.ЧасыПоТабелю = Выборка.Часы; 
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область УстановкаУсловногоОформленияПоРолям

// ++ Спиридонов А.И. 09.12.2024
&НаСервере
Процедура УстановитьУсловноеОформлениеПоРолям()
	
	Если Пользователи.ЭтоПолноправныйПользователь() Или ПолучитьРольСогласованиеПереработок(ТекущийПользователь) Тогда
		Возврат;
	КонецЕсли;
		                                            
	ЭлементыДляБлокировки = ПолучитьЭлементыДляБлокировки();	
	ЭлементыДляНеОбязательнойБлокировки = ПолучитьЭлементыДляНеОбязательнойБлокировки();
	
	ТекСтатус = Объект.Статус;
	
	РольПланированиеПереработокДоступна = ПолучитьРольПланированиеПереработок(ТекущийПользователь);
	РольУтверждениеПереработокДоступна = ПолучитьРольУтвержденияПереработок(ТекущийПользователь);

	Если РольПланированиеПереработокДоступна Тогда 
		
		Если ТекСтатус = ПредопределенноеЗначение("Перечисление.ЭП_СтатусыДокументаУтверждениеПереработок.НаСогласовании")  Тогда
			
			ЭП_ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, ЭлементыДляБлокировки, "Доступность", Ложь);
			ЭП_ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, ЭлементыДляНеОбязательнойБлокировки, "Доступность", Ложь); 
			
		ИначеЕсли ТекСтатус = ПредопределенноеЗначение("Перечисление.ЭП_СтатусыДокументаУтверждениеПереработок.СогласованОтветственными") Тогда 
			
			ЭП_ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, ЭлементыДляБлокировки, "Доступность", Ложь);
			ЭП_ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, ЭлементыДляНеОбязательнойБлокировки, "Доступность", Истина); 
			
		//ИначеЕсли ТекСтатус = ПредопределенноеЗначение("Перечисление.ЭП_СтатусыДокументаУтверждениеПереработок.Утвержден") Тогда
		//	
		//	ЭП_ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, ЭлементыДляБлокировки,"Доступность", Ложь);
		//	ЭП_ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, ЭлементыДляНеОбязательнойБлокировки, "Доступность", Ложь);
			
		ИначеЕсли ТекСтатус = ПредопределенноеЗначение("Перечисление.ЭП_СтатусыДокументаУтверждениеПереработок.Отменен") Тогда
			
			ЭП_ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, ЭлементыДляБлокировки, "Доступность" , Истина);
			ЭП_ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, ЭлементыДляНеОбязательнойБлокировки , "Доступность", Истина);
			
		КонецЕсли;
		
	ИначеЕсли РольУтверждениеПереработокДоступна Тогда
		
		Если ТекСтатус = ПредопределенноеЗначение("Перечисление.ЭП_СтатусыДокументаУтверждениеПереработок.НаСогласовании") Тогда
			
			ЭП_ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, ЭлементыДляБлокировки, "Доступность" ,Ложь);
			ЭП_ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, ЭлементыДляНеОбязательнойБлокировки, "Доступность", Ложь);
			
		ИначеЕсли ТекСтатус = ПредопределенноеЗначение("Перечисление.ЭП_СтатусыДокументаУтверждениеПереработок.СогласованОтветственными") Тогда 
			
			ЭП_ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, ЭлементыДляБлокировки, "Доступность" ,Ложь);
			ЭП_ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, ЭлементыДляНеОбязательнойБлокировки, "Доступность", Истина); 
			Элементы.ГруппаСтатус.Доступность = Истина;
						
		//ИначеЕсли ТекСтатус = ПредопределенноеЗначение("Перечисление.ЭП_СтатусыДокументаУтверждениеПереработок.Утвержден") Тогда
		//	
		//	ЭП_ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, ЭлементыДляБлокировки, "Доступность" ,Ложь);
		//	ЭП_ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, ЭлементыДляНеОбязательнойБлокировки, "Доступность", Ложь);
			
		ИначеЕсли ТекСтатус = ПредопределенноеЗначение("Перечисление.ЭП_СтатусыДокументаУтверждениеПереработок.Отменен") Тогда	
			
			ЭП_ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, ЭлементыДляБлокировки, "Доступность" , Истина);
			ЭП_ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, ЭлементыДляНеОбязательнойБлокировки, "Доступность", Истина);
			
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

// ++ Спиридонов А.И. 09.12.2024
&НаСервереБезКонтекста
Функция ПолучитьСтрокуЭлементовДляОбязательнойБлокировки()

	Возврат "ГруппаСтатус,ГруппаНомерИДата,ГруппаОтветственный,СотрудникиНомерСтроки,СотрудникиДепартамент,СотрудникиСотрудник,СотрудникиЭтап," +
			"СотрудникиТехническийПроект,СотрудникиЗадача,СотрудникиДата,СотрудникиЧасыПереработок,Ответственный";
	
КонецФункции

// ++ Спиридонов А.И. 09.12.2024
&НаСервереБезКонтекста
Функция ПолучитьСтрокуЭлементовДляНеОбязательнойБлокировке()
	
	Возврат "СотрудникиОтгул";

КонецФункции 

// ++ Спиридонов А.И. 09.12.2024
&НаСервереБезКонтекста
Функция ПолучитьЭлементыДляБлокировки() 
		
	СтрокаЭлементовДляОбязательнойБлокировки = ПолучитьСтрокуЭлементовДляОбязательнойБлокировки();
	Возврат СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаЭлементовДляОбязательнойБлокировки);
	
КонецФункции

// ++ Спиридонов А.И. 09.12.2024
&НаСервереБезКонтекста
Функция ПолучитьЭлементыДляНеОбязательнойБлокировки() 
	
	СтрокаЭлементовДляНеОбязательнойБлокировке = ПолучитьСтрокуЭлементовДляНеОбязательнойБлокировке();
	СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаЭлементовДляНеОбязательнойБлокировке);
	Возврат СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаЭлементовДляНеОбязательнойБлокировке);
	
КонецФункции

#КонецОбласти

// ++ Спиридонов А.И. 09.12.2024
&НаСервереБезКонтекста
Функция ПолучитьМассивВыбора(Знач Проект)
				
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаДляМассиваВыбора();
		
	УстановитьПривилегированныйРежим(Истина);

	Индентификатор = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли["ЭП_ОтправкаПисем"]);
	Запрос.УстановитьПараметр("Роль", Индентификатор);
	Запрос.УстановитьПараметр("Проект", Проект);	
	
	ТаблицаСотрудников = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
	
	УстановитьПривилегированныйРежим(Ложь);

	Возврат ТаблицаСотрудников;
	
КонецФункции 

// ++ Спиридонов А.И. 09.12.2024
&НаСервере
Процедура СоздатьЗаписьВРегистреИтогов(Знач Согласовано, Знач ИтогСогласованияПлан, Знач ИтогСогласованияФакт)
	
	Запись = РегистрыСведений.ЭП_ИтогиСогласованияПереработок.СоздатьМенеджерЗаписи();
	Запись.Документ = Объект.Ссылка;
	Запись.Проект = Объект.Проект;
	Запись.Сотрудник = ТекущийПользователь;
	Запись.Период = ТекущаяДатаСеанса();
	Запись.Согласовано = Согласовано;
	Запись.ИтогСогласованияПлан = ИтогСогласованияПлан;
	Запись.ИтогСогласованияФакт = ИтогСогласованияФакт;
	Запись.Записать();
				
КонецПроцедуры 

// ++ Спиридонов А.И. 09.12.2024
&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.ЗадачиПроцесса.Форма.ФормаВыбораЗадачиПланированиеПереработок" Тогда
		ДобавитьЗаписьИзФормыВыбора(ВыбранноеЗначение.Ссылка, Элементы.Сотрудники.ТекущаяСтрока);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.ЭП_Сотрудники.Форма.ФормаВыбораПереработки" Тогда
		ДобавитьЗаписьИзФормыВыбора(ВыбранноеЗначение.Сотрудник, Элементы.Сотрудники.ТекущаяСтрока); 
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.Проекты.Форма.ФормаВыбора" Тогда 
		ДобавитьЗаписьИзФормыВыбора(ВыбранноеЗначение, "");
	КонецЕсли;

КонецПроцедуры

// ++ Спиридонов А.И. 09.12.2024
&НаСервере
Процедура ДобавитьЗаписьИзФормыВыбора(Знач Выбор, Знач ИндексСтроки)
	
	Если ТипЗнч(Выбор) = Тип("СправочникСсылка.ЭП_Сотрудники") Тогда 
		СтрокаТЧ = Объект.Сотрудники.НайтиПоИдентификатору(ИндексСтроки);
		СтрокаТЧ.Сотрудник = Выбор;
	ИначеЕсли ТипЗнч(Выбор) = Тип("СправочникСсылка.ЗадачиПроцесса") Тогда
		СтрокаТЧ = Объект.Сотрудники.НайтиПоИдентификатору(ИндексСтроки);
		СтрокаТЧ.Задача = Выбор;
	ИначеЕсли ТипЗнч(Выбор) = Тип("СправочникСсылка.Проекты") Тогда
		Объект.Проект = Выбор;
	КонецЕсли;
	
КонецПроцедуры 

// ++ Спиридонов А.И. 09.12.2024
&НаСервереБезКонтекста
Процедура СформироватьЗаписьВРегистреИсторияСообщений(Проект, Ссылка)
				
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаДляОтправкиУведомлений(); 
		
	УстановитьПривилегированныйРежим(Истина);

	Индентификатор = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли["ЭП_ОтправкаПисем"]);
	Запрос.УстановитьПараметр("Роль", Индентификатор);
	Запрос.УстановитьПараметр("Проект", Проект);

	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать(); 
		
		Пока Выборка.Следующий() Цикл  
			
			МенеджерЗаписи = РегистрыСведений.ЭП_ИсторияСообщений.СоздатьМенеджерЗаписи(); 
			МенеджерЗаписи.Период = ТекущаяДатаСеанса();
			МенеджерЗаписи.Сотрудник = Выборка.Пользователь; 
			МенеджерЗаписи.Проект = Проект; 
			МенеджерЗаписи.Документ = Ссылка;
			МенеджерЗаписи.Оповещен = Ложь; 
			МенеджерЗаписи.Записать(); 
			
		КонецЦикла;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

#Область ПроверкаДанныхдокумента 

// ++ Спиридонов А.И. 09.12.2024
&НаСервере
Функция ПроверитьТабличнуюЧастьНаДублиСтрок()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Таблица", Объект.Сотрудники.Выгрузить());
	Запрос.Текст = ПолучитьТекстЗапросаПроверкиНаДублиСтрок();	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выб_Сотрудники = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Выб_Сотрудники.Следующий() Цикл
			Выборка = Выб_Сотрудники.Выбрать();
			Сообщение = "";
			Пока Выборка.Следующий() Цикл
				Сообщение = Сообщение + ?(ПустаяСтрока(Сообщение), "", ", ") + Выборка.НомерСтроки;
			КонецЦикла;
			Сообщение = "Обнаружено дублирование строк: " + Сообщение + " у сотрудника " + Выб_Сотрудники.Сотрудник;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение);		
		КонецЦикла;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли; 
	
КонецФункции

// ++ Спиридонов А.И. 09.12.2024
&НаСервере
Функция ПроверитьДругиеДокументыНаСотрудников()
		
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаПроверкиДругихДокументов(); 

	УстановитьПривилегированныйРежим(Истина);
	
    МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(Перечисления.ЭП_СтатусыДокументаУтверждениеПереработок.НовыйДокумент);
	МассивСтатусов.Добавить(Перечисления.ЭП_СтатусыДокументаУтверждениеПереработок.НаСогласовании);
	//МассивСтатусов.Добавить(Перечисления.ЭП_СтатусыДокументаУтверждениеПереработок.Утвержден);
	МассивСтатусов.Добавить(Перечисления.ЭП_СтатусыДокументаУтверждениеПереработок.СогласованОтветственными);

	Запрос.УстановитьПараметр("Статусы", МассивСтатусов);
	Запрос.УстановитьПараметр("Документ", Объект.Ссылка);
	Запрос.УстановитьПараметр("Проект", Объект.Проект);

	РезультатЗапроса = Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Ложь);

	ТЗ = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.Прямой); 
	
	МассивСотрудников = Новый Массив; 
	// ++ Спиридонов А.И. 19.12.2024
	// Переписал условия подбора
	Для Каждого СтрокаДанных Из Объект.Сотрудники Цикл
		Отбор = Новый Структура;
		Отбор.Вставить("Сотрудник", СтрокаДанных.Сотрудник);
		Отбор.Вставить("Дата", СтрокаДанных.Дата);
		Отбор.Вставить("ТехническийПроект", СтрокаДанных.ТехническийПроект);
		Отбор.Вставить("Задача", СтрокаДанных.Задача);
	    Отбор.Вставить("Этап", СтрокаДанных.Этап);
        Отбор.Вставить("Проект", Объект.Проект);

		Строки = ТЗ.НайтиСтроки(Отбор);
		// -- Спиридонов А.И. 19.12.2024 	
		Если Строки.Количество() <> 0 Тогда
			СтруктураСотрудника = Новый Структура();
			СтруктураСотрудника.Вставить("Сотрудник", СтрокаДанных.Сотрудник);
			СтруктураСотрудника.Вставить("Дата", СтрокаДанных.Дата);
			МассивСотрудников.Добавить(СтруктураСотрудника);
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивСотрудников.Количество() > 0 Тогда
		Для Каждого СтрокаДанныхСотрудника Из МассивСотрудников Цикл 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрШаблон("По сотруднику %1 на дату %2 уже есть документы, где он фигурирует в списке переработок с такими же данными по этапу, техническому проекту и задаче", 
			СтрокаДанныхСотрудника.Сотрудник, Формат(СтрокаДанныхСотрудника.Дата, "ДЛФ=Д")));
		КонецЦикла;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
		
КонецФункции

// ++ Спиридонов А.И. 09.12.2024
&НаСервереБезКонтекста
Функция ПолучитьТекстЗапросаПроверкиНаДублиСтрок()
	
	Возврат "ВЫБРАТЬ
	        |	ТабЧасть.НомерСтроки КАК НомерСтроки,
	        |	ТабЧасть.Сотрудник КАК Сотрудник,
	        |	ТабЧасть.Этап КАК Этап,
	        |	ТабЧасть.ТехническийПроект КАК ТехническийПроект,
	        |	ТабЧасть.Задача КАК Задача,
	        |	ТабЧасть.Дата КАК Дата,
	        |	ТабЧасть.ЧасыПоТабелю КАК ЧасыПоТабелю,
	        |	ТабЧасть.Департамент КАК Департамент,
	        |	ТабЧасть.Отгул КАК Отгул,
	        |	ТабЧасть.ЧасыПереработок КАК ЧасыПереработок
	        |ПОМЕСТИТЬ ВТ_ТабЧасть
	        |ИЗ
	        |	&Таблица КАК ТабЧасть
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ВТ_ТабЧасть.НомерСтроки КАК НомерСтроки,
	        |	ВТ_ТабЧасть.Сотрудник КАК Сотрудник,
	        |	ВТ_ТабЧасть.Этап КАК Этап,
	        |	ВТ_ТабЧасть.ТехническийПроект КАК ТехническийПроект,
	        |	ВТ_ТабЧасть.Задача КАК Задача,
	        |	ВТ_ТабЧасть.Дата КАК Дата,
	        |	ВТ_ТабЧасть.ЧасыПоТабелю КАК ЧасыПоТабелю,
	        |	ВТ_ТабЧасть.Департамент КАК Департамент,
	        |	ВТ_ТабЧасть.Отгул КАК Отгул,
	        |	ВТ_ТабЧасть.ЧасыПереработок КАК ЧасыПереработок
	        |ИЗ
	        |	ВТ_ТабЧасть КАК ВТ_ТабЧасть
	        |ГДЕ
	        |	(ВТ_ТабЧасть.Сотрудник, ВТ_ТабЧасть.Этап, ВТ_ТабЧасть.ТехническийПроект, ВТ_ТабЧасть.Задача, ВТ_ТабЧасть.Дата, ВТ_ТабЧасть.ЧасыПоТабелю, ВТ_ТабЧасть.Департамент, ВТ_ТабЧасть.Отгул, ВТ_ТабЧасть.ЧасыПереработок) В
	        |			(ВЫБРАТЬ
	        |				ВТ.Сотрудник КАК Сотрудник,
	        |				ВТ.Этап КАК Этап,
	        |				ВТ.ТехническийПроект КАК ТехническийПроект,
	        |				ВТ.Задача КАК Задача,
	        |				ВТ.Дата КАК Дата,
	        |				ВТ.ЧасыПоТабелю КАК ЧасыПоТабелю,
	        |				ВТ.Департамент КАК Департамент,
	        |				ВТ.Отгул КАК Отгул,
	        |				ВТ.ЧасыПереработок КАК ЧасыПереработок
	        |			ИЗ
	        |				ВТ_ТабЧасть КАК ВТ
	        |			СГРУППИРОВАТЬ ПО
	        |				ВТ.Сотрудник,
	        |				ВТ.Этап,
	        |				ВТ.ТехническийПроект,
	        |				ВТ.Задача,
	        |				ВТ.Дата,
	        |				ВТ.ЧасыПоТабелю,
	        |				ВТ.Департамент,
	        |				ВТ.Отгул,
	        |				ВТ.ЧасыПереработок
	        |			ИМЕЮЩИЕ
	        |				КОЛИЧЕСТВО(ВТ.НомерСтроки) > 1)
	        |
	        |УПОРЯДОЧИТЬ ПО
	        |	НомерСтроки
	        |ИТОГИ ПО
	        |	Сотрудник";


КонецФункции 

// ++ Спиридонов А.И. 19.12.2024
// Перписал запрос
&НаСервереБезКонтекста
Функция ПолучитьТекстЗапросаПроверкиДругихДокументов() 
	
	Возврат	"ВЫБРАТЬ
	       	|	ЭП_ПланированиеТрудозатратСотрудники.Сотрудник КАК Сотрудник,
	       	|	ЭП_ПланированиеТрудозатратСотрудники.Этап КАК Этап,
	       	|	ЭП_ПланированиеТрудозатратСотрудники.ТехническийПроект КАК ТехническийПроект,
	       	|	ЭП_ПланированиеТрудозатратСотрудники.Задача КАК Задача,
	       	|	ЭП_ПланированиеТрудозатратСотрудники.Дата КАК Дата,
	       	|	ЭП_ПланированиеТрудозатратСотрудники.Департамент КАК Департамент,
	       	|	ЭП_ПланированиеТрудозатрат.Проект КАК Проект
	       	|ИЗ
	       	|	Документ.ЭП_ПланированиеТрудозатрат.Сотрудники КАК ЭП_ПланированиеТрудозатратСотрудники
	       	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭП_ПланированиеТрудозатрат КАК ЭП_ПланированиеТрудозатрат
	       	|		ПО ЭП_ПланированиеТрудозатратСотрудники.Ссылка = ЭП_ПланированиеТрудозатрат.Ссылка
	       	|ГДЕ
	       	|	ЭП_ПланированиеТрудозатратСотрудники.Ссылка <> &Документ
	       	|	И ЭП_ПланированиеТрудозатрат.Статус В(&Статусы)
	       	|	И ЭП_ПланированиеТрудозатрат.Проект = &Проект";
	
КонецФункции

#КонецОбласти 

// ++ Спиридонов А.И. 09.12.2024
&НаСервереБезКонтекста
Функция ПолучитьРольУтвержденияПереработок(Знач ТекущийПользователь)
	
	Возврат	Пользователи.РолиДоступны("ЭП_УтверждениеТрудозатратКПремированию", ТекущийПользователь);
	
КонецФункции 

// ++ Спиридонов А.И. 09.12.2024
&НаСервереБезКонтекста
Функция ПолучитьРольПланированиеПереработок(Знач ТекущийПользователь)
	
	Возврат	Пользователи.РолиДоступны("ЭП_ПодготовкаДокументовТрудозатратыКПремированию", ТекущийПользователь);
	
КонецФункции

// ++ Спиридонов А.И. 09.12.2024
&НаСервереБезКонтекста
Функция ПолучитьРольСогласованиеПереработок(Знач ТекущийПользователь)
	
	Возврат	Пользователи.РолиДоступны("ЭП_СогласованиеТрудозатратКПремированию", ТекущийПользователь);
	
КонецФункции

// ++ Спиридонов А.И. 09.12.2024
&НаСервере
Процедура ПроверитьДокументНаКорекктностьДанных(Отказ)
	
	Если ПроверитьДругиеДокументыНаСотрудников() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ПроверитьТабличнуюЧастьНаДублиСтрок() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;  
		
	Если НЕ ЗначениеЗаполнено(Объект.Сотрудники) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнена табличная часть.",,,,Отказ);
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(Объект.Проект) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнен проект.",,"Объект.Проект",,Отказ);
	КонецЕсли;
	
	Если НЕ Пользователи.РолиДоступны("ЭП_ДобавлениеИзменение_ТрудозатратыКПремированию") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Недостаточно прав на запись.",,,,Отказ);
		Возврат;			
	КонецЕсли;
	
	Для каждого Строка Из Объект.Сотрудники Цикл
		Если Не ЗначениеЗаполнено(Строка.ЧасыПереработок) Тогда
			СтрокаСообщения = СтрШаблон("Не заполнены часы переработок у сотрудника в строке %1",Строка.НомерСтроки);
			Реквизит = "Объект.Сотрудники[" + Строка.ПолучитьИдентификатор() + "].ЧасыПереработок";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения,,Реквизит,,Отказ);
		КонецЕсли; 
	КонецЦикла;	
	
КонецПроцедуры 

// ++ Спиридонов А.И. 09.12.2024
&НаСервереБезКонтекста
Функция ПроверитьДатыЗакрытияРасчетныхПрофилей(Дата)
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатБлокировки = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ЭП_ДатыЗакрытияРедактированияПоказателейСрезПоследних.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК Период
		|ИЗ
		|	РегистрСведений.ЭП_ДатыЗакрытияРедактированияПоказателей.СрезПоследних КАК ЭП_ДатыЗакрытияРедактированияПоказателейСрезПоследних
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(ЭП_ДатыЗакрытияРедактированияПоказателейСрезПоследних.Период, ДАТАВРЕМЯ(1, 1, 1))";
		
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда 
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если Дата < КонецМесяца(ВыборкаДетальныеЗаписи.Период) Тогда
				Возврат Истина;
			Иначе
				РезультатБлокировки = Ложь;
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);

	Возврат РезультатБлокировки;
	
КонецФункции

// ++ Спиридонов А.И. 09.12.2024
&НаСервере
Процедура ПроверитьЗакрытиеПериода()

	ПериодЗакрыт = ПроверитьДатыЗакрытияРасчетныхПрофилей(Объект.Дата);
	ДоступныПолныеПрава = Пользователи.РолиДоступны("ПолныеПрава");
	
	МассивЭлементовПредупреждений = Новый Массив;
	МассивЭлементовПредупреждений.Добавить("ГруппаПредупреждение");
	МассивЭлементовПредупреждений.Добавить("ГруппаПредупреждениеПолноправныхПользователей");

	Если Не ПериодЗакрыт И Параметры.Ключ.Пустая() Тогда
		ЭП_ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементовПредупреждений, "Видимость", Ложь);
	ИначеЕсли Не ПериодЗакрыт И Не Параметры.Ключ.Пустая() Тогда
		ЭП_ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементовПредупреждений, "Видимость", Ложь);	
	ИначеЕсли ПериодЗакрыт И Не Параметры.Ключ.Пустая() Тогда 
		Если Не ДоступныПолныеПрава Тогда 
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПредупреждениеПолноправныхПользователей", "Видимость", Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПредупреждение", "Видимость", Истина);
			ЭтотОбъект.Элементы.ФормаЗаписать.Доступность = Ложь;
			ЭтотОбъект.Элементы.ФормаЗаписатьИЗакрыть.Доступность = Ложь;
			ЭтотОбъект.ТолькоПросмотр = Истина;
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПредупреждениеПолноправныхПользователей", "Видимость", Истина); 
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПредупреждение", "Видимость", Ложь);
		КонецЕсли; 
	ИначеЕсли ПериодЗакрыт И Параметры.Ключ.Пустая() Тогда
		Если Не ДоступныПолныеПрава Тогда 
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ГруппаПредупреждениеПолноправныхПользователей", "Видимость", Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ГруппаПредупреждение","Видимость",Истина); 
			ЭтотОбъект.Элементы.ФормаЗаписать.Доступность = Ложь;
			ЭтотОбъект.Элементы.ФормаЗаписатьИЗакрыть.Доступность = Ложь;
			ЭтотОбъект.ТолькоПросмотр = Истина;
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ГруппаПредупреждениеПолноправныхПользователей","Видимость",Истина); 
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ГруппаПредупреждение","Видимость",Ложь);
		КонецЕсли; 	
	КонецЕсли; 		
	
КонецПроцедуры 

// ++ Спиридонов А.И. 09.12.2024
&НаСервере
Процедура ИнициализироватьДокумент()
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();

	Если Параметры.Ключ.Пустая() Тогда	
		Объект.Дата = ТекущаяДатаСеанса();
		Объект.ДатаНачалаРасчетногоПериода = ДобавитьМесяц(НачалоМесяца(ТекущаяДатаСеанса()), -1);
		Объект.ДатаОкончанияРасчетногоПериода = КонецМесяца(Объект.ДатаНачалаРасчетногоПериода)+1;
		Объект.СогласованиеОтветственными = Перечисления.ЭП_СогласованиеПланаФакта.СогласованиеПланаОтветственными;
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.Проект) Тогда
		Элементы.ИсполнительУтвержденияПереработок.СписокВыбора.ЗагрузитьЗначения(ПолучитьМассивВыбора(Объект.Проект));
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ответственный) Тогда
		Объект.Ответственный = ТекущийПользователь;
	КонецЕсли; 
	
КонецПроцедуры

// ++ Спиридонов А.И. 09.12.2024
&НаСервереБезКонтекста
Функция ПолучитьТекстЗапросаДляМассиваВыбора()
	
	Возврат "ВЫБРАТЬ
	|	ГруппыДоступаПользователи.Ссылка КАК Ссылка,
	|	ГруппыДоступаПользователи.Пользователь КАК Пользователь,
	|	ГруппыДоступа.Профиль КАК Профиль
	|ПОМЕСТИТЬ ВТ_Профили
	|ИЗ
	|	Справочник.ГруппыДоступа КАК ГруппыДоступа
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|		ПО ГруппыДоступа.Ссылка = ГруппыДоступаПользователи.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Профиль
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Профили.Пользователь КАК Пользователь
	|ПОМЕСТИТЬ ВТ_Роли
	|ИЗ
	|	ВТ_Профили КАК ВТ_Профили
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
	|		ПО ВТ_Профили.Профиль = ПрофилиГруппДоступаРоли.Ссылка
	|ГДЕ
	|	ПрофилиГруппДоступаРоли.Роль = &Роль
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Профили.Пользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Пользователь
	|ПОМЕСТИТЬ ВТ_Сотрудники
	|ИЗ
	|	Справочник.Проекты.УведомлениеРуководителей КАК ПроектыУведомлениеРуководителей
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО ПроектыУведомлениеРуководителей.Сотрудник = Пользователи.ЭП_Сотрудник
	|ГДЕ
	|   ПроектыУведомлениеРуководителей.Ссылка = &Проект
	|
	|СГРУППИРОВАТЬ ПО
	|	Пользователи.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Роли.Пользователь КАК Пользователь
	|ПОМЕСТИТЬ ВТ_Итоги
	|ИЗ
	|	ВТ_Роли КАК ВТ_Роли
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Сотрудники.Пользователь
	|ИЗ
	|	ВТ_Сотрудники КАК ВТ_Сотрудники
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Итоги.Пользователь КАК Сотрудник
	|ИЗ
	|	ВТ_Итоги КАК ВТ_Итоги
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Итоги.Пользователь"; 
	
КонецФункции

// ++ Спиридонов А.И. 09.12.2024
&НаСервереБезКонтекста
Функция ПолучитьТекстЗапросаДляОтправкиУведомлений() 
	
	Возврат "ВЫБРАТЬ
	|	ГруппыДоступаПользователи.Ссылка КАК Ссылка,
	|	ГруппыДоступаПользователи.Пользователь КАК Пользователь,
	|	ГруппыДоступа.Профиль КАК Профиль
	|ПОМЕСТИТЬ ВТ_Профили
	|ИЗ
	|	Справочник.ГруппыДоступа КАК ГруппыДоступа
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|		ПО ГруппыДоступа.Ссылка = ГруппыДоступаПользователи.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Профиль
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Профили.Пользователь КАК Пользователь
	|ПОМЕСТИТЬ ВТ_Роли
	|ИЗ
	|	ВТ_Профили КАК ВТ_Профили
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
	|		ПО ВТ_Профили.Профиль = ПрофилиГруппДоступаРоли.Ссылка
	|ГДЕ
	|	ПрофилиГруппДоступаРоли.Роль = &Роль
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Профили.Пользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Пользователь
	|ПОМЕСТИТЬ ВТ_Сотрудники
	|ИЗ
	|	Справочник.Проекты.УведомлениеРуководителей КАК ПроектыУведомлениеРуководителей
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО ПроектыУведомлениеРуководителей.Сотрудник = Пользователи.ЭП_Сотрудник
	|ГДЕ
	|	ПроектыУведомлениеРуководителей.Оповещения
	|	И ПроектыУведомлениеРуководителей.Ссылка = &Проект
	|
	|СГРУППИРОВАТЬ ПО
	|	Пользователи.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Роли.Пользователь КАК Пользователь
	|ПОМЕСТИТЬ ВТ_Итоги
	|ИЗ
	|	ВТ_Роли КАК ВТ_Роли
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Сотрудники.Пользователь
	|ИЗ
	|	ВТ_Сотрудники КАК ВТ_Сотрудники
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Итоги.Пользователь КАК Пользователь
	|ИЗ
	|	ВТ_Итоги КАК ВТ_Итоги
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Итоги.Пользователь"; 

КонецФункции

// ++ Спиридонов А.И. 19.12.2024
&НаСервере
Процедура ПодобратьЧасыПереработокНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаСотрудники = Объект.Сотрудники.Выгрузить(,"Сотрудник, Дата, ТехническийПроект, Задача, НомерСтроки");
	 	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВТ_ТабличнаяЧастьДокумента.Сотрудник КАК Сотрудник,
		|	ВТ_ТабличнаяЧастьДокумента.Задача КАК Задача,
		|	ВТ_ТабличнаяЧастьДокумента.ТехническийПроект КАК ТехническийПроект,
		|	ВТ_ТабличнаяЧастьДокумента.Дата КАК Дата,
		|	ВТ_ТабличнаяЧастьДокумента.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВТ_ДанныеСотрудников
		|ИЗ
		|	&ТаблицаСотрудники КАК ВТ_ТабличнаяЧастьДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УчетВремени.ТехническийПроект КАК ТехническийПроект,
		|	УчетВремени.Длительность / 3600 КАК Длительность,
		|	УчетВремени.Задача КАК Задача,
		|	Пользователи.ЭП_Сотрудник КАК Сотрудник,
		|	НАЧАЛОПЕРИОДА(УчетВремени.Период, ДЕНЬ) КАК Период
		|ПОМЕСТИТЬ ВТ_ДанныеРегистра
		|ИЗ
		|	РегистрНакопления.УчетВремени КАК УчетВремени
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО УчетВремени.Пользователь = Пользователи.Ссылка
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(УчетВремени.Период, ДЕНЬ) >= &НачалоПериода
		|	И НАЧАЛОПЕРИОДА(УчетВремени.Период, ДЕНЬ) <= &КонецПериода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДанныеСотрудников.Сотрудник КАК Сотрудник,
		|	ВТ_ДанныеСотрудников.Задача КАК Задача,
		|	ВТ_ДанныеСотрудников.ТехническийПроект КАК ТехническийПроект,
		|	ВТ_ДанныеСотрудников.Дата КАК Дата,
		|	ВТ_ДанныеРегистра.Длительность КАК Длительность,
		|	ВТ_ДанныеСотрудников.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВТ_ДанныеПоЗадачам
		|ИЗ
		|	ВТ_ДанныеСотрудников КАК ВТ_ДанныеСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеРегистра КАК ВТ_ДанныеРегистра
		|		ПО ВТ_ДанныеСотрудников.Задача = ВТ_ДанныеРегистра.Задача
		|			И ВТ_ДанныеСотрудников.Сотрудник = ВТ_ДанныеРегистра.Сотрудник
		|			И ВТ_ДанныеСотрудников.ТехническийПроект = ВТ_ДанныеРегистра.ТехническийПроект
		|			И ВТ_ДанныеСотрудников.Дата = ВТ_ДанныеРегистра.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДанныеСотрудников.Сотрудник КАК Сотрудник,
		|	ВТ_ДанныеСотрудников.Задача КАК Задача,
		|	ВТ_ДанныеСотрудников.ТехническийПроект КАК ТехническийПроект,
		|	ВТ_ДанныеСотрудников.Дата КАК Дата,
		|	ВТ_ДанныеСотрудников.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВТ_СотрудникиБезТрудозатратПоЗадачам
		|ИЗ
		|	ВТ_ДанныеСотрудников КАК ВТ_ДанныеСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеПоЗадачам КАК ВТ_ДанныеПоЗадачам
		|		ПО ВТ_ДанныеСотрудников.Сотрудник = ВТ_ДанныеПоЗадачам.Сотрудник
		|ГДЕ
		|	ВТ_ДанныеПоЗадачам.Сотрудник ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_СотрудникиБезТрудозатратПоЗадачам.Сотрудник КАК Сотрудник,
		|	ВТ_СотрудникиБезТрудозатратПоЗадачам.ТехническийПроект КАК ТехническийПроект,
		|	ВТ_СотрудникиБезТрудозатратПоЗадачам.Дата КАК Дата,
		|	ВТ_ДанныеРегистра.Длительность КАК Длительность,
		|	ЗНАЧЕНИЕ(Справочник.ЗадачиПроцесса.ПустаяСсылка) КАК Задача,
		|	ВТ_СотрудникиБезТрудозатратПоЗадачам.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВТ_ДанныеПоСотрудникамБезЗадач
		|ИЗ
		|	ВТ_СотрудникиБезТрудозатратПоЗадачам КАК ВТ_СотрудникиБезТрудозатратПоЗадачам
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеРегистра КАК ВТ_ДанныеРегистра
		|		ПО ВТ_СотрудникиБезТрудозатратПоЗадачам.Сотрудник = ВТ_ДанныеРегистра.Сотрудник
		|			И ВТ_СотрудникиБезТрудозатратПоЗадачам.ТехническийПроект = ВТ_ДанныеРегистра.ТехническийПроект
		|			И ВТ_СотрудникиБезТрудозатратПоЗадачам.Дата = ВТ_ДанныеРегистра.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДанныеПоЗадачам.Сотрудник КАК Сотрудник,
		|	ВТ_ДанныеПоЗадачам.Задача КАК Задача,
		|	ВТ_ДанныеПоЗадачам.ТехническийПроект КАК ТехническийПроект,
		|	ВТ_ДанныеПоЗадачам.Дата КАК Дата,
		|	ЕСТЬNULL(ВТ_ДанныеПоЗадачам.Длительность, 0) КАК Длительность,
		|	ВТ_ДанныеПоЗадачам.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВТ_ДанныеПоСотрудникам
		|ИЗ
		|	ВТ_ДанныеПоЗадачам КАК ВТ_ДанныеПоЗадачам
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ДанныеПоСотрудникамБезЗадач.Сотрудник,
		|	ВТ_ДанныеПоСотрудникамБезЗадач.Задача,
		|	ВТ_ДанныеПоСотрудникамБезЗадач.ТехническийПроект,
		|	ВТ_ДанныеПоСотрудникамБезЗадач.Дата,
		|	ЕСТЬNULL(ВТ_ДанныеПоСотрудникамБезЗадач.Длительность, 0),
		|	ВТ_ДанныеПоСотрудникамБезЗадач.НомерСтроки
		|ИЗ
		|	ВТ_ДанныеПоСотрудникамБезЗадач КАК ВТ_ДанныеПоСотрудникамБезЗадач
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДанныеПоСотрудникам.Сотрудник КАК Сотрудник,
		|	ВТ_ДанныеПоСотрудникам.Задача КАК Задача,
		|	ВТ_ДанныеПоСотрудникам.ТехническийПроект КАК ТехническийПроект,
		|	ВТ_ДанныеПоСотрудникам.Дата КАК Дата,
		|	СУММА(ВТ_ДанныеПоСотрудникам.Длительность) КАК Длительность,
		|	ВТ_ДанныеПоСотрудникам.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВТ_ДанныеПоСотрудникам КАК ВТ_ДанныеПоСотрудникам
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ДанныеПоСотрудникам.Задача,
		|	ВТ_ДанныеПоСотрудникам.Дата,
		|	ВТ_ДанныеПоСотрудникам.Сотрудник,
		|	ВТ_ДанныеПоСотрудникам.ТехническийПроект,
		|	ВТ_ДанныеПоСотрудникам.НомерСтроки"; 
	
	Запрос.УстановитьПараметр("ТаблицаСотрудники", ТаблицаСотрудники); 
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(КонецМесяца(Объект.Дата)));

	РезультатЗапроса = Запрос.Выполнить();
	// Это какой-то ужас, я насчитал четыре метода заполнить фактические часы, остановился на самом плохом наверное
	Если Не РезультатЗапроса.Пустой() Тогда 		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл			
			Для Каждого СтрокаТЗ Из Объект.Сотрудники Цикл			
				Если СтрокаТЗ.Сотрудник = Выборка.Сотрудник И СтрокаТЗ.Задача = Выборка.Задача 
					И СтрокаТЗ.ТехническийПроект = Выборка.ТехническийПроект И СтрокаТЗ.Дата = Выборка.Дата
					И СтрокаТЗ.НомерСтроки = Выборка.НомерСтроки Тогда
					
					СтрокаТЗ.ЧасыФакт = Выборка.Длительность;					
				КонецЕсли;			
			КонецЦикла;			
		КонецЦикла;		
	КонецЕсли;
	
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.ЭП_СтатусыДокументаУтверждениеПереработок.НаСогласовании") Тогда
		
		ВыполнитьОповещение(Объект.Ссылка, ПредопределенноеЗначение("Перечисление.ЭП_СтатусыДокументаУтверждениеПереработок.НаСогласовании"));

	ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.ЭП_СтатусыДокументаУтверждениеПереработок.НовыйДокумент") Тогда
			
		ВыполнитьОповещение(Объект.Ссылка, ПредопределенноеЗначение("Перечисление.ЭП_СтатусыДокументаУтверждениеПереработок.НовыйДокумент"));

	ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.ЭП_СтатусыДокументаУтверждениеПереработок.Отменен")  Тогда
			
		ВыполнитьОповещение(Объект.Ссылка, ПредопределенноеЗначение("Перечисление.ЭП_СтатусыДокументаУтверждениеПереработок.Отменен"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОповещение(Объект, Статус)

	СтруткураПараметров = Новый Структура;
	
	СтруткураПараметров.Вставить("Объект", Объект);
	СтруткураПараметров.Вставить("Статус", Статус);
	
	Оповестить("СтатусНаСогласовании", СтруткураПараметров, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти
