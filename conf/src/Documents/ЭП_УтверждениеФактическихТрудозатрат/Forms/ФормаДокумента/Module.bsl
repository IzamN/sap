#Область ОписаниеПеременных
//Перем ПериодРегистрации; 
#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.Дата = ТекущаяДатаСеанса(); 
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
	Если ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Элементы.Дата.Заголовок = ЗаголовокПериодаЗатратВремени(); 
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	 // СтандартныеПодсистемы.УправлениеДоступом
    УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
    // Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	 // СтандартныеПодсистемы.УправлениеДоступом
    Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
        МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
        МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
    КонецЕсли;
    // Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент) 
	
	Элементы.Дата.Заголовок = ЗаголовокПериодаЗатратВремени();
	
	Если Объект.Проект.Пустая() ИЛИ Объект.ВидОперации.Пустая() Тогда
		Объект.Сотрудники.Очистить();
		Возврат;
	КонецЕсли;
		
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ЭП_ВидыОперацийНадФактическимиТрудозатратами.ТрудозатратыКоманды") Тогда
		Объект.Дата = КонецНедели(ТекущаяДата());
	Иначе 
		Объект.Дата = КонецМесяца(ТекущаяДата());
	КонецЕсли;
	
	ЗаполнитьТрудозатратыПоУчетуВремени();
	
КонецПроцедуры 

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)  
	
	Если Объект.Проект.Пустая() ИЛИ Объект.ВидОперации.Пустая() Тогда
		Объект.Сотрудники.Очистить();
		Возврат;
	КонецЕсли;  
	
	ЗаполнитьТрудозатратыПоУчетуВремени();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектПриИзменении(Элемент)  
	
	Если Объект.Проект.Пустая() ИЛИ Объект.ВидОперации.Пустая() Тогда
		Объект.Сотрудники.Очистить();
		Возврат;
	КонецЕсли;  
	
	ЗаполнитьТрудозатратыПоУчетуВремени();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСотрудники
// Код процедур и функций
#КонецОбласти

#Область ОбработчикиКомандТаблицыФормыСотрудники

&НаКлиенте
Процедура СформироватьДетализациюПоПроекту(Команда)
	
	ФормаОтчета = ПолучитьФорму("Отчет.ЭП_ТрудозатратыКоманды.Форма");
	КомпоновщикНастроек = ФормаОтчета.Отчет.КомпоновщикНастроек;
	Период = Новый СтандартныйПериод;
	Период.ДатаНачала = ПериодОтчета().ДатаНачала;
	Период.ДатаОкончания = ПериодОтчета().ДатаОкончания;
		
	СписокСотрудников = Новый СписокЗначений;
	Для каждого СтрокаТЧ Из Объект.Сотрудники Цикл
	
		СписокСотрудников.Добавить(СтрокаТЧ.Сотрудник);
	
	КонецЦикла;
	
	УстановитьПользовательскийПараметрСКД(КомпоновщикНастроек, "ПериодОтчета", Период);
	УстановитьПользовательскийОтборСКД(КомпоновщикНастроек, "Сотрудник", СписокСотрудников, ВидСравненияКомпоновкиДанных.ВСписке);
	УстановитьПользовательскийОтборСКД(КомпоновщикНастроек, "Проект", Объект.Проект);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыФормы.Вставить("КлючВарианта", "Основной");
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", КомпоновщикНастроек.ПользовательскиеНастройки); 
	
	ОткрытьФорму("Отчет.ЭП_ТрудозатратыКоманды.Форма", ПараметрыФормы, ЭтаФорма);	
	
КонецПроцедуры 

&НаКлиенте
Процедура СформироватьДетализациюПоСотруднику(Команда)
	
	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	
	ФормаОтчета = ПолучитьФорму("Отчет.ЭП_ДетализацияУчетаВремени.Форма");
	КомпоновщикНастроек = ФормаОтчета.Отчет.КомпоновщикНастроек;
	Период = Новый СтандартныйПериод;
	Период.ДатаНачала = ПериодОтчета().ДатаНачала;
	Период.ДатаОкончания = ПериодОтчета().ДатаОкончания;
	
	УстановитьПользовательскийПараметрСКД(КомпоновщикНастроек, "Период", Период);
	УстановитьПользовательскийПараметрСКД(КомпоновщикНастроек, "Пользователь", НайтиПользователя(ТекущиеДанные.Сотрудник));
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыФормы.Вставить("КлючВарианта", "ОсновнойДляФактическихТрудозатрат");
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", КомпоновщикНастроек.ПользовательскиеНастройки); 
	
	ОткрытьФорму("Отчет.ЭП_ДетализацияУчетаВремени.Форма", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры 

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Перезаполнить(Команда)
	
	Объект.Сотрудники.Очистить();
	
	Если Объект.Проект.Пустая() ИЛИ Объект.ВидОперации.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТрудозатратыПоУчетуВремени();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьТрудозатратыПоУчетуВремени()
	
	Запрос = Новый Запрос;     
	Запрос.УстановитьПараметр("КонецПериода",Объект.Дата);
	Запрос.УстановитьПараметр("Проект", Объект.Проект);
	
	Если Объект.ВидОперации = Перечисления.ЭП_ВидыОперацийНадФактическимиТрудозатратами.ТрудозатратыКоманды Тогда
	 	
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	УчетВремениОбороты.Пользователь.ЭП_Сотрудник КАК Сотрудник,
		|	СУММА(УчетВремениОбороты.ДлительностьОборот / 3600) КАК Часы
		|ИЗ
		|	РегистрНакопления.УчетВремени.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			,
		|			НЕ Проект.Ответственный = Пользователь
		|				И Проект = &Проект) КАК УчетВремениОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	УчетВремениОбороты.Пользователь.ЭП_Сотрудник";
		
		Запрос.УстановитьПараметр("НачалоПериода", НачалоНедели(Объект.Дата));
				
	Иначе 
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	УчетВремениОбороты.Пользователь.ЭП_Сотрудник КАК Сотрудник,
		|	СУММА(УчетВремениОбороты.ДлительностьОборот / 3600) КАК Часы
		|ИЗ
		|	РегистрНакопления.УчетВремени.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			,
		|			Проект.Ответственный = Пользователь
		|				И Проект = &Проект) КАК УчетВремениОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	УчетВремениОбороты.Пользователь.ЭП_Сотрудник";
		
		Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Объект.Дата));
		
	КонецЕсли;
	
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	Объект.Сотрудники.Загрузить(Выгрузка);   
	
КонецПроцедуры

//Получение заголовка элемента шапки формы "Дата"
&НаКлиенте
Функция ЗаголовокПериодаЗатратВремени()   
	
	Заголовок = "Затраты времени за";
	
	Если Объект.ВидОперации.Пустая() Тогда
		Возврат Заголовок;
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ЭП_ВидыОперацийНадФактическимиТрудозатратами.ТрудозатратыКоманды") Тогда
		Заголовок = "Затраты времени за неделю"; 
		Объект.Дата = КонецНедели(Объект.Дата);
	Иначе 
		Заголовок = "Затраты времени за месяц";
		Объект.Дата = КонецМесяца(Объект.Дата);
	КонецЕсли;
		
	Возврат Заголовок;

КонецФункции  


&НаСервереБезКонтекста
Функция НайтиПользователя(Сотрудник)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	Пользователи.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Пользователи КАК Пользователи
	               |ГДЕ
	               |	Пользователи.ЭП_Сотрудник = &ЭП_Сотрудник";
	Запрос.УстановитьПараметр("ЭП_Сотрудник", Сотрудник);
	
	Выборка = Запрос.Выполнить().Выбрать(); Выборка.Следующий();
	
	Возврат Выборка.Ссылка;

КонецФункции

&НаСервере
Функция ПериодОтчета()
	
	Если Объект.ВидОперации = Перечисления.ЭП_ВидыОперацийНадФактическимиТрудозатратами.ТрудозатратыКоманды Тогда
		ДатаНачала = НачалоНедели(Объект.Дата);
		ДатаОкончания = КонецНедели(Объект.Дата);
	ИначеЕсли Объект.ВидОперации = Перечисления.ЭП_ВидыОперацийНадФактическимиТрудозатратами.ТрудозатратыРП Тогда 
		ДатаНачала = Началомесяца(Объект.Дата);
		ДатаОкончания = КонецМесяца(Объект.Дата);		
	КонецЕсли; 
	
	Период = Новый Структура("ДатаНачала, ДатаОкончания", ДатаНачала, ДатаОкончания);
	
	Возврат Период;
	
КонецФункции


&НаКлиенте
Процедура УстановитьПользовательскийПараметрСКД(КомпоновщикНастроек, ИмяПараметра, Значение)
	
	Перем ПараметрДанных, Настройки, ПользовательскиеНастройки, ПользовательскийПараметр;
	
	Настройки = КомпоновщикНастроек.Настройки;
	
	ПараметрДанных = Настройки.ПараметрыДанных.Элементы.Найти(ИмяПараметра);
	
	Если ЗначениеЗаполнено(ПараметрДанных.ИдентификаторПользовательскойНастройки) Тогда
		
		ПользовательскиеНастройки = КомпоновщикНастроек.ПользовательскиеНастройки;
		ПользовательскийПараметр = ПользовательскиеНастройки.Элементы.Найти(ПараметрДанных.ИдентификаторПользовательскойНастройки);
		ПользовательскийПараметр.Использование = Истина;
		ПользовательскийПараметр.Значение = Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПользовательскийОтборСКД(КомпоновщикНастроек, ИмяОтбора, Значение, ВидСравнения = Неопределено)
	
	Перем	ПолеКД, Элем, ЭлементОтбора, Настройки, 
			ПользовательскиеНастройки, ПользовательскийОтбор;
	
	Настройки = КомпоновщикНастроек.Настройки;
	
	ПолеКД = Новый ПолеКомпоновкиДанных(ИмяОтбора);
	
	Для Каждого Элем Из Настройки.Отбор.Элементы Цикл
		
		Если Элем.ЛевоеЗначение = ПолеКД Тогда
			ЭлементОтбора = Элем;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭлементОтбора = Неопределено Тогда
		Возврат;		
	КонецЕсли;		
	
	Если ЗначениеЗаполнено(ЭлементОтбора.ИдентификаторПользовательскойНастройки) Тогда
		
		ПользовательскиеНастройки = КомпоновщикНастроек.ПользовательскиеНастройки;
 		ПользовательскийОтбор = ПользовательскиеНастройки.Элементы.Найти(ЭлементОтбора.ИдентификаторПользовательскойНастройки);
		ПользовательскийОтбор.Использование = (Значение <> Неопределено);
		ПользовательскийОтбор.ВидСравнения = ?(ВидСравнения <> Неопределено, ВидСравнения, ВидСравненияКомпоновкиДанных.Равно); 
		ПользовательскийОтбор.ПравоеЗначение  = Значение;
	КонецЕсли;

КонецПроцедуры 

#КонецОбласти












